
FinalProjectV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ebc  0801416c  0801416c  0002416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017028  08017028  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08017028  08017028  00027028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017030  08017030  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017030  08017030  00027030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017034  08017034  00027034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08017038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058c4  200000e4  0801711c  000300e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200059a8  0801711c  000359a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d03b  00000000  00000000  00030157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007baa  00000000  00000000  0006d192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003060  00000000  00000000  00074d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025b6  00000000  00000000  00077da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b704  00000000  00000000  0007a356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e999  00000000  00000000  00085a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103778  00000000  00000000  000c43f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d6a8  00000000  00000000  001c7b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001d5214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000e4 	.word	0x200000e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014154 	.word	0x08014154

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000e8 	.word	0x200000e8
 800021c:	08014154 	.word	0x08014154

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f003 fc10 	bl	8004620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f8f4 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 fcf6 	bl	80017f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e08:	f000 f95a 	bl	80010c0 <MX_ADC1_Init>
  MX_DAC_Init();
 8000e0c:	f000 f9aa 	bl	8001164 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000e10:	f000 f9d2 	bl	80011b8 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000e14:	f000 fa34 	bl	8001280 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000e18:	f000 fa6a 	bl	80012f0 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000e1c:	f000 fe82 	bl	8001b24 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000e20:	f000 faca 	bl	80013b8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000e24:	f000 faf6 	bl	8001414 <MX_QUADSPI_Init>
  MX_UART10_Init();
 8000e28:	f000 fc90 	bl	800174c <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000e2c:	f000 fcb8 	bl	80017a0 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000e30:	f000 fb92 	bl	8001558 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e34:	f000 fb1a 	bl	800146c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e38:	f000 fc12 	bl	8001660 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000e3c:	f000 fa8e 	bl	800135c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
    // Servo 4 (D9)
  // Initialize ServoDrivers
  Servo_Init(&servo1, &htim3, TIM_CHANNEL_2);  // Servo 1 on TIM1 Channel 1 (PB8)
 8000e40:	2204      	movs	r2, #4
 8000e42:	4949      	ldr	r1, [pc, #292]	; (8000f68 <main+0x170>)
 8000e44:	4849      	ldr	r0, [pc, #292]	; (8000f6c <main+0x174>)
 8000e46:	f001 fa4f 	bl	80022e8 <Servo_Init>
  Servo_Init(&servo2, &htim2, TIM_CHANNEL_1);  // Servo 2 on TIM1 Channel 2 (PA9)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4948      	ldr	r1, [pc, #288]	; (8000f70 <main+0x178>)
 8000e4e:	4849      	ldr	r0, [pc, #292]	; (8000f74 <main+0x17c>)
 8000e50:	f001 fa4a 	bl	80022e8 <Servo_Init>
  Servo_Init(&servo3, &htim4, TIM_CHANNEL_3);  // Servo 3 on TIM1 Channel 3 (PA10)
 8000e54:	2208      	movs	r2, #8
 8000e56:	4948      	ldr	r1, [pc, #288]	; (8000f78 <main+0x180>)
 8000e58:	4848      	ldr	r0, [pc, #288]	; (8000f7c <main+0x184>)
 8000e5a:	f001 fa45 	bl	80022e8 <Servo_Init>
  Servo_Init(&servo4, &htim3, TIM_CHANNEL_3);  // Servo 4 on TIM3 Channel 1 (PB4)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	4941      	ldr	r1, [pc, #260]	; (8000f68 <main+0x170>)
 8000e62:	4847      	ldr	r0, [pc, #284]	; (8000f80 <main+0x188>)
 8000e64:	f001 fa40 	bl	80022e8 <Servo_Init>

  Servo_SetPosition(&servo1, 30);
 8000e68:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000e6c:	483f      	ldr	r0, [pc, #252]	; (8000f6c <main+0x174>)
 8000e6e:	f001 fa61 	bl	8002334 <Servo_SetPosition>
  Servo_SetPosition(&servo2, 30);
 8000e72:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000e76:	483f      	ldr	r0, [pc, #252]	; (8000f74 <main+0x17c>)
 8000e78:	f001 fa5c 	bl	8002334 <Servo_SetPosition>
  Servo_SetPosition(&servo3, 30);
 8000e7c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000e80:	483e      	ldr	r0, [pc, #248]	; (8000f7c <main+0x184>)
 8000e82:	f001 fa57 	bl	8002334 <Servo_SetPosition>
  Servo_SetPosition(&servo4, 30);
 8000e86:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000e8a:	483d      	ldr	r0, [pc, #244]	; (8000f80 <main+0x188>)
 8000e8c:	f001 fa52 	bl	8002334 <Servo_SetPosition>


  BSP_LCD_Init();
 8000e90:	f003 f8c5 	bl	800401e <BSP_LCD_Init>
         /* Clear the LCD */
      BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000e94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e98:	f003 f980 	bl	800419c <BSP_LCD_Clear>
        /* Set the font Size */
      BSP_LCD_SetFont(&Font16);
 8000e9c:	4839      	ldr	r0, [pc, #228]	; (8000f84 <main+0x18c>)
 8000e9e:	f003 f96d 	bl	800417c <BSP_LCD_SetFont>
        /* Set the Text Color */
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ea2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000ea6:	f003 f949 	bl	800413c <BSP_LCD_SetTextColor>
        /* Set the Back Color */
      BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000eaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000eae:	f003 f955 	bl	800415c <BSP_LCD_SetBackColor>
      BSP_LCD_DisplayStringAt(0, 30,
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <main+0x190>)
 8000eb6:	211e      	movs	r1, #30
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f003 f9cf 	bl	800425c <BSP_LCD_DisplayStringAt>
      CENTER_MODE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ebe:	f00e fc8b 	bl	800f7d8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of commandParsedSemaphore */
  commandParsedSemaphoreHandle = osSemaphoreNew(1, 0, &commandParsedSemaphore_attributes);
 8000ec2:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <main+0x194>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f00e fd7d 	bl	800f9c6 <osSemaphoreNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <main+0x198>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of uartRxSemaphore */
  uartRxSemaphoreHandle = osSemaphoreNew(1, 0, &uartRxSemaphore_attributes);
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <main+0x19c>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f00e fd75 	bl	800f9c6 <osSemaphoreNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <main+0x1a0>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* creation of xParseSemaphore */
  xParseSemaphoreHandle = osSemaphoreNew(1, 0, &xParseSemaphore_attributes);
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <main+0x1a4>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f00e fd6d 	bl	800f9c6 <osSemaphoreNew>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <main+0x1a8>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* creation of xServoControlSemaphore */
  xServoControlSemaphoreHandle = osSemaphoreNew(1, 0, &xServoControlSemaphore_attributes);
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <main+0x1ac>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f00e fd65 	bl	800f9c6 <osSemaphoreNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <main+0x1b0>)
 8000f00:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 14, &commandQueue_attributes);
 8000f02:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <main+0x1b4>)
 8000f04:	210e      	movs	r1, #14
 8000f06:	2010      	movs	r0, #16
 8000f08:	f00e fe7c 	bl	800fc04 <osMessageQueueNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <main+0x1b8>)
 8000f10:	6013      	str	r3, [r2, #0]

  /* creation of ServoCommandQueue */
  ServoCommandQueueHandle = osMessageQueueNew (16, 14, &ServoCommandQueue_attributes);
 8000f12:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <main+0x1bc>)
 8000f14:	210e      	movs	r1, #14
 8000f16:	2010      	movs	r0, #16
 8000f18:	f00e fe74 	bl	800fc04 <osMessageQueueNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <main+0x1c0>)
 8000f20:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Listening */
  ListeningHandle = osThreadNew(StartListening, NULL, &Listening_attributes);
 8000f22:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <main+0x1c4>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <main+0x1c8>)
 8000f28:	f00e fca0 	bl	800f86c <osThreadNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <main+0x1cc>)
 8000f30:	6013      	str	r3, [r2, #0]

  /* creation of CommandParse */
  CommandParseHandle = osThreadNew(StartCommandParse, NULL, &CommandParse_attributes);
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <main+0x1d0>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4825      	ldr	r0, [pc, #148]	; (8000fcc <main+0x1d4>)
 8000f38:	f00e fc98 	bl	800f86c <osThreadNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <main+0x1d8>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* creation of ServoLogTask */
  ServoLogTaskHandle = osThreadNew(StartServoControl, NULL, &ServoLogTask_attributes);
 8000f42:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <main+0x1dc>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <main+0x1e0>)
 8000f48:	f00e fc90 	bl	800f86c <osThreadNew>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <main+0x1e4>)
 8000f50:	6013      	str	r3, [r2, #0]

  /* creation of MonitoringTask */
  MonitoringTaskHandle = osThreadNew(StartMonitoring, NULL, &MonitoringTask_attributes);
 8000f52:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <main+0x1e8>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <main+0x1ec>)
 8000f58:	f00e fc88 	bl	800f86c <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <main+0x1f0>)
 8000f60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f62:	f00e fc5d 	bl	800f820 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <main+0x16e>
 8000f68:	200003a4 	.word	0x200003a4
 8000f6c:	2000058c 	.word	0x2000058c
 8000f70:	2000035c 	.word	0x2000035c
 8000f74:	2000059c 	.word	0x2000059c
 8000f78:	200003ec 	.word	0x200003ec
 8000f7c:	200005ac 	.word	0x200005ac
 8000f80:	200005bc 	.word	0x200005bc
 8000f84:	20000058 	.word	0x20000058
 8000f88:	0801421c 	.word	0x0801421c
 8000f8c:	08014390 	.word	0x08014390
 8000f90:	2000057c 	.word	0x2000057c
 8000f94:	080143a0 	.word	0x080143a0
 8000f98:	20000580 	.word	0x20000580
 8000f9c:	080143b0 	.word	0x080143b0
 8000fa0:	20000584 	.word	0x20000584
 8000fa4:	080143c0 	.word	0x080143c0
 8000fa8:	20000588 	.word	0x20000588
 8000fac:	08014360 	.word	0x08014360
 8000fb0:	20000574 	.word	0x20000574
 8000fb4:	08014378 	.word	0x08014378
 8000fb8:	20000578 	.word	0x20000578
 8000fbc:	080142d0 	.word	0x080142d0
 8000fc0:	08001fe5 	.word	0x08001fe5
 8000fc4:	20000564 	.word	0x20000564
 8000fc8:	080142f4 	.word	0x080142f4
 8000fcc:	08002031 	.word	0x08002031
 8000fd0:	20000568 	.word	0x20000568
 8000fd4:	08014318 	.word	0x08014318
 8000fd8:	0800215d 	.word	0x0800215d
 8000fdc:	2000056c 	.word	0x2000056c
 8000fe0:	0801433c 	.word	0x0801433c
 8000fe4:	080021e5 	.word	0x080021e5
 8000fe8:	20000570 	.word	0x20000570

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2234      	movs	r2, #52	; 0x34
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f012 fc62 	bl	80138c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <SystemClock_Config+0xcc>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <SystemClock_Config+0xd0>)
 8001036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001048:	2301      	movs	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800104c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001050:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001060:	2360      	movs	r3, #96	; 0x60
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001064:	2306      	movs	r3, #6
 8001066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4618      	mov	r0, r3
 8001076:	f008 fb3f 	bl	80096f8 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001080:	f001 f92c 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2101      	movs	r1, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 fce7 	bl	8008a74 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010ac:	f001 f916 	bl	80022dc <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3750      	adds	r7, #80	; 0x50
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC1_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_ADC1_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_ADC1_Init+0x98>)
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <MX_ADC1_Init+0xa0>)
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_ADC1_Init+0x98>)
 800110c:	2201      	movs	r2, #1
 800110e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_ADC1_Init+0x98>)
 800111a:	2201      	movs	r2, #1
 800111c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <MX_ADC1_Init+0x98>)
 8001120:	f003 fae4 	bl	80046ec <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f001 f8d7 	bl	80022dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800112e:	230a      	movs	r3, #10
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_ADC1_Init+0x98>)
 8001140:	f003 fb18 	bl	8004774 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800114a:	f001 f8c7 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000100 	.word	0x20000100
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DAC_Init+0x50>)
 8001176:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_DAC_Init+0x4c>)
 800117a:	f003 fe0b 	bl	8004d94 <HAL_DAC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001184:	f001 f8aa 	bl	80022dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001198:	f003 fe7e 	bl	8004e98 <HAL_DAC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011a2:	f001 f89b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000148 	.word	0x20000148
 80011b4:	40007400 	.word	0x40007400

080011b8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011be:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <MX_DFSDM1_Init+0xb8>)
 80011c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011dc:	2201      	movs	r2, #1
 80011de:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80011e6:	4821      	ldr	r0, [pc, #132]	; (800126c <MX_DFSDM1_Init+0xb4>)
 80011e8:	f003 ffaa 	bl	8005140 <HAL_DFSDM_FilterInit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 80011f2:	f001 f873 	bl	80022dc <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <MX_DFSDM1_Init+0xc0>)
 80011fa:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 80011fe:	2201      	movs	r2, #1
 8001200:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 800120a:	2202      	movs	r2, #2
 800120c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001222:	2202      	movs	r2, #2
 8001224:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001234:	2201      	movs	r2, #1
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_DFSDM1_Init+0xbc>)
 8001246:	f003 fe8b 	bl	8004f60 <HAL_DFSDM_ChannelInit>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8001250:	f001 f844 	bl	80022dc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001254:	2201      	movs	r2, #1
 8001256:	4909      	ldr	r1, [pc, #36]	; (800127c <MX_DFSDM1_Init+0xc4>)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_DFSDM1_Init+0xb4>)
 800125a:	f004 f85d 	bl	8005318 <HAL_DFSDM_FilterConfigRegChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 8001264:	f001 f83a 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000015c 	.word	0x2000015c
 8001270:	40016100 	.word	0x40016100
 8001274:	200001b0 	.word	0x200001b0
 8001278:	40016020 	.word	0x40016020
 800127c:	00010002 	.word	0x00010002

08001280 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <MX_DFSDM2_Init+0x6c>)
 8001288:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 8001298:	2202      	movs	r2, #2
 800129a:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_DFSDM2_Init+0x68>)
 80012d4:	f003 fe44 	bl	8004f60 <HAL_DFSDM_ChannelInit>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80012de:	f000 fffd 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001e8 	.word	0x200001e8
 80012ec:	400164e0 	.word	0x400164e0

080012f0 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <MX_FMPI2C1_Init+0x64>)
 80012f8:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 80012fc:	4a16      	ldr	r2, [pc, #88]	; (8001358 <MX_FMPI2C1_Init+0x68>)
 80012fe:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800132a:	4809      	ldr	r0, [pc, #36]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 800132c:	f004 f930 	bl	8005590 <HAL_FMPI2C_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001336:	f000 ffd1 	bl	80022dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_FMPI2C1_Init+0x60>)
 800133e:	f004 f9c2 	bl	80056c6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001348:	f000 ffc8 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000220 	.word	0x20000220
 8001354:	40006000 	.word	0x40006000
 8001358:	00303d5b 	.word	0x00303d5b

0800135c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C2_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <MX_I2C2_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C2_Init+0x50>)
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_I2C2_Init+0x58>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C2_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_I2C2_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_I2C2_Init+0x50>)
 800137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_I2C2_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_I2C2_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_I2C2_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_I2C2_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C2_Init+0x50>)
 800139a:	f006 fcc1 	bl	8007d20 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 ff9a 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000274 	.word	0x20000274
 80013b0:	40005800 	.word	0x40005800
 80013b4:	000186a0 	.word	0x000186a0

080013b8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_I2S2_Init+0x54>)
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <MX_I2S2_Init+0x58>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2S2_Init+0x54>)
 80013c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_I2S2_Init+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_I2S2_Init+0x54>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_I2S2_Init+0x54>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_I2S2_Init+0x54>)
 80013e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80013e4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_I2S2_Init+0x54>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <MX_I2S2_Init+0x54>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_I2S2_Init+0x54>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_I2S2_Init+0x54>)
 80013fa:	f006 fdd5 	bl	8007fa8 <HAL_I2S_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001404:	f000 ff6a 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002c8 	.word	0x200002c8
 8001410:	40003800 	.word	0x40003800

08001414 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_QUADSPI_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <MX_QUADSPI_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001426:	2204      	movs	r2, #4
 8001428:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_QUADSPI_Init+0x50>)
 800142c:	2210      	movs	r2, #16
 800142e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001432:	2218      	movs	r2, #24
 8001434:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_QUADSPI_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_QUADSPI_Init+0x50>)
 8001452:	f007 fa4d 	bl	80088f0 <HAL_QSPI_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 ff3e 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000310 	.word	0x20000310
 8001468:	a0001000 	.word	0xa0001000

0800146c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <MX_TIM2_Init+0xe8>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014a6:	2231      	movs	r2, #49	; 0x31
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014b2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c4:	4823      	ldr	r0, [pc, #140]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014c6:	f008 fbe3 	bl	8009c90 <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014d0:	f000 ff04 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	4619      	mov	r1, r3
 80014e0:	481c      	ldr	r0, [pc, #112]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014e2:	f008 ff69 	bl	800a3b8 <HAL_TIM_ConfigClockSource>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014ec:	f000 fef6 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f0:	4818      	ldr	r0, [pc, #96]	; (8001554 <MX_TIM2_Init+0xe8>)
 80014f2:	f008 fc8d 	bl	8009e10 <HAL_TIM_PWM_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014fc:	f000 feee 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4619      	mov	r1, r3
 800150e:	4811      	ldr	r0, [pc, #68]	; (8001554 <MX_TIM2_Init+0xe8>)
 8001510:	f009 fb5e 	bl	800abd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800151a:	f000 fedf 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151e:	2360      	movs	r3, #96	; 0x60
 8001520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_TIM2_Init+0xe8>)
 8001536:	f008 fe7d 	bl	800a234 <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001540:	f000 fecc 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <MX_TIM2_Init+0xe8>)
 8001546:	f001 fd2f 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 800154a:	bf00      	nop
 800154c:	3738      	adds	r7, #56	; 0x38
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000035c 	.word	0x2000035c

08001558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	; 0x38
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <MX_TIM3_Init+0x100>)
 800158a:	4a34      	ldr	r2, [pc, #208]	; (800165c <MX_TIM3_Init+0x104>)
 800158c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <MX_TIM3_Init+0x100>)
 8001590:	2231      	movs	r2, #49	; 0x31
 8001592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <MX_TIM3_Init+0x100>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <MX_TIM3_Init+0x100>)
 800159c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_TIM3_Init+0x100>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <MX_TIM3_Init+0x100>)
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ae:	482a      	ldr	r0, [pc, #168]	; (8001658 <MX_TIM3_Init+0x100>)
 80015b0:	f008 fb6e 	bl	8009c90 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015ba:	f000 fe8f 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_TIM3_Init+0x100>)
 80015cc:	f008 fef4 	bl	800a3b8 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015d6:	f000 fe81 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015da:	481f      	ldr	r0, [pc, #124]	; (8001658 <MX_TIM3_Init+0x100>)
 80015dc:	f008 fc18 	bl	8009e10 <HAL_TIM_PWM_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015e6:	f000 fe79 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	4619      	mov	r1, r3
 80015f8:	4817      	ldr	r0, [pc, #92]	; (8001658 <MX_TIM3_Init+0x100>)
 80015fa:	f009 fae9 	bl	800abd0 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001604:	f000 fe6a 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2204      	movs	r2, #4
 800161c:	4619      	mov	r1, r3
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_TIM3_Init+0x100>)
 8001620:	f008 fe08 	bl	800a234 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800162a:	f000 fe57 	bl	80022dc <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 800162e:	2332      	movs	r3, #50	; 0x32
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2208      	movs	r2, #8
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0x100>)
 800163a:	f008 fdfb 	bl	800a234 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001644:	f000 fe4a 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0x100>)
 800164a:	f001 fcad 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200003a4 	.word	0x200003a4
 800165c:	40000400 	.word	0x40000400

08001660 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08e      	sub	sp, #56	; 0x38
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <MX_TIM4_Init+0xe4>)
 8001692:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <MX_TIM4_Init+0xe8>)
 8001694:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <MX_TIM4_Init+0xe4>)
 8001698:	2231      	movs	r2, #49	; 0x31
 800169a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <MX_TIM4_Init+0xe4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <MX_TIM4_Init+0xe4>)
 80016a4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <MX_TIM4_Init+0xe4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MX_TIM4_Init+0xe4>)
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016b6:	4823      	ldr	r0, [pc, #140]	; (8001744 <MX_TIM4_Init+0xe4>)
 80016b8:	f008 faea 	bl	8009c90 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016c2:	f000 fe0b 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d0:	4619      	mov	r1, r3
 80016d2:	481c      	ldr	r0, [pc, #112]	; (8001744 <MX_TIM4_Init+0xe4>)
 80016d4:	f008 fe70 	bl	800a3b8 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016de:	f000 fdfd 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016e2:	4818      	ldr	r0, [pc, #96]	; (8001744 <MX_TIM4_Init+0xe4>)
 80016e4:	f008 fb94 	bl	8009e10 <HAL_TIM_PWM_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016ee:	f000 fdf5 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <MX_TIM4_Init+0xe4>)
 8001702:	f009 fa65 	bl	800abd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800170c:	f000 fde6 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001710:	2360      	movs	r3, #96	; 0x60
 8001712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2208      	movs	r2, #8
 8001724:	4619      	mov	r1, r3
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <MX_TIM4_Init+0xe4>)
 8001728:	f008 fd84 	bl	800a234 <HAL_TIM_PWM_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001732:	f000 fdd3 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <MX_TIM4_Init+0xe4>)
 8001738:	f001 fc36 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 800173c:	bf00      	nop
 800173e:	3738      	adds	r7, #56	; 0x38
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200003ec 	.word	0x200003ec
 8001748:	40000800 	.word	0x40000800

0800174c <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_UART10_Init+0x4c>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_UART10_Init+0x50>)
 8001754:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_UART10_Init+0x4c>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_UART10_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_UART10_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_UART10_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_UART10_Init+0x4c>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_UART10_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_UART10_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_UART10_Init+0x4c>)
 8001784:	f009 fab4 	bl	800acf0 <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 800178e:	f000 fda5 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000434 	.word	0x20000434
 800179c:	40011c00 	.word	0x40011c00

080017a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_USART6_UART_Init+0x50>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART6_UART_Init+0x4c>)
 80017d8:	f009 fa8a 	bl	800acf0 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017e2:	f000 fd7b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000047c 	.word	0x2000047c
 80017f0:	40011400 	.word	0x40011400

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	; 0x38
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
 800180e:	4bb2      	ldr	r3, [pc, #712]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4ab1      	ldr	r2, [pc, #708]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4baf      	ldr	r3, [pc, #700]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	4bab      	ldr	r3, [pc, #684]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4aaa      	ldr	r2, [pc, #680]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	4ba4      	ldr	r3, [pc, #656]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4aa3      	ldr	r2, [pc, #652]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 800184c:	f043 0320 	orr.w	r3, r3, #32
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4ba1      	ldr	r3, [pc, #644]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	4b9d      	ldr	r3, [pc, #628]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a9c      	ldr	r2, [pc, #624]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b9a      	ldr	r3, [pc, #616]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a95      	ldr	r2, [pc, #596]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b93      	ldr	r3, [pc, #588]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b8f      	ldr	r3, [pc, #572]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a8e      	ldr	r2, [pc, #568]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b8c      	ldr	r3, [pc, #560]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a87      	ldr	r2, [pc, #540]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a80      	ldr	r2, [pc, #512]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <MX_GPIO_Init+0x2e4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2138      	movs	r1, #56	; 0x38
 80018ee:	487b      	ldr	r0, [pc, #492]	; (8001adc <MX_GPIO_Init+0x2e8>)
 80018f0:	f004 f8c8 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2120      	movs	r1, #32
 80018f8:	4879      	ldr	r0, [pc, #484]	; (8001ae0 <MX_GPIO_Init+0x2ec>)
 80018fa:	f004 f8c3 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001904:	4877      	ldr	r0, [pc, #476]	; (8001ae4 <MX_GPIO_Init+0x2f0>)
 8001906:	f004 f8bd 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001910:	4875      	ldr	r0, [pc, #468]	; (8001ae8 <MX_GPIO_Init+0x2f4>)
 8001912:	f004 f8b7 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001916:	2338      	movs	r3, #56	; 0x38
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	486b      	ldr	r0, [pc, #428]	; (8001adc <MX_GPIO_Init+0x2e8>)
 800192e:	f003 ff15 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001942:	2303      	movs	r3, #3
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	4863      	ldr	r0, [pc, #396]	; (8001adc <MX_GPIO_Init+0x2e8>)
 800194e:	f003 ff05 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001962:	2308      	movs	r3, #8
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	485f      	ldr	r0, [pc, #380]	; (8001aec <MX_GPIO_Init+0x2f8>)
 800196e:	f003 fef5 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001984:	2302      	movs	r3, #2
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	4857      	ldr	r0, [pc, #348]	; (8001aec <MX_GPIO_Init+0x2f8>)
 8001990:	f003 fee4 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001994:	2302      	movs	r3, #2
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001998:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	484d      	ldr	r0, [pc, #308]	; (8001ae0 <MX_GPIO_Init+0x2ec>)
 80019aa:	f003 fed7 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 80019ae:	2301      	movs	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	484b      	ldr	r0, [pc, #300]	; (8001af0 <MX_GPIO_Init+0x2fc>)
 80019c4:	f003 feca 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 80019c8:	2320      	movs	r3, #32
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4840      	ldr	r0, [pc, #256]	; (8001ae0 <MX_GPIO_Init+0x2ec>)
 80019e0:	f003 febc 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80019e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	483c      	ldr	r0, [pc, #240]	; (8001aec <MX_GPIO_Init+0x2f8>)
 80019fc:	f003 feae 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a12:	2307      	movs	r3, #7
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4831      	ldr	r0, [pc, #196]	; (8001ae4 <MX_GPIO_Init+0x2f0>)
 8001a1e:	f003 fe9d 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001a22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	482a      	ldr	r0, [pc, #168]	; (8001ae4 <MX_GPIO_Init+0x2f0>)
 8001a3c:	f003 fe8e 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001a40:	f248 0380 	movw	r3, #32896	; 0x8080
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4824      	ldr	r0, [pc, #144]	; (8001ae8 <MX_GPIO_Init+0x2f4>)
 8001a58:	f003 fe80 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001a5c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <MX_GPIO_Init+0x2f4>)
 8001a76:	f003 fe71 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin SD_D2_Pin SD_D3_Pin
                           SD_CLK_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001a7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	4619      	mov	r1, r3
 8001a96:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <MX_GPIO_Init+0x2ec>)
 8001a98:	f003 fe60 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <MX_GPIO_Init+0x2fc>)
 8001aba:	f003 fe4f 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ace:	2306      	movs	r3, #6
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad6:	e00d      	b.n	8001af4 <MX_GPIO_Init+0x300>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40021400 	.word	0x40021400
 8001af0:	40020000 	.word	0x40020000
 8001af4:	4619      	mov	r1, r3
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <MX_GPIO_Init+0x32c>)
 8001af8:	f003 fe30 	bl	800575c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_GPIO_Init+0x32c>)
 8001b12:	f003 fe23 	bl	800575c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b16:	bf00      	nop
 8001b18:	3738      	adds	r7, #56	; 0x38
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020400 	.word	0x40020400

08001b24 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b3e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b42:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001b44:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b46:	4a4e      	ldr	r2, [pc, #312]	; (8001c80 <MX_FSMC_Init+0x15c>)
 8001b48:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b5c:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b5e:	2210      	movs	r2, #16
 8001b60:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001b62:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b68:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001bac:	23ff      	movs	r3, #255	; 0xff
 8001bae:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001bb8:	2311      	movs	r3, #17
 8001bba:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	482d      	ldr	r0, [pc, #180]	; (8001c7c <MX_FSMC_Init+0x158>)
 8001bc8:	f008 f81a 	bl	8009c00 <HAL_SRAM_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001bd2:	f000 fb83 	bl	80022dc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001bd8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bdc:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001be0:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <MX_FSMC_Init+0x15c>)
 8001be2:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001be6:	2204      	movs	r2, #4
 8001be8:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001c40:	230f      	movs	r3, #15
 8001c42:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c44:	230f      	movs	r3, #15
 8001c46:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001c48:	23ff      	movs	r3, #255	; 0xff
 8001c4a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001c50:	2310      	movs	r3, #16
 8001c52:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001c54:	2311      	movs	r3, #17
 8001c56:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4808      	ldr	r0, [pc, #32]	; (8001c84 <MX_FSMC_Init+0x160>)
 8001c64:	f007 ffcc 	bl	8009c00 <HAL_SRAM_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8001c6e:	f000 fb35 	bl	80022dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c72:	bf00      	nop
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200004c4 	.word	0x200004c4
 8001c80:	a0000104 	.word	0xa0000104
 8001c84:	20000514 	.word	0x20000514

08001c88 <MoveArmUpOrDown>:

/* USER CODE BEGIN 4 */
void MoveArmUpOrDown(int degrees){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	int stepSize = 2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61fb      	str	r3, [r7, #28]
	int delayTime = 10;// Calculate the total movement for each servo (Servo 2 and Servo 3)
 8001c94:	230a      	movs	r3, #10
 8001c96:	61bb      	str	r3, [r7, #24]
    int servo2Movement = degrees * 0.6;  // Example: 60% of the total movement for servo 2 (base joint)
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7fe fc6b 	bl	8000574 <__aeabi_i2d>
 8001c9e:	a35c      	add	r3, pc, #368	; (adr r3, 8001e10 <MoveArmUpOrDown+0x188>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fcd0 	bl	8000648 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe fedc 	bl	8000a6c <__aeabi_d2iz>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	617b      	str	r3, [r7, #20]
    int servo3Movement = degrees * 0.4;  // Example: 40% of the total movement for servo 3 (elbow joint)
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fc5b 	bl	8000574 <__aeabi_i2d>
 8001cbe:	a356      	add	r3, pc, #344	; (adr r3, 8001e18 <MoveArmUpOrDown+0x190>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fcc0 	bl	8000648 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fecc 	bl	8000a6c <__aeabi_d2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]

    // Get current positions of both servos
    int currentPos2 = Servo_GetPosition(&servo2);  // Current position of servo 2
 8001cd8:	484b      	ldr	r0, [pc, #300]	; (8001e08 <MoveArmUpOrDown+0x180>)
 8001cda:	f000 fbab 	bl	8002434 <Servo_GetPosition>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]
    int currentPos3 = Servo_GetPosition(&servo3);  // Current position of servo 3
 8001ce2:	484a      	ldr	r0, [pc, #296]	; (8001e0c <MoveArmUpOrDown+0x184>)
 8001ce4:	f000 fba6 	bl	8002434 <Servo_GetPosition>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60bb      	str	r3, [r7, #8]

    // Calculate target positions for each servo
    int targetPos2 = currentPos2 + servo2Movement;  // Target position for servo 2 (base joint)
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
    int targetPos3 = currentPos3 + servo3Movement;  // Target position for servo 3 (elbow joint)
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30

    // Ensure target positions are within the valid range (0 to 180 degrees for typical servos)
    if (targetPos2 < 0) targetPos2 = 0;
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da01      	bge.n	8001d06 <MoveArmUpOrDown+0x7e>
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
    if (targetPos2 > 180) targetPos2 = 180;
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	2bb4      	cmp	r3, #180	; 0xb4
 8001d0a:	dd01      	ble.n	8001d10 <MoveArmUpOrDown+0x88>
 8001d0c:	23b4      	movs	r3, #180	; 0xb4
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
    if (targetPos3 < 0) targetPos3 = 0;
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da01      	bge.n	8001d1a <MoveArmUpOrDown+0x92>
 8001d16:	2300      	movs	r3, #0
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    if (targetPos3 > 180) targetPos3 = 180;
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	2bb4      	cmp	r3, #180	; 0xb4
 8001d1e:	dd01      	ble.n	8001d24 <MoveArmUpOrDown+0x9c>
 8001d20:	23b4      	movs	r3, #180	; 0xb4
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30

    // Move servo 2 (base joint)
    if (targetPos2 > currentPos2) {
 8001d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dd19      	ble.n	8001d60 <MoveArmUpOrDown+0xd8>
        // Move servo 2 up
        for (int pos = currentPos2; pos <= targetPos2; pos += stepSize)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d30:	e011      	b.n	8001d56 <MoveArmUpOrDown+0xce>
        {
        	Servo_SetPosition(&servo2, pos);  // Set servo 2 to the new position
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	4831      	ldr	r0, [pc, #196]	; (8001e08 <MoveArmUpOrDown+0x180>)
 8001d42:	f000 faf7 	bl	8002334 <Servo_SetPosition>
            osDelay(delayTime);  // Small delay for smooth movement
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00d fe21 	bl	800f990 <osDelay>
        for (int pos = currentPos2; pos <= targetPos2; pos += stepSize)
 8001d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dde9      	ble.n	8001d32 <MoveArmUpOrDown+0xaa>
 8001d5e:	e018      	b.n	8001d92 <MoveArmUpOrDown+0x10a>
        }
    } else {
        // Move servo 2 down
        for (int pos = currentPos2; pos >= targetPos2; pos -= stepSize)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d64:	e011      	b.n	8001d8a <MoveArmUpOrDown+0x102>
        {
        	Servo_SetPosition(&servo2, pos);  // Set servo 2 to the new position
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	4824      	ldr	r0, [pc, #144]	; (8001e08 <MoveArmUpOrDown+0x180>)
 8001d76:	f000 fadd 	bl	8002334 <Servo_SetPosition>
            osDelay(delayTime);  // Small delay for smooth movement
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00d fe07 	bl	800f990 <osDelay>
        for (int pos = currentPos2; pos >= targetPos2; pos -= stepSize)
 8001d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dae9      	bge.n	8001d66 <MoveArmUpOrDown+0xde>
        }
    }

    // Move servo 3 (elbow joint)
    if (targetPos3 > currentPos3) {
 8001d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dd19      	ble.n	8001dce <MoveArmUpOrDown+0x146>
        // Move servo 3 up
        for (int pos = currentPos3; pos <= targetPos3; pos += stepSize)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e011      	b.n	8001dc4 <MoveArmUpOrDown+0x13c>
        {
        	Servo_SetPosition(&servo3, pos);  // Set servo 3 to the new position
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dae:	4817      	ldr	r0, [pc, #92]	; (8001e0c <MoveArmUpOrDown+0x184>)
 8001db0:	f000 fac0 	bl	8002334 <Servo_SetPosition>
            osDelay(delayTime);  // Small delay for smooth movement
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00d fdea 	bl	800f990 <osDelay>
        for (int pos = currentPos3; pos <= targetPos3; pos += stepSize)
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dde9      	ble.n	8001da0 <MoveArmUpOrDown+0x118>
        {
        	Servo_SetPosition(&servo3, pos);  // Set servo 3 to the new position
            osDelay(delayTime);  // Small delay for smooth movement
        }
    }
}
 8001dcc:	e018      	b.n	8001e00 <MoveArmUpOrDown+0x178>
        for (int pos = currentPos3; pos >= targetPos3; pos -= stepSize)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e011      	b.n	8001df8 <MoveArmUpOrDown+0x170>
        	Servo_SetPosition(&servo3, pos);  // Set servo 3 to the new position
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	480a      	ldr	r0, [pc, #40]	; (8001e0c <MoveArmUpOrDown+0x184>)
 8001de4:	f000 faa6 	bl	8002334 <Servo_SetPosition>
            osDelay(delayTime);  // Small delay for smooth movement
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00d fdd0 	bl	800f990 <osDelay>
        for (int pos = currentPos3; pos >= targetPos3; pos -= stepSize)
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	623b      	str	r3, [r7, #32]
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dae9      	bge.n	8001dd4 <MoveArmUpOrDown+0x14c>
}
 8001e00:	bf00      	nop
 8001e02:	3738      	adds	r7, #56	; 0x38
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000059c 	.word	0x2000059c
 8001e0c:	200005ac 	.word	0x200005ac
 8001e10:	33333333 	.word	0x33333333
 8001e14:	3fe33333 	.word	0x3fe33333
 8001e18:	9999999a 	.word	0x9999999a
 8001e1c:	3fd99999 	.word	0x3fd99999

08001e20 <MoveArmLeftOrRight>:
void MoveArmLeftOrRight(int degrees){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	 int currentPos1 = Servo_GetPosition(&servo1);
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <MoveArmLeftOrRight+0x38>)
 8001e2a:	f000 fb03 	bl	8002434 <Servo_GetPosition>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	60fb      	str	r3, [r7, #12]
	 int targetPos1 = currentPos1 + degrees;
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	60bb      	str	r3, [r7, #8]
	 Servo_SetPosition(&servo1, targetPos1);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MoveArmLeftOrRight+0x38>)
 8001e4a:	f000 fa73 	bl	8002334 <Servo_SetPosition>
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000058c 	.word	0x2000058c

08001e5c <Wave>:
void Wave(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	Servo_SetPosition(&servo4, 90);
 8001e60:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001eb8 <Wave+0x5c>
 8001e64:	4815      	ldr	r0, [pc, #84]	; (8001ebc <Wave+0x60>)
 8001e66:	f000 fa65 	bl	8002334 <Servo_SetPosition>
	HAL_Delay(500);
 8001e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e6e:	f002 fc19 	bl	80046a4 <HAL_Delay>
	Servo_SetPosition(&servo4, 45);
 8001e72:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001ec0 <Wave+0x64>
 8001e76:	4811      	ldr	r0, [pc, #68]	; (8001ebc <Wave+0x60>)
 8001e78:	f000 fa5c 	bl	8002334 <Servo_SetPosition>
	HAL_Delay(500);
 8001e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e80:	f002 fc10 	bl	80046a4 <HAL_Delay>
	Servo_SetPosition(&servo4, 135);
 8001e84:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001ec4 <Wave+0x68>
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <Wave+0x60>)
 8001e8a:	f000 fa53 	bl	8002334 <Servo_SetPosition>
	HAL_Delay(500);
 8001e8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e92:	f002 fc07 	bl	80046a4 <HAL_Delay>
	Servo_SetPosition(&servo4, 45);
 8001e96:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001ec0 <Wave+0x64>
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <Wave+0x60>)
 8001e9c:	f000 fa4a 	bl	8002334 <Servo_SetPosition>
	HAL_Delay(500);
 8001ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ea4:	f002 fbfe 	bl	80046a4 <HAL_Delay>
	Servo_SetPosition(&servo4, 90);
 8001ea8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001eb8 <Wave+0x5c>
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <Wave+0x60>)
 8001eae:	f000 fa41 	bl	8002334 <Servo_SetPosition>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	42b40000 	.word	0x42b40000
 8001ebc:	200005bc 	.word	0x200005bc
 8001ec0:	42340000 	.word	0x42340000
 8001ec4:	43070000 	.word	0x43070000

08001ec8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) { // Check if the interrupt is for the correct UART
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_UART_RxCpltCallback+0x34>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_UART_RxCpltCallback+0x2c>

        // Display the received command for debugging

        // Process the command (release semaphore to process in task)
        flag = 1;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_UART_RxCpltCallback+0x38>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
        osSemaphoreRelease(commandParsedSemaphoreHandle);
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_UART_RxCpltCallback+0x3c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00d fe49 	bl	800fb7c <osSemaphoreRelease>
        // Re-arm the UART to listen for the next command
        HAL_UART_Receive_IT(&huart6, (uint8_t *)receivedCommand, 14); // Assuming max command length is 32 bytes
 8001eea:	220e      	movs	r2, #14
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <HAL_UART_RxCpltCallback+0x40>)
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <HAL_UART_RxCpltCallback+0x44>)
 8001ef0:	f008 ffd9 	bl	800aea6 <HAL_UART_Receive_IT>
    }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40011400 	.word	0x40011400
 8001f00:	200005dc 	.word	0x200005dc
 8001f04:	2000057c 	.word	0x2000057c
 8001f08:	200005cc 	.word	0x200005cc
 8001f0c:	2000047c 	.word	0x2000047c

08001f10 <moveServo>:
void moveServo(struct ServoCommand servoControl){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (strncmp(servoControl.direction,"UP", 2) == 0)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2202      	movs	r2, #2
 8001f20:	492a      	ldr	r1, [pc, #168]	; (8001fcc <moveServo+0xbc>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f011 fcd6 	bl	80138d4 <strncmp>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <moveServo+0x2a>
	{
		MoveArmUpOrDown(0-servoControl.degrees);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	425b      	negs	r3, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fea8 	bl	8001c88 <MoveArmUpOrDown>
		MoveArmUpOrDown(0-servoControl.degrees);
	}
	else if(strncmp(servoControl.direction,"WAVE", 4) == 0){
		Wave();
	}
}
 8001f38:	e044      	b.n	8001fc4 <moveServo+0xb4>
	else if (strncmp(servoControl.direction,"DOWN", 4) == 0)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4924      	ldr	r1, [pc, #144]	; (8001fd0 <moveServo+0xc0>)
 8001f40:	4618      	mov	r0, r3
 8001f42:	f011 fcc7 	bl	80138d4 <strncmp>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <moveServo+0x46>
		MoveArmUpOrDown(servoControl.degrees);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe9a 	bl	8001c88 <MoveArmUpOrDown>
}
 8001f54:	e036      	b.n	8001fc4 <moveServo+0xb4>
	else if(strncmp(servoControl.direction,"LEFT", 4) == 0){
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2204      	movs	r2, #4
 8001f5a:	491e      	ldr	r1, [pc, #120]	; (8001fd4 <moveServo+0xc4>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f011 fcb9 	bl	80138d4 <strncmp>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d104      	bne.n	8001f72 <moveServo+0x62>
		MoveArmLeftOrRight(servoControl.degrees);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff58 	bl	8001e20 <MoveArmLeftOrRight>
}
 8001f70:	e028      	b.n	8001fc4 <moveServo+0xb4>
	else if(strncmp(servoControl.direction,"RIGHT", 4) == 0){
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2204      	movs	r2, #4
 8001f76:	4918      	ldr	r1, [pc, #96]	; (8001fd8 <moveServo+0xc8>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f011 fcab 	bl	80138d4 <strncmp>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <moveServo+0x80>
		MoveArmLeftOrRight(0-servoControl.degrees);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	425b      	negs	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff49 	bl	8001e20 <MoveArmLeftOrRight>
}
 8001f8e:	e019      	b.n	8001fc4 <moveServo+0xb4>
	else if(strncmp(servoControl.direction,"GRAB", 4) == 0){
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2204      	movs	r2, #4
 8001f94:	4911      	ldr	r1, [pc, #68]	; (8001fdc <moveServo+0xcc>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f011 fc9c 	bl	80138d4 <strncmp>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <moveServo+0x9e>
		MoveArmUpOrDown(0-servoControl.degrees);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe6e 	bl	8001c88 <MoveArmUpOrDown>
}
 8001fac:	e00a      	b.n	8001fc4 <moveServo+0xb4>
	else if(strncmp(servoControl.direction,"WAVE", 4) == 0){
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	490b      	ldr	r1, [pc, #44]	; (8001fe0 <moveServo+0xd0>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f011 fc8d 	bl	80138d4 <strncmp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <moveServo+0xb4>
		Wave();
 8001fc0:	f7ff ff4c 	bl	8001e5c <Wave>
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	08014230 	.word	0x08014230
 8001fd0:	08014234 	.word	0x08014234
 8001fd4:	0801423c 	.word	0x0801423c
 8001fd8:	08014244 	.word	0x08014244
 8001fdc:	0801424c 	.word	0x0801424c
 8001fe0:	08014254 	.word	0x08014254

08001fe4 <StartListening>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartListening */
void StartListening(void *argument)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001fec:	f010 ffde 	bl	8012fac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  // Initialize the LCD to show that we are listening
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001ff0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ff4:	f002 f8d2 	bl	800419c <BSP_LCD_Clear>
  BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"Listening", CENTER_MODE);
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <StartListening+0x3c>)
 8001ffc:	2114      	movs	r1, #20
 8001ffe:	2000      	movs	r0, #0
 8002000:	f002 f92c 	bl	800425c <BSP_LCD_DisplayStringAt>
  // Wait for data to be received

  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedCommand, 14);
 8002004:	220e      	movs	r2, #14
 8002006:	4907      	ldr	r1, [pc, #28]	; (8002024 <StartListening+0x40>)
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <StartListening+0x44>)
 800200a:	f008 ff4c 	bl	800aea6 <HAL_UART_Receive_IT>
  for (;;) {
	  osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever);
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <StartListening+0x48>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f04f 31ff 	mov.w	r1, #4294967295
 8002016:	4618      	mov	r0, r3
 8002018:	f00d fd5e 	bl	800fad8 <osSemaphoreAcquire>
 800201c:	e7f7      	b.n	800200e <StartListening+0x2a>
 800201e:	bf00      	nop
 8002020:	0801416c 	.word	0x0801416c
 8002024:	200005cc 	.word	0x200005cc
 8002028:	2000047c 	.word	0x2000047c
 800202c:	20000580 	.word	0x20000580

08002030 <StartCommandParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandParse */
void StartCommandParse(void *argument)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandParse */
  struct ServoCommand servoCommand;
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(commandParsedSemaphoreHandle, osWaitForever);
 8002038:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <StartCommandParse+0x108>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	4618      	mov	r0, r3
 8002042:	f00d fd49 	bl	800fad8 <osSemaphoreAcquire>

	if (flag == 1)  // Read the command from the queue
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <StartCommandParse+0x10c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d16e      	bne.n	800212c <StartCommandParse+0xfc>
	{
		flag =0;
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <StartCommandParse+0x10c>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
		if(strncmp(receivedCommand,"MOVE", 4)== 0){
 8002054:	2204      	movs	r2, #4
 8002056:	493a      	ldr	r1, [pc, #232]	; (8002140 <StartCommandParse+0x110>)
 8002058:	483a      	ldr	r0, [pc, #232]	; (8002144 <StartCommandParse+0x114>)
 800205a:	f011 fc3b 	bl	80138d4 <strncmp>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d136      	bne.n	80020d2 <StartCommandParse+0xa2>
			char degreesStr[3]; // 5 chars + 1 for null terminator
			for (int i = 0; i < 3; i++) {
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
 8002068:	e00c      	b.n	8002084 <StartCommandParse+0x54>
				degreesStr[i] = receivedCommand[11 + i];
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	330b      	adds	r3, #11
 800206e:	4a35      	ldr	r2, [pc, #212]	; (8002144 <StartCommandParse+0x114>)
 8002070:	5cd1      	ldrb	r1, [r2, r3]
 8002072:	f107 020c 	add.w	r2, r7, #12
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	4413      	add	r3, r2
 800207a:	460a      	mov	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 3; i++) {
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	2b02      	cmp	r3, #2
 8002088:	ddef      	ble.n	800206a <StartCommandParse+0x3a>
			}
			int degrees = atoi(degreesStr);
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4618      	mov	r0, r3
 8002090:	f011 fa98 	bl	80135c4 <atoi>
 8002094:	61f8      	str	r0, [r7, #28]

			// Assign to servoCommand
			servoCommand.degrees = degrees;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	61bb      	str	r3, [r7, #24]
			for (int i = 0; i < 5; i++) {
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	e014      	b.n	80020ca <StartCommandParse+0x9a>
				if(receivedCommand[5 + i] == " "){
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	3305      	adds	r3, #5
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <StartCommandParse+0x114>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <StartCommandParse+0x118>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d032      	beq.n	8002116 <StartCommandParse+0xe6>
					break;
				}
				else{
					servoCommand.direction[i] = receivedCommand[5 + i];
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	3305      	adds	r3, #5
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <StartCommandParse+0x114>)
 80020b6:	5cd1      	ldrb	r1, [r2, r3]
 80020b8:	f107 0210 	add.w	r2, r7, #16
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	4413      	add	r3, r2
 80020c0:	460a      	mov	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 5; i++) {
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	3301      	adds	r3, #1
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	dde7      	ble.n	80020a0 <StartCommandParse+0x70>
 80020d0:	e022      	b.n	8002118 <StartCommandParse+0xe8>
				}

			}
		}
		else if(strncmp(receivedCommand,"GRAB",4)==0){
 80020d2:	2204      	movs	r2, #4
 80020d4:	491d      	ldr	r1, [pc, #116]	; (800214c <StartCommandParse+0x11c>)
 80020d6:	481b      	ldr	r0, [pc, #108]	; (8002144 <StartCommandParse+0x114>)
 80020d8:	f011 fbfc 	bl	80138d4 <strncmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <StartCommandParse+0xc4>
			strcpy(servoCommand.direction, down);  // Set direction as "DOWN"
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	491a      	ldr	r1, [pc, #104]	; (8002150 <StartCommandParse+0x120>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f011 fc97 	bl	8013a1c <strcpy>
			servoCommand.degrees = 120;
 80020ee:	2378      	movs	r3, #120	; 0x78
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e011      	b.n	8002118 <StartCommandParse+0xe8>
		}
		else if(strncmp(receivedCommand,"WAVE",4)==0){
 80020f4:	2204      	movs	r2, #4
 80020f6:	4917      	ldr	r1, [pc, #92]	; (8002154 <StartCommandParse+0x124>)
 80020f8:	4812      	ldr	r0, [pc, #72]	; (8002144 <StartCommandParse+0x114>)
 80020fa:	f011 fbeb 	bl	80138d4 <strncmp>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d117      	bne.n	8002134 <StartCommandParse+0x104>
			strcpy(servoCommand.direction, wave);  // Set direction as "DOWN"
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4913      	ldr	r1, [pc, #76]	; (8002158 <StartCommandParse+0x128>)
 800210a:	4618      	mov	r0, r3
 800210c:	f011 fc86 	bl	8013a1c <strcpy>
			servoCommand.degrees = 90;
 8002110:	235a      	movs	r3, #90	; 0x5a
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e000      	b.n	8002118 <StartCommandParse+0xe8>
					break;
 8002116:	bf00      	nop
		  // Handle other cases if needed
		  continue; // Skip sending unrecognized commands
	  }

	  // Send the parsed command to the ServoControl task
	 moveServo(servoCommand);
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002120:	f7ff fef6 	bl	8001f10 <moveServo>
	 HAL_Delay(2000);
 8002124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002128:	f002 fabc 	bl	80046a4 <HAL_Delay>

	}
    osDelay(1);
 800212c:	2001      	movs	r0, #1
 800212e:	f00d fc2f 	bl	800f990 <osDelay>
 8002132:	e781      	b.n	8002038 <StartCommandParse+0x8>
		  continue; // Skip sending unrecognized commands
 8002134:	bf00      	nop
	osSemaphoreAcquire(commandParsedSemaphoreHandle, osWaitForever);
 8002136:	e77f      	b.n	8002038 <StartCommandParse+0x8>
 8002138:	2000057c 	.word	0x2000057c
 800213c:	200005dc 	.word	0x200005dc
 8002140:	0801425c 	.word	0x0801425c
 8002144:	200005cc 	.word	0x200005cc
 8002148:	08014264 	.word	0x08014264
 800214c:	0801424c 	.word	0x0801424c
 8002150:	20000000 	.word	0x20000000
 8002154:	08014254 	.word	0x08014254
 8002158:	20000008 	.word	0x20000008

0800215c <StartServoControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoControl */
void StartServoControl(void *argument) //This is actually a logging task for some reason
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0a4      	sub	sp, #144	; 0x90
 8002160:	af04      	add	r7, sp, #16
 8002162:	6078      	str	r0, [r7, #4]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Get the current positions of the servos
	    servo1Position = Servo_GetPosition(&servo1);
 8002164:	4819      	ldr	r0, [pc, #100]	; (80021cc <StartServoControl+0x70>)
 8002166:	f000 f965 	bl	8002434 <Servo_GetPosition>
 800216a:	4603      	mov	r3, r0
 800216c:	67fb      	str	r3, [r7, #124]	; 0x7c
	    servo2Position = Servo_GetPosition(&servo2);
 800216e:	4818      	ldr	r0, [pc, #96]	; (80021d0 <StartServoControl+0x74>)
 8002170:	f000 f960 	bl	8002434 <Servo_GetPosition>
 8002174:	4603      	mov	r3, r0
 8002176:	67bb      	str	r3, [r7, #120]	; 0x78
	    servo3Position = Servo_GetPosition(&servo3);
 8002178:	4816      	ldr	r0, [pc, #88]	; (80021d4 <StartServoControl+0x78>)
 800217a:	f000 f95b 	bl	8002434 <Servo_GetPosition>
 800217e:	4603      	mov	r3, r0
 8002180:	677b      	str	r3, [r7, #116]	; 0x74
	    servo4Position = Servo_GetPosition(&servo4);
 8002182:	4815      	ldr	r0, [pc, #84]	; (80021d8 <StartServoControl+0x7c>)
 8002184:	f000 f956 	bl	8002434 <Servo_GetPosition>
 8002188:	4603      	mov	r3, r0
 800218a:	673b      	str	r3, [r7, #112]	; 0x70

	    // Format the log message
	    snprintf(logMessage, sizeof(logMessage), "S1: %d, S2: %d, S3: %d, S4: %d\n",
 800218c:	f107 000c 	add.w	r0, r7, #12
 8002190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <StartServoControl+0x80>)
 80021a0:	2164      	movs	r1, #100	; 0x64
 80021a2:	f011 fb5b 	bl	801385c <sniprintf>
	             servo1Position, servo2Position, servo3Position, servo4Position);

	    // Output the log message (e.g., via UART, to a file, or an LCD display)
	    // Example for UART:
	    HAL_UART_Transmit(&huart6, (uint8_t *)logMessage, strlen(logMessage), 100);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f838 	bl	8000220 <strlen>
 80021b0:	4603      	mov	r3, r0
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f107 010c 	add.w	r1, r7, #12
 80021b8:	2364      	movs	r3, #100	; 0x64
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <StartServoControl+0x84>)
 80021bc:	f008 fde8 	bl	800ad90 <HAL_UART_Transmit>

	    // Delay before the next log (e.g., 1 second)
	    osDelay(1000);
 80021c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c4:	f00d fbe4 	bl	800f990 <osDelay>
	    servo1Position = Servo_GetPosition(&servo1);
 80021c8:	e7cc      	b.n	8002164 <StartServoControl+0x8>
 80021ca:	bf00      	nop
 80021cc:	2000058c 	.word	0x2000058c
 80021d0:	2000059c 	.word	0x2000059c
 80021d4:	200005ac 	.word	0x200005ac
 80021d8:	200005bc 	.word	0x200005bc
 80021dc:	08014268 	.word	0x08014268
 80021e0:	2000047c 	.word	0x2000047c

080021e4 <StartMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMonitoring */
void StartMonitoring(void *argument)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b096      	sub	sp, #88	; 0x58
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  char displayStr[60];

	  int servo2Position = Servo_GetPosition(&servo2);
 80021ec:	482a      	ldr	r0, [pc, #168]	; (8002298 <StartMonitoring+0xb4>)
 80021ee:	f000 f921 	bl	8002434 <Servo_GetPosition>
 80021f2:	4603      	mov	r3, r0
 80021f4:	657b      	str	r3, [r7, #84]	; 0x54
	  int servo3Position = Servo_GetPosition(&servo3);
 80021f6:	4829      	ldr	r0, [pc, #164]	; (800229c <StartMonitoring+0xb8>)
 80021f8:	f000 f91c 	bl	8002434 <Servo_GetPosition>
 80021fc:	4603      	mov	r3, r0
 80021fe:	653b      	str	r3, [r7, #80]	; 0x50
	  int servo4Position = Servo_GetPosition(&servo4);
 8002200:	4827      	ldr	r0, [pc, #156]	; (80022a0 <StartMonitoring+0xbc>)
 8002202:	f000 f917 	bl	8002434 <Servo_GetPosition>
 8002206:	4603      	mov	r3, r0
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int servo1Position = Servo_GetPosition(&servo1);
 800220a:	4826      	ldr	r0, [pc, #152]	; (80022a4 <StartMonitoring+0xc0>)
 800220c:	f000 f912 	bl	8002434 <Servo_GetPosition>
 8002210:	4603      	mov	r3, r0
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
	  // Replace with actual function
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002214:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002218:	f001 ffc0 	bl	800419c <BSP_LCD_Clear>
	  // Format the position into a string
	  snprintf(displayStr, sizeof(displayStr), "S1: %d", servo1Position);
 800221c:	f107 000c 	add.w	r0, r7, #12
 8002220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002222:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <StartMonitoring+0xc4>)
 8002224:	213c      	movs	r1, #60	; 0x3c
 8002226:	f011 fb19 	bl	801385c <sniprintf>
		BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)displayStr, CENTER_MODE);
 800222a:	f107 020c 	add.w	r2, r7, #12
 800222e:	2301      	movs	r3, #1
 8002230:	213c      	movs	r1, #60	; 0x3c
 8002232:	2000      	movs	r0, #0
 8002234:	f002 f812 	bl	800425c <BSP_LCD_DisplayStringAt>

		snprintf(displayStr, sizeof(displayStr), "S2: %d", servo2Position);
 8002238:	f107 000c 	add.w	r0, r7, #12
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <StartMonitoring+0xc8>)
 8002240:	213c      	movs	r1, #60	; 0x3c
 8002242:	f011 fb0b 	bl	801385c <sniprintf>
		BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)displayStr, CENTER_MODE);
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	2301      	movs	r3, #1
 800224c:	2150      	movs	r1, #80	; 0x50
 800224e:	2000      	movs	r0, #0
 8002250:	f002 f804 	bl	800425c <BSP_LCD_DisplayStringAt>

		snprintf(displayStr, sizeof(displayStr), "S3: %d", servo3Position);
 8002254:	f107 000c 	add.w	r0, r7, #12
 8002258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <StartMonitoring+0xcc>)
 800225c:	213c      	movs	r1, #60	; 0x3c
 800225e:	f011 fafd 	bl	801385c <sniprintf>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)displayStr, CENTER_MODE);
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	2301      	movs	r3, #1
 8002268:	2164      	movs	r1, #100	; 0x64
 800226a:	2000      	movs	r0, #0
 800226c:	f001 fff6 	bl	800425c <BSP_LCD_DisplayStringAt>

		snprintf(displayStr, sizeof(displayStr), "S4: %d", servo4Position);
 8002270:	f107 000c 	add.w	r0, r7, #12
 8002274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <StartMonitoring+0xd0>)
 8002278:	213c      	movs	r1, #60	; 0x3c
 800227a:	f011 faef 	bl	801385c <sniprintf>
		BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)displayStr, CENTER_MODE);
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	2301      	movs	r3, #1
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	2000      	movs	r0, #0
 8002288:	f001 ffe8 	bl	800425c <BSP_LCD_DisplayStringAt>


	  // Delay for a while before updating again (e.g., 1 second)
	  osDelay(1000);  // Adjust delay for desired update frequency
 800228c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002290:	f00d fb7e 	bl	800f990 <osDelay>
  {
 8002294:	e7aa      	b.n	80021ec <StartMonitoring+0x8>
 8002296:	bf00      	nop
 8002298:	2000059c 	.word	0x2000059c
 800229c:	200005ac 	.word	0x200005ac
 80022a0:	200005bc 	.word	0x200005bc
 80022a4:	2000058c 	.word	0x2000058c
 80022a8:	08014288 	.word	0x08014288
 80022ac:	08014290 	.word	0x08014290
 80022b0:	08014298 	.word	0x08014298
 80022b4:	080142a0 	.word	0x080142a0

080022b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ca:	f002 f9cb 	bl	8004664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40001000 	.word	0x40001000

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>
	...

080022e8 <Servo_Init>:
#include "servo.h"


// Initialize the servo by specifying the timer and PWM channel
void Servo_Init(ServoDriver* servo, TIM_HandleTypeDef* htim, uint32_t channel) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
    servo->htim = htim;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	605a      	str	r2, [r3, #4]
    servo->pulseWidth = MIN_PULSE_WIDTH;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002306:	811a      	strh	r2, [r3, #8]
    servo->current_position = 0;  // Initialize position to 0 degrees
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]

    // Start the PWM signal for the given timer and channel
    HAL_TIM_PWM_Start(servo->htim, servo->channel);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f007 fdd3 	bl	8009ec4 <HAL_TIM_PWM_Start>
    Servo_SetPosition(servo, 90);
 800231e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002330 <Servo_Init+0x48>
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f806 	bl	8002334 <Servo_SetPosition>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	42b40000 	.word	0x42b40000

08002334 <Servo_SetPosition>:

// Set the position of the servo (0° to 180°)
void Servo_SetPosition(ServoDriver* servo, float angle) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	ed87 0a00 	vstr	s0, [r7]
    if (angle < 0) angle = 0;
 8002340:	edd7 7a00 	vldr	s15, [r7]
 8002344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d502      	bpl.n	8002354 <Servo_SetPosition+0x20>
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	603b      	str	r3, [r7, #0]
    if (angle > 180) angle = 180;
 8002354:	edd7 7a00 	vldr	s15, [r7]
 8002358:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002424 <Servo_SetPosition+0xf0>
 800235c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	dd01      	ble.n	800236a <Servo_SetPosition+0x36>
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <Servo_SetPosition+0xf4>)
 8002368:	603b      	str	r3, [r7, #0]

    servo->pulseWidth = 1000 + (angle / 180.0) * (1000);
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f7fe f914 	bl	8000598 <__aeabi_f2d>
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <Servo_SetPosition+0xf8>)
 8002376:	f7fe fa91 	bl	800089c <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <Servo_SetPosition+0xfc>)
 8002388:	f7fe f95e 	bl	8000648 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <Servo_SetPosition+0xfc>)
 800239a:	f7fd ff9f 	bl	80002dc <__adddf3>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fb89 	bl	8000abc <__aeabi_d2uiz>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	811a      	strh	r2, [r3, #8]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, servo->pulseWidth);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <Servo_SetPosition+0x94>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	891a      	ldrh	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
 80023c6:	e01e      	b.n	8002406 <Servo_SetPosition+0xd2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <Servo_SetPosition+0xac>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8919      	ldrh	r1, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	460b      	mov	r3, r1
 80023dc:	6393      	str	r3, [r2, #56]	; 0x38
 80023de:	e012      	b.n	8002406 <Servo_SetPosition+0xd2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d107      	bne.n	80023f8 <Servo_SetPosition+0xc4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8919      	ldrh	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	460b      	mov	r3, r1
 80023f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80023f6:	e006      	b.n	8002406 <Servo_SetPosition+0xd2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8919      	ldrh	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	460b      	mov	r3, r1
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_Delay(100);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f002 f94c 	bl	80046a4 <HAL_Delay>
    servo->current_position = angle;
 800240c:	edd7 7a00 	vldr	s15, [r7]
 8002410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002414:	ee17 2a90 	vmov	r2, s15
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	43340000 	.word	0x43340000
 8002428:	43340000 	.word	0x43340000
 800242c:	40668000 	.word	0x40668000
 8002430:	408f4000 	.word	0x408f4000

08002434 <Servo_GetPosition>:

uint32_t Servo_GetPosition(ServoDriver *servo) {
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    return servo->current_position;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_MspInit+0x54>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_MspInit+0x54>)
 800245c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002460:	6453      	str	r3, [r2, #68]	; 0x44
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_MspInit+0x54>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_MspInit+0x54>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_MspInit+0x54>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_MspInit+0x54>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	210f      	movs	r1, #15
 800248e:	f06f 0001 	mvn.w	r0, #1
 8002492:	f002 fc55 	bl	8004d40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800

080024a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_ADC_MspInit+0xe4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d15b      	bne.n	800257e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_ADC_MspInit+0xe8>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a2f      	ldr	r2, [pc, #188]	; (800258c <HAL_ADC_MspInit+0xe8>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_ADC_MspInit+0xe8>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_ADC_MspInit+0xe8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_ADC_MspInit+0xe8>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_ADC_MspInit+0xe8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_ADC_MspInit+0xe8>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_ADC_MspInit+0xe8>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_ADC_MspInit+0xe8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_ADC_MspInit+0xe8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_ADC_MspInit+0xe8>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_ADC_MspInit+0xe8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8002536:	2311      	movs	r3, #17
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	4811      	ldr	r0, [pc, #68]	; (8002590 <HAL_ADC_MspInit+0xec>)
 800254a:	f003 f907 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800254e:	2326      	movs	r3, #38	; 0x26
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002552:	2303      	movs	r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <HAL_ADC_MspInit+0xf0>)
 8002562:	f003 f8fb 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8002566:	2302      	movs	r3, #2
 8002568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256a:	2303      	movs	r3, #3
 800256c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4619      	mov	r1, r3
 8002578:	4807      	ldr	r0, [pc, #28]	; (8002598 <HAL_ADC_MspInit+0xf4>)
 800257a:	f003 f8ef 	bl	800575c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40012000 	.word	0x40012000
 800258c:	40023800 	.word	0x40023800
 8002590:	40020800 	.word	0x40020800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400

0800259c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_DAC_MspInit+0x8c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12f      	bne.n	800261e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_DAC_MspInit+0x90>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_DAC_MspInit+0x90>)
 80025c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_DAC_MspInit+0x90>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_DAC_MspInit+0x90>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_DAC_MspInit+0x90>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_DAC_MspInit+0x90>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80025f6:	2310      	movs	r3, #16
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025fa:	2303      	movs	r3, #3
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	4809      	ldr	r0, [pc, #36]	; (8002630 <HAL_DAC_MspInit+0x94>)
 800260a:	f003 f8a7 	bl	800575c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	210f      	movs	r1, #15
 8002612:	2036      	movs	r0, #54	; 0x36
 8002614:	f002 fb94 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002618:	2036      	movs	r0, #54	; 0x36
 800261a:	f002 fbad 	bl	8004d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40007400 	.word	0x40007400
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0a0      	sub	sp, #128	; 0x80
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2258      	movs	r2, #88	; 0x58
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f011 f935 	bl	80138c4 <memset>
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3c      	ldr	r2, [pc, #240]	; (8002750 <HAL_DFSDM_FilterMspInit+0x11c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_DFSDM_FilterMspInit+0x3a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <HAL_DFSDM_FilterMspInit+0x120>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d16b      	bne.n	8002746 <HAL_DFSDM_FilterMspInit+0x112>
 800266e:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_DFSDM_FilterMspInit+0x124>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d167      	bne.n	8002746 <HAL_DFSDM_FilterMspInit+0x112>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800267c:	2300      	movs	r3, #0
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	4618      	mov	r0, r3
 8002686:	f006 fc47 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_DFSDM_FilterMspInit+0x60>
    {
      Error_Handler();
 8002690:	f7ff fe24 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_DFSDM_FilterMspInit+0x128>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	4a30      	ldr	r2, [pc, #192]	; (800275c <HAL_DFSDM_FilterMspInit+0x128>)
 800269c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800269e:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_DFSDM_FilterMspInit+0x128>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d10d      	bne.n	80026c2 <HAL_DFSDM_FilterMspInit+0x8e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a25      	ldr	r2, [pc, #148]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_DFSDM_FilterMspInit+0x12c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800270c:	2306      	movs	r3, #6
 800270e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002714:	4619      	mov	r1, r3
 8002716:	4813      	ldr	r0, [pc, #76]	; (8002764 <HAL_DFSDM_FilterMspInit+0x130>)
 8002718:	f003 f820 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800272c:	2306      	movs	r3, #6
 800272e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002734:	4619      	mov	r1, r3
 8002736:	480c      	ldr	r0, [pc, #48]	; (8002768 <HAL_DFSDM_FilterMspInit+0x134>)
 8002738:	f003 f810 	bl	800575c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_DFSDM_FilterMspInit+0x124>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_DFSDM_FilterMspInit+0x124>)
 8002744:	6013      	str	r3, [r2, #0]
  }

}
 8002746:	bf00      	nop
 8002748:	3780      	adds	r7, #128	; 0x80
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40016100 	.word	0x40016100
 8002754:	40016180 	.word	0x40016180
 8002758:	200005e4 	.word	0x200005e4
 800275c:	200005e0 	.word	0x200005e0
 8002760:	40023800 	.word	0x40023800
 8002764:	40020000 	.word	0x40020000
 8002768:	40020c00 	.word	0x40020c00

0800276c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0a4      	sub	sp, #144	; 0x90
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	2258      	movs	r2, #88	; 0x58
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f011 f899 	bl	80138c4 <memset>
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a98      	ldr	r2, [pc, #608]	; (80029f8 <HAL_DFSDM_ChannelMspInit+0x28c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_DFSDM_ChannelMspInit+0x4e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a96      	ldr	r2, [pc, #600]	; (80029fc <HAL_DFSDM_ChannelMspInit+0x290>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_DFSDM_ChannelMspInit+0x4e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a95      	ldr	r2, [pc, #596]	; (8002a00 <HAL_DFSDM_ChannelMspInit+0x294>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_DFSDM_ChannelMspInit+0x4e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a93      	ldr	r2, [pc, #588]	; (8002a04 <HAL_DFSDM_ChannelMspInit+0x298>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d174      	bne.n	80028a4 <HAL_DFSDM_ChannelMspInit+0x138>
 80027ba:	4b93      	ldr	r3, [pc, #588]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0x29c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d170      	bne.n	80028a4 <HAL_DFSDM_ChannelMspInit+0x138>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80027c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80027c8:	2300      	movs	r3, #0
 80027ca:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f006 fba1 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_DFSDM_ChannelMspInit+0x74>
    {
      Error_Handler();
 80027dc:	f7ff fd7e 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <HAL_DFSDM_ChannelMspInit+0x2a0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a89      	ldr	r2, [pc, #548]	; (8002a0c <HAL_DFSDM_ChannelMspInit+0x2a0>)
 80027e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_DFSDM_ChannelMspInit+0x2a0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10d      	bne.n	800280e <HAL_DFSDM_ChannelMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a85      	ldr	r2, [pc, #532]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 80027fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b83      	ldr	r3, [pc, #524]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	4b78      	ldr	r3, [pc, #480]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a77      	ldr	r2, [pc, #476]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800285e:	2306      	movs	r3, #6
 8002860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002864:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002868:	4619      	mov	r1, r3
 800286a:	486a      	ldr	r0, [pc, #424]	; (8002a14 <HAL_DFSDM_ChannelMspInit+0x2a8>)
 800286c:	f002 ff76 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8002870:	2340      	movs	r3, #64	; 0x40
 8002872:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002886:	2306      	movs	r3, #6
 8002888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800288c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002890:	4619      	mov	r1, r3
 8002892:	4861      	ldr	r0, [pc, #388]	; (8002a18 <HAL_DFSDM_ChannelMspInit+0x2ac>)
 8002894:	f002 ff62 	bl	800575c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002898:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0x29c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0x29c>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80028a2:	e0a4      	b.n	80029ee <HAL_DFSDM_ChannelMspInit+0x282>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a53      	ldr	r2, [pc, #332]	; (80029f8 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f000 809f 	beq.w	80029ee <HAL_DFSDM_ChannelMspInit+0x282>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_DFSDM_ChannelMspInit+0x290>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f000 8099 	beq.w	80029ee <HAL_DFSDM_ChannelMspInit+0x282>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_DFSDM_ChannelMspInit+0x294>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	f000 8093 	beq.w	80029ee <HAL_DFSDM_ChannelMspInit+0x282>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <HAL_DFSDM_ChannelMspInit+0x298>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f000 808d 	beq.w	80029ee <HAL_DFSDM_ChannelMspInit+0x282>
 80028d4:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_DFSDM_ChannelMspInit+0x2b0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f040 8088 	bne.w	80029ee <HAL_DFSDM_ChannelMspInit+0x282>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM2;
 80028de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Dfsdm2ClockSelection = RCC_DFSDM2CLKSOURCE_APB2;
 80028e4:	2300      	movs	r3, #0
 80028e6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f006 fb13 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_DFSDM_ChannelMspInit+0x190>
      Error_Handler();
 80028f8:	f7ff fcf0 	bl	80022dc <Error_Handler>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800290a:	6453      	str	r3, [r2, #68]	; 0x44
 800290c:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800293e:	f043 0308 	orr.w	r3, r3, #8
 8002942:	6313      	str	r3, [r2, #48]	; 0x30
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a2d      	ldr	r2, [pc, #180]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_DFSDM_ChannelMspInit+0x2a4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8002982:	2307      	movs	r3, #7
 8002984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800298c:	4619      	mov	r1, r3
 800298e:	4821      	ldr	r0, [pc, #132]	; (8002a14 <HAL_DFSDM_ChannelMspInit+0x2a8>)
 8002990:	f002 fee4 	bl	800575c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8002994:	2304      	movs	r3, #4
 8002996:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80029aa:	2303      	movs	r3, #3
 80029ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029b4:	4619      	mov	r1, r3
 80029b6:	4818      	ldr	r0, [pc, #96]	; (8002a18 <HAL_DFSDM_ChannelMspInit+0x2ac>)
 80029b8:	f002 fed0 	bl	800575c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80029d2:	2306      	movs	r3, #6
 80029d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80029d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029dc:	4619      	mov	r1, r3
 80029de:	4810      	ldr	r0, [pc, #64]	; (8002a20 <HAL_DFSDM_ChannelMspInit+0x2b4>)
 80029e0:	f002 febc 	bl	800575c <HAL_GPIO_Init>
  DFSDM2_Init++;
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_DFSDM_ChannelMspInit+0x2b0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <HAL_DFSDM_ChannelMspInit+0x2b0>)
 80029ec:	6013      	str	r3, [r2, #0]
}
 80029ee:	bf00      	nop
 80029f0:	3790      	adds	r7, #144	; 0x90
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40016000 	.word	0x40016000
 80029fc:	40016020 	.word	0x40016020
 8002a00:	40016040 	.word	0x40016040
 8002a04:	40016060 	.word	0x40016060
 8002a08:	200005e4 	.word	0x200005e4
 8002a0c:	200005e0 	.word	0x200005e0
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	200005e8 	.word	0x200005e8
 8002a20:	40020400 	.word	0x40020400

08002a24 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0a0      	sub	sp, #128	; 0x80
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2258      	movs	r2, #88	; 0x58
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f010 ff3d 	bl	80138c4 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_FMPI2C_MspInit+0xac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d139      	bne.n	8002ac8 <HAL_FMPI2C_MspInit+0xa4>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8002a54:	2310      	movs	r3, #16
 8002a56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4618      	mov	r0, r3
 8002a62:	f006 fa59 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a6c:	f7ff fc36 	bl	80022dc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_FMPI2C_MspInit+0xb0>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_FMPI2C_MspInit+0xb0>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_FMPI2C_MspInit+0xb0>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8002a8c:	23c0      	movs	r3, #192	; 0xc0
 8002a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a90:	2312      	movs	r3, #18
 8002a92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <HAL_FMPI2C_MspInit+0xb4>)
 8002aa8:	f002 fe58 	bl	800575c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_FMPI2C_MspInit+0xb0>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_FMPI2C_MspInit+0xb0>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	6413      	str	r3, [r2, #64]	; 0x40
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_FMPI2C_MspInit+0xb0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8002ac8:	bf00      	nop
 8002aca:	3780      	adds	r7, #128	; 0x80
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40006000 	.word	0x40006000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020800 	.word	0x40020800

08002adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_I2C_MspInit+0x84>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12c      	bne.n	8002b58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_I2C_MspInit+0x88>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_I2C_MspInit+0x88>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_I2C_MspInit+0x88>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002b1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b20:	2312      	movs	r3, #18
 8002b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	480c      	ldr	r0, [pc, #48]	; (8002b68 <HAL_I2C_MspInit+0x8c>)
 8002b38:	f002 fe10 	bl	800575c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_I2C_MspInit+0x88>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <HAL_I2C_MspInit+0x88>)
 8002b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_I2C_MspInit+0x88>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b58:	bf00      	nop
 8002b5a:	3728      	adds	r7, #40	; 0x28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40005800 	.word	0x40005800
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400

08002b6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0a2      	sub	sp, #136	; 0x88
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	2258      	movs	r2, #88	; 0x58
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f010 fe99 	bl	80138c4 <memset>
  if(hi2s->Instance==SPI2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a60      	ldr	r2, [pc, #384]	; (8002d18 <HAL_I2S_MspInit+0x1ac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	f040 80b9 	bne.w	8002d10 <HAL_I2S_MspInit+0x1a4>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 8002b9e:	2381      	movs	r3, #129	; 0x81
 8002ba0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8002ba2:	2332      	movs	r3, #50	; 0x32
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002baa:	2302      	movs	r3, #2
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 f9aa 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8002bca:	f7ff fb87 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b52      	ldr	r3, [pc, #328]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a51      	ldr	r2, [pc, #324]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a43      	ldr	r2, [pc, #268]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <HAL_I2S_MspInit+0x1b0>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8002c72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c76:	4619      	mov	r1, r3
 8002c78:	4829      	ldr	r0, [pc, #164]	; (8002d20 <HAL_I2S_MspInit+0x1b4>)
 8002c7a:	f002 fd6f 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8002c7e:	2308      	movs	r3, #8
 8002c80:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c90:	2305      	movs	r3, #5
 8002c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4820      	ldr	r0, [pc, #128]	; (8002d20 <HAL_I2S_MspInit+0x1b4>)
 8002c9e:	f002 fd5d 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4818      	ldr	r0, [pc, #96]	; (8002d24 <HAL_I2S_MspInit+0x1b8>)
 8002cc2:	f002 fd4b 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cd8:	2305      	movs	r3, #5
 8002cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4810      	ldr	r0, [pc, #64]	; (8002d28 <HAL_I2S_MspInit+0x1bc>)
 8002ce6:	f002 fd39 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8002cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4808      	ldr	r0, [pc, #32]	; (8002d2c <HAL_I2S_MspInit+0x1c0>)
 8002d0c:	f002 fd26 	bl	800575c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d10:	bf00      	nop
 8002d12:	3788      	adds	r7, #136	; 0x88
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40003800 	.word	0x40003800
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020c00 	.word	0x40020c00
 8002d2c:	40020400 	.word	0x40020400

08002d30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	; 0x38
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_QSPI_MspInit+0x178>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f040 80a6 	bne.w	8002ea0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	4a53      	ldr	r2, [pc, #332]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	6393      	str	r3, [r2, #56]	; 0x38
 8002d64:	4b51      	ldr	r3, [pc, #324]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a45      	ldr	r2, [pc, #276]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	4a3e      	ldr	r2, [pc, #248]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	6313      	str	r3, [r2, #48]	; 0x30
 8002db8:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	4b38      	ldr	r3, [pc, #224]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4a37      	ldr	r2, [pc, #220]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002dce:	f043 0308 	orr.w	r3, r3, #8
 8002dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a30      	ldr	r2, [pc, #192]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <HAL_QSPI_MspInit+0x17c>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002e0c:	2309      	movs	r3, #9
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8002e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e14:	4619      	mov	r1, r3
 8002e16:	4826      	ldr	r0, [pc, #152]	; (8002eb0 <HAL_QSPI_MspInit+0x180>)
 8002e18:	f002 fca0 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8002e1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002e2e:	230a      	movs	r3, #10
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	481e      	ldr	r0, [pc, #120]	; (8002eb4 <HAL_QSPI_MspInit+0x184>)
 8002e3a:	f002 fc8f 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002e4e:	2309      	movs	r3, #9
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e56:	4619      	mov	r1, r3
 8002e58:	4817      	ldr	r0, [pc, #92]	; (8002eb8 <HAL_QSPI_MspInit+0x188>)
 8002e5a:	f002 fc7f 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8002e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002e70:	2309      	movs	r3, #9
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8002e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4810      	ldr	r0, [pc, #64]	; (8002ebc <HAL_QSPI_MspInit+0x18c>)
 8002e7c:	f002 fc6e 	bl	800575c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8002e80:	2340      	movs	r3, #64	; 0x40
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002e90:	230a      	movs	r3, #10
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <HAL_QSPI_MspInit+0x190>)
 8002e9c:	f002 fc5e 	bl	800575c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	a0001000 	.word	0xa0001000
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40021800 	.word	0x40021800

08002ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f02:	e044      	b.n	8002f8e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <HAL_TIM_Base_MspInit+0xd8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d12c      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f56:	2302      	movs	r3, #2
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480f      	ldr	r0, [pc, #60]	; (8002fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8002f62:	f002 fbfb 	bl	800575c <HAL_GPIO_Init>
}
 8002f66:	e012      	b.n	8002f8e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10d      	bne.n	8002f8e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_TIM_Base_MspInit+0xd4>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
}
 8002f8e:	bf00      	nop
 8002f90:	3730      	adds	r7, #48	; 0x30
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40000800 	.word	0x40000800

08002fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d11f      	bne.n	800300a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a34      	ldr	r2, [pc, #208]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b32      	ldr	r3, [pc, #200]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4829      	ldr	r0, [pc, #164]	; (80030a8 <HAL_TIM_MspPostInit+0x100>)
 8003004:	f002 fbaa 	bl	800575c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003008:	e047      	b.n	800309a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_TIM_MspPostInit+0x104>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d11e      	bne.n	8003052 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	6313      	str	r3, [r2, #48]	; 0x30
 8003024:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D6_Pin|GPIO_PIN_5;
 8003030:	2321      	movs	r3, #33	; 0x21
 8003032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003040:	2302      	movs	r3, #2
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4619      	mov	r1, r3
 800304a:	4819      	ldr	r0, [pc, #100]	; (80030b0 <HAL_TIM_MspPostInit+0x108>)
 800304c:	f002 fb86 	bl	800575c <HAL_GPIO_Init>
}
 8003050:	e023      	b.n	800309a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_TIM_MspPostInit+0x10c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d11e      	bne.n	800309a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	6313      	str	r3, [r2, #48]	; 0x30
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_TIM_MspPostInit+0xfc>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8003078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307e:	2302      	movs	r3, #2
 8003080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800308a:	2302      	movs	r3, #2
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4619      	mov	r1, r3
 8003094:	4806      	ldr	r0, [pc, #24]	; (80030b0 <HAL_TIM_MspPostInit+0x108>)
 8003096:	f002 fb61 	bl	800575c <HAL_GPIO_Init>
}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	; 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40000800 	.word	0x40000800

080030b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	; 0x30
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 031c 	add.w	r3, r7, #28
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <HAL_UART_MspInit+0xfc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12d      	bne.n	8003136 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_UART_MspInit+0x100>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <HAL_UART_MspInit+0x100>)
 80030e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_UART_MspInit+0x100>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_UART_MspInit+0x100>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8003112:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8003124:	230b      	movs	r3, #11
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	4823      	ldr	r0, [pc, #140]	; (80031bc <HAL_UART_MspInit+0x104>)
 8003130:	f002 fb14 	bl	800575c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003134:	e039      	b.n	80031aa <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_UART_MspInit+0x108>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d134      	bne.n	80031aa <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_UART_MspInit+0x100>)
 800314a:	f043 0320 	orr.w	r3, r3, #32
 800314e:	6453      	str	r3, [r2, #68]	; 0x44
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_UART_MspInit+0x100>)
 8003166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800316a:	6313      	str	r3, [r2, #48]	; 0x30
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_UART_MspInit+0x100>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8003178:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800317c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800318a:	2308      	movs	r3, #8
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <HAL_UART_MspInit+0x104>)
 8003196:	f002 fae1 	bl	800575c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2105      	movs	r1, #5
 800319e:	2047      	movs	r0, #71	; 0x47
 80031a0:	f001 fdce 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031a4:	2047      	movs	r0, #71	; 0x47
 80031a6:	f001 fde7 	bl	8004d78 <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40011c00 	.word	0x40011c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40021800 	.word	0x40021800
 80031c0:	40011400 	.word	0x40011400

080031c4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_FSMC_MspInit+0xc8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d151      	bne.n	8003284 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_FSMC_MspInit+0xc8>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_FSMC_MspInit+0xcc>)
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_FSMC_MspInit+0xcc>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6393      	str	r3, [r2, #56]	; 0x38
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <HAL_FSMC_MspInit+0xcc>)
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8003202:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003206:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003214:	230c      	movs	r3, #12
 8003216:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	4619      	mov	r1, r3
 800321c:	481d      	ldr	r0, [pc, #116]	; (8003294 <HAL_FSMC_MspInit+0xd0>)
 800321e:	f002 fa9d 	bl	800575c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8003222:	f240 433f 	movw	r3, #1087	; 0x43f
 8003226:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003234:	230c      	movs	r3, #12
 8003236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4816      	ldr	r0, [pc, #88]	; (8003298 <HAL_FSMC_MspInit+0xd4>)
 800323e:	f002 fa8d 	bl	800575c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8003242:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003246:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003250:	2303      	movs	r3, #3
 8003252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003254:	230c      	movs	r3, #12
 8003256:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	4619      	mov	r1, r3
 800325c:	480f      	ldr	r0, [pc, #60]	; (800329c <HAL_FSMC_MspInit+0xd8>)
 800325e:	f002 fa7d 	bl	800575c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8003262:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8003266:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003274:	230c      	movs	r3, #12
 8003276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4808      	ldr	r0, [pc, #32]	; (80032a0 <HAL_FSMC_MspInit+0xdc>)
 800327e:	f002 fa6d 	bl	800575c <HAL_GPIO_Init>
 8003282:	e000      	b.n	8003286 <HAL_FSMC_MspInit+0xc2>
    return;
 8003284:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200005ec 	.word	0x200005ec
 8003290:	40023800 	.word	0x40023800
 8003294:	40021400 	.word	0x40021400
 8003298:	40021800 	.word	0x40021800
 800329c:	40021000 	.word	0x40021000
 80032a0:	40020c00 	.word	0x40020c00

080032a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80032ac:	f7ff ff8a 	bl	80031c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08e      	sub	sp, #56	; 0x38
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_InitTick+0xe4>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a32      	ldr	r2, [pc, #200]	; (800339c <HAL_InitTick+0xe4>)
 80032d2:	f043 0310 	orr.w	r3, r3, #16
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_InitTick+0xe4>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032e4:	f107 0210 	add.w	r2, r7, #16
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f005 fde0 	bl	8008eb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032fe:	f005 fdb1 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 8003302:	6378      	str	r0, [r7, #52]	; 0x34
 8003304:	e004      	b.n	8003310 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003306:	f005 fdad 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 800330a:	4603      	mov	r3, r0
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	4a23      	ldr	r2, [pc, #140]	; (80033a0 <HAL_InitTick+0xe8>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	3b01      	subs	r3, #1
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_InitTick+0xec>)
 8003320:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <HAL_InitTick+0xf0>)
 8003322:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003324:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_InitTick+0xec>)
 8003326:	f240 32e7 	movw	r2, #999	; 0x3e7
 800332a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_InitTick+0xec>)
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_InitTick+0xec>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_InitTick+0xec>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_InitTick+0xec>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003344:	4817      	ldr	r0, [pc, #92]	; (80033a4 <HAL_InitTick+0xec>)
 8003346:	f006 fca3 	bl	8009c90 <HAL_TIM_Base_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003350:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11b      	bne.n	8003390 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003358:	4812      	ldr	r0, [pc, #72]	; (80033a4 <HAL_InitTick+0xec>)
 800335a:	f006 fce9 	bl	8009d30 <HAL_TIM_Base_Start_IT>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800336c:	2036      	movs	r0, #54	; 0x36
 800336e:	f001 fd03 	bl	8004d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d808      	bhi.n	800338a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003378:	2200      	movs	r2, #0
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	2036      	movs	r0, #54	; 0x36
 800337e:	f001 fcdf 	bl	8004d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <HAL_InitTick+0xf4>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e002      	b.n	8003390 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003390:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003394:	4618      	mov	r0, r3
 8003396:	3738      	adds	r7, #56	; 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	431bde83 	.word	0x431bde83
 80033a4:	200005f0 	.word	0x200005f0
 80033a8:	40001000 	.word	0x40001000
 80033ac:	20000068 	.word	0x20000068

080033b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033b4:	e7fe      	b.n	80033b4 <NMI_Handler+0x4>

080033b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ba:	e7fe      	b.n	80033ba <HardFault_Handler+0x4>

080033bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <MemManage_Handler+0x4>

080033c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <BusFault_Handler+0x4>

080033c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <UsageFault_Handler+0x4>

080033ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <TIM6_DAC_IRQHandler+0x20>)
 80033e2:	791b      	ldrb	r3, [r3, #4]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80033ea:	4804      	ldr	r0, [pc, #16]	; (80033fc <TIM6_DAC_IRQHandler+0x20>)
 80033ec:	f001 fcf4 	bl	8004dd8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80033f0:	4803      	ldr	r0, [pc, #12]	; (8003400 <TIM6_DAC_IRQHandler+0x24>)
 80033f2:	f006 fe2f 	bl	800a054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000148 	.word	0x20000148
 8003400:	200005f0 	.word	0x200005f0

08003404 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <OTG_FS_IRQHandler+0x10>)
 800340a:	f002 fe35 	bl	8006078 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20005480 	.word	0x20005480

08003418 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <USART6_IRQHandler+0x10>)
 800341e:	f007 fd67 	bl	800aef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000047c 	.word	0x2000047c

0800342c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <_sbrk+0x5c>)
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <_sbrk+0x60>)
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <_sbrk+0x64>)
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <_sbrk+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <_sbrk+0x64>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	429a      	cmp	r2, r3
 800345a:	d207      	bcs.n	800346c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800345c:	f010 fab2 	bl	80139c4 <__errno>
 8003460:	4603      	mov	r3, r0
 8003462:	220c      	movs	r2, #12
 8003464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e009      	b.n	8003480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <_sbrk+0x64>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <_sbrk+0x64>)
 800347c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20050000 	.word	0x20050000
 800348c:	00000400 	.word	0x00000400
 8003490:	20000638 	.word	0x20000638
 8003494:	200059a8 	.word	0x200059a8

08003498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <SystemInit+0x20>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <SystemInit+0x20>)
 80034a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80034bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034c0:	f7ff ffea 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c4:	480c      	ldr	r0, [pc, #48]	; (80034f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034c6:	490d      	ldr	r1, [pc, #52]	; (80034fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034c8:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034cc:	e002      	b.n	80034d4 <LoopCopyDataInit>

080034ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d2:	3304      	adds	r3, #4

080034d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d8:	d3f9      	bcc.n	80034ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034dc:	4c0a      	ldr	r4, [pc, #40]	; (8003508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e0:	e001      	b.n	80034e6 <LoopFillZerobss>

080034e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e4:	3204      	adds	r2, #4

080034e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e8:	d3fb      	bcc.n	80034e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80034ea:	f010 fa71 	bl	80139d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ee:	f7fd fc83 	bl	8000df8 <main>
  bx  lr    
 80034f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80034f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80034f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034fc:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8003500:	08017038 	.word	0x08017038
  ldr r2, =_sbss
 8003504:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8003508:	200059a8 	.word	0x200059a8

0800350c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800350c:	e7fe      	b.n	800350c <ADC_IRQHandler>

0800350e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003514:	f000 fd1e 	bl	8003f54 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003518:	2200      	movs	r2, #0
 800351a:	2100      	movs	r1, #0
 800351c:	2010      	movs	r0, #16
 800351e:	f000 f9e4 	bl	80038ea <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8003522:	200a      	movs	r0, #10
 8003524:	f000 fd3d 	bl	8003fa2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8003528:	2200      	movs	r2, #0
 800352a:	2100      	movs	r1, #0
 800352c:	2001      	movs	r0, #1
 800352e:	f000 f9dc 	bl	80038ea <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8003532:	20c8      	movs	r0, #200	; 0xc8
 8003534:	f000 fd35 	bl	8003fa2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8003538:	2200      	movs	r2, #0
 800353a:	2100      	movs	r1, #0
 800353c:	2011      	movs	r0, #17
 800353e:	f000 f9d4 	bl	80038ea <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8003542:	2078      	movs	r0, #120	; 0x78
 8003544:	f000 fd2d 	bl	8003fa2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8003548:	2300      	movs	r3, #0
 800354a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800354c:	463b      	mov	r3, r7
 800354e:	2201      	movs	r2, #1
 8003550:	4619      	mov	r1, r3
 8003552:	2036      	movs	r0, #54	; 0x36
 8003554:	f000 f9c9 	bl	80038ea <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8003558:	2305      	movs	r3, #5
 800355a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800355c:	463b      	mov	r3, r7
 800355e:	2201      	movs	r2, #1
 8003560:	4619      	mov	r1, r3
 8003562:	203a      	movs	r0, #58	; 0x3a
 8003564:	f000 f9c1 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	2021      	movs	r0, #33	; 0x21
 800356e:	f000 f9bc 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8003576:	2300      	movs	r3, #0
 8003578:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800357a:	2300      	movs	r3, #0
 800357c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800357e:	23ef      	movs	r3, #239	; 0xef
 8003580:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003582:	463b      	mov	r3, r7
 8003584:	2204      	movs	r2, #4
 8003586:	4619      	mov	r1, r3
 8003588:	202a      	movs	r0, #42	; 0x2a
 800358a:	f000 f9ae 	bl	80038ea <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8003592:	2300      	movs	r3, #0
 8003594:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8003596:	2300      	movs	r3, #0
 8003598:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800359a:	23ef      	movs	r3, #239	; 0xef
 800359c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800359e:	463b      	mov	r3, r7
 80035a0:	2204      	movs	r2, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	202b      	movs	r0, #43	; 0x2b
 80035a6:	f000 f9a0 	bl	80038ea <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80035aa:	230c      	movs	r3, #12
 80035ac:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80035ae:	230c      	movs	r3, #12
 80035b0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80035b2:	2300      	movs	r3, #0
 80035b4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80035b6:	2333      	movs	r3, #51	; 0x33
 80035b8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80035ba:	2333      	movs	r3, #51	; 0x33
 80035bc:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80035be:	463b      	mov	r3, r7
 80035c0:	2205      	movs	r2, #5
 80035c2:	4619      	mov	r1, r3
 80035c4:	20b2      	movs	r0, #178	; 0xb2
 80035c6:	f000 f990 	bl	80038ea <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80035ca:	2335      	movs	r3, #53	; 0x35
 80035cc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80035ce:	463b      	mov	r3, r7
 80035d0:	2201      	movs	r2, #1
 80035d2:	4619      	mov	r1, r3
 80035d4:	20b7      	movs	r0, #183	; 0xb7
 80035d6:	f000 f988 	bl	80038ea <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80035da:	231f      	movs	r3, #31
 80035dc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80035de:	463b      	mov	r3, r7
 80035e0:	2201      	movs	r2, #1
 80035e2:	4619      	mov	r1, r3
 80035e4:	20bb      	movs	r0, #187	; 0xbb
 80035e6:	f000 f980 	bl	80038ea <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80035ea:	232c      	movs	r3, #44	; 0x2c
 80035ec:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80035ee:	463b      	mov	r3, r7
 80035f0:	2201      	movs	r2, #1
 80035f2:	4619      	mov	r1, r3
 80035f4:	20c0      	movs	r0, #192	; 0xc0
 80035f6:	f000 f978 	bl	80038ea <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80035fa:	2301      	movs	r3, #1
 80035fc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80035fe:	23c3      	movs	r3, #195	; 0xc3
 8003600:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8003602:	463b      	mov	r3, r7
 8003604:	2202      	movs	r2, #2
 8003606:	4619      	mov	r1, r3
 8003608:	20c2      	movs	r0, #194	; 0xc2
 800360a:	f000 f96e 	bl	80038ea <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800360e:	2320      	movs	r3, #32
 8003610:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8003612:	463b      	mov	r3, r7
 8003614:	2201      	movs	r2, #1
 8003616:	4619      	mov	r1, r3
 8003618:	20c4      	movs	r0, #196	; 0xc4
 800361a:	f000 f966 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800361e:	230f      	movs	r3, #15
 8003620:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8003622:	463b      	mov	r3, r7
 8003624:	2201      	movs	r2, #1
 8003626:	4619      	mov	r1, r3
 8003628:	20c6      	movs	r0, #198	; 0xc6
 800362a:	f000 f95e 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800362e:	23a4      	movs	r3, #164	; 0xa4
 8003630:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8003632:	23a1      	movs	r3, #161	; 0xa1
 8003634:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8003636:	463b      	mov	r3, r7
 8003638:	2202      	movs	r2, #2
 800363a:	4619      	mov	r1, r3
 800363c:	20d0      	movs	r0, #208	; 0xd0
 800363e:	f000 f954 	bl	80038ea <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8003642:	23d0      	movs	r3, #208	; 0xd0
 8003644:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8003646:	2308      	movs	r3, #8
 8003648:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800364a:	2311      	movs	r3, #17
 800364c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800364e:	2308      	movs	r3, #8
 8003650:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8003652:	230c      	movs	r3, #12
 8003654:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8003656:	2315      	movs	r3, #21
 8003658:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800365a:	2339      	movs	r3, #57	; 0x39
 800365c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 800365e:	2333      	movs	r3, #51	; 0x33
 8003660:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8003662:	2350      	movs	r3, #80	; 0x50
 8003664:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8003666:	2336      	movs	r3, #54	; 0x36
 8003668:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800366a:	2313      	movs	r3, #19
 800366c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800366e:	2314      	movs	r3, #20
 8003670:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8003672:	2329      	movs	r3, #41	; 0x29
 8003674:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8003676:	232d      	movs	r3, #45	; 0x2d
 8003678:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800367a:	463b      	mov	r3, r7
 800367c:	220e      	movs	r2, #14
 800367e:	4619      	mov	r1, r3
 8003680:	20e0      	movs	r0, #224	; 0xe0
 8003682:	f000 f932 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8003686:	23d0      	movs	r3, #208	; 0xd0
 8003688:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800368a:	2308      	movs	r3, #8
 800368c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800368e:	2310      	movs	r3, #16
 8003690:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8003692:	2308      	movs	r3, #8
 8003694:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8003696:	2306      	movs	r3, #6
 8003698:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800369a:	2306      	movs	r3, #6
 800369c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800369e:	2339      	movs	r3, #57	; 0x39
 80036a0:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80036a2:	2344      	movs	r3, #68	; 0x44
 80036a4:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80036a6:	2351      	movs	r3, #81	; 0x51
 80036a8:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80036aa:	230b      	movs	r3, #11
 80036ac:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80036ae:	2316      	movs	r3, #22
 80036b0:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80036b2:	2314      	movs	r3, #20
 80036b4:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80036b6:	232f      	movs	r3, #47	; 0x2f
 80036b8:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80036ba:	2331      	movs	r3, #49	; 0x31
 80036bc:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80036be:	463b      	mov	r3, r7
 80036c0:	220e      	movs	r2, #14
 80036c2:	4619      	mov	r1, r3
 80036c4:	20e1      	movs	r0, #225	; 0xe1
 80036c6:	f000 f910 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80036ca:	f000 f847 	bl	800375c <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80036ce:	2300      	movs	r3, #0
 80036d0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80036d2:	463b      	mov	r3, r7
 80036d4:	2201      	movs	r2, #1
 80036d6:	4619      	mov	r1, r3
 80036d8:	2035      	movs	r0, #53	; 0x35
 80036da:	f000 f906 	bl	80038ea <ST7789H2_WriteReg>

}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80036f4:	2300      	movs	r3, #0
 80036f6:	723b      	strb	r3, [r7, #8]
 80036f8:	e025      	b.n	8003746 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d120      	bne.n	8003742 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8003700:	2300      	movs	r3, #0
 8003702:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8003704:	2300      	movs	r3, #0
 8003706:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8003708:	2301      	movs	r3, #1
 800370a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 800370c:	23f0      	movs	r3, #240	; 0xf0
 800370e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8003710:	2300      	movs	r3, #0
 8003712:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8003714:	2300      	movs	r3, #0
 8003716:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	2206      	movs	r2, #6
 800371e:	4619      	mov	r1, r3
 8003720:	2033      	movs	r0, #51	; 0x33
 8003722:	f000 f8e2 	bl	80038ea <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8003726:	2300      	movs	r3, #0
 8003728:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800372a:	2350      	movs	r3, #80	; 0x50
 800372c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	2202      	movs	r2, #2
 8003734:	4619      	mov	r1, r3
 8003736:	2037      	movs	r0, #55	; 0x37
 8003738:	f000 f8d7 	bl	80038ea <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 800373c:	23c0      	movs	r3, #192	; 0xc0
 800373e:	723b      	strb	r3, [r7, #8]
 8003740:	e001      	b.n	8003746 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8003742:	2360      	movs	r3, #96	; 0x60
 8003744:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003746:	f107 0308 	add.w	r3, r7, #8
 800374a:	2201      	movs	r2, #1
 800374c:	4619      	mov	r1, r3
 800374e:	2036      	movs	r0, #54	; 0x36
 8003750:	f000 f8cb 	bl	80038ea <ST7789H2_WriteReg>
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2100      	movs	r1, #0
 8003764:	2029      	movs	r0, #41	; 0x29
 8003766:	f000 f8c0 	bl	80038ea <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	2011      	movs	r0, #17
 8003770:	f000 f8bb 	bl	80038ea <ST7789H2_WriteReg>
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}

08003778 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800377e:	23fe      	movs	r3, #254	; 0xfe
 8003780:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	2201      	movs	r2, #1
 8003786:	4619      	mov	r1, r3
 8003788:	20bd      	movs	r0, #189	; 0xbd
 800378a:	f000 f8ae 	bl	80038ea <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2010      	movs	r0, #16
 8003794:	f000 f8a9 	bl	80038ea <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8003798:	200a      	movs	r0, #10
 800379a:	f000 fc02 	bl	8003fa2 <LCD_IO_Delay>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80037aa:	23f0      	movs	r3, #240	; 0xf0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80037ba:	23f0      	movs	r3, #240	; 0xf0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80037ca:	f000 fbc3 	bl	8003f54 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80037ce:	2004      	movs	r0, #4
 80037d0:	f000 f8ae 	bl	8003930 <ST7789H2_ReadReg>
 80037d4:	4603      	mov	r3, r0
 80037d6:	b29b      	uxth	r3, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}

080037dc <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	460a      	mov	r2, r1
 80037e6:	80fb      	strh	r3, [r7, #6]
 80037e8:	4613      	mov	r3, r2
 80037ea:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80037ec:	2300      	movs	r3, #0
 80037ee:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3b11      	subs	r3, #17
 8003800:	b2db      	uxtb	r3, r3
 8003802:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2204      	movs	r2, #4
 800380a:	4619      	mov	r1, r3
 800380c:	202a      	movs	r0, #42	; 0x2a
 800380e:	f000 f86c 	bl	80038ea <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8003812:	2300      	movs	r3, #0
 8003814:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8003816:	88bb      	ldrh	r3, [r7, #4]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800381c:	2300      	movs	r3, #0
 800381e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8003820:	88bb      	ldrh	r3, [r7, #4]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	3b11      	subs	r3, #17
 8003826:	b2db      	uxtb	r3, r3
 8003828:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	2204      	movs	r2, #4
 8003830:	4619      	mov	r1, r3
 8003832:	202b      	movs	r0, #43	; 0x2b
 8003834:	f000 f859 	bl	80038ea <ST7789H2_WriteReg>
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	80fb      	strh	r3, [r7, #6]
 800384a:	460b      	mov	r3, r1
 800384c:	80bb      	strh	r3, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003852:	88ba      	ldrh	r2, [r7, #4]
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ffbf 	bl	80037dc <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800385e:	2200      	movs	r2, #0
 8003860:	2100      	movs	r1, #0
 8003862:	202c      	movs	r0, #44	; 0x2c
 8003864:	f000 f841 	bl	80038ea <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fb78 	bl	8003f60 <LCD_IO_WriteData>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	460a      	mov	r2, r1
 8003882:	80fb      	strh	r3, [r7, #6]
 8003884:	4613      	mov	r3, r2
 8003886:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003888:	88ba      	ldrh	r2, [r7, #4]
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ffa4 	bl	80037dc <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8003894:	88ba      	ldrh	r2, [r7, #4]
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f9c0 	bl	8003c20 <ST7789H2_ReadPixel_rgb888>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	733a      	strb	r2, [r7, #12]
 80038a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038aa:	737a      	strb	r2, [r7, #13]
 80038ac:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80038b0:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80038b2:	7b3b      	ldrb	r3, [r7, #12]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80038b8:	7b7b      	ldrb	r3, [r7, #13]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	08db      	lsrs	r3, r3, #3
 80038c2:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	02db      	lsls	r3, r3, #11
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	7dbb      	ldrb	r3, [r7, #22]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	015b      	lsls	r3, r3, #5
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	7d7b      	ldrb	r3, [r7, #21]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	4413      	add	r3, r2
 80038de:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80038e0:	8a7b      	ldrh	r3, [r7, #18]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	6039      	str	r1, [r7, #0]
 80038f4:	71fb      	strb	r3, [r7, #7]
 80038f6:	4613      	mov	r3, r2
 80038f8:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fb3c 	bl	8003f7a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e00a      	b.n	800391e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb24 	bl	8003f60 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3301      	adds	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	79bb      	ldrb	r3, [r7, #6]
 8003922:	429a      	cmp	r2, r3
 8003924:	d3f0      	bcc.n	8003908 <ST7789H2_WriteReg+0x1e>
  }
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fb1c 	bl	8003f7a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8003942:	f000 fb27 	bl	8003f94 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8003946:	f000 fb25 	bl	8003f94 <LCD_IO_ReadData>
 800394a:	4603      	mov	r3, r0
 800394c:	b2db      	uxtb	r3, r3
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003958:	b490      	push	{r4, r7}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4623      	mov	r3, r4
 8003968:	80fb      	strh	r3, [r7, #6]
 800396a:	4603      	mov	r3, r0
 800396c:	80bb      	strh	r3, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
 8003972:	4613      	mov	r3, r2
 8003974:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2bef      	cmp	r3, #239	; 0xef
 800397a:	d803      	bhi.n	8003984 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 800397c:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <ST7789H2_SetDisplayWindow+0x94>)
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	8013      	strh	r3, [r2, #0]
 8003982:	e002      	b.n	800398a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <ST7789H2_SetDisplayWindow+0x94>)
 8003986:	2200      	movs	r2, #0
 8003988:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800398a:	88bb      	ldrh	r3, [r7, #4]
 800398c:	2bef      	cmp	r3, #239	; 0xef
 800398e:	d803      	bhi.n	8003998 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <ST7789H2_SetDisplayWindow+0x98>)
 8003992:	88bb      	ldrh	r3, [r7, #4]
 8003994:	8013      	strh	r3, [r2, #0]
 8003996:	e002      	b.n	800399e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <ST7789H2_SetDisplayWindow+0x98>)
 800399a:	2200      	movs	r2, #0
 800399c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	4413      	add	r3, r2
 80039a4:	2bf0      	cmp	r3, #240	; 0xf0
 80039a6:	dc08      	bgt.n	80039ba <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	4413      	add	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <ST7789H2_SetDisplayWindow+0x9c>)
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	e002      	b.n	80039c0 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <ST7789H2_SetDisplayWindow+0x9c>)
 80039bc:	22ef      	movs	r2, #239	; 0xef
 80039be:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80039c0:	883a      	ldrh	r2, [r7, #0]
 80039c2:	88bb      	ldrh	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	2bf0      	cmp	r3, #240	; 0xf0
 80039c8:	dc08      	bgt.n	80039dc <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80039ca:	883a      	ldrh	r2, [r7, #0]
 80039cc:	88bb      	ldrh	r3, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <ST7789H2_SetDisplayWindow+0xa0>)
 80039d8:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80039da:	e002      	b.n	80039e2 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <ST7789H2_SetDisplayWindow+0xa0>)
 80039de:	22ef      	movs	r2, #239	; 0xef
 80039e0:	801a      	strh	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc90      	pop	{r4, r7}
 80039ea:	4770      	bx	lr
 80039ec:	2000063c 	.word	0x2000063c
 80039f0:	2000063e 	.word	0x2000063e
 80039f4:	2000004c 	.word	0x2000004c
 80039f8:	2000004e 	.word	0x2000004e

080039fc <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4604      	mov	r4, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	80fb      	strh	r3, [r7, #6]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80bb      	strh	r3, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	807b      	strh	r3, [r7, #2]
 8003a16:	4613      	mov	r3, r2
 8003a18:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	88bb      	ldrh	r3, [r7, #4]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fedb 	bl	80037dc <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003a26:	2200      	movs	r2, #0
 8003a28:	2100      	movs	r1, #0
 8003a2a:	202c      	movs	r0, #44	; 0x2c
 8003a2c:	f7ff ff5d 	bl	80038ea <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	81fb      	strh	r3, [r7, #14]
 8003a34:	e006      	b.n	8003a44 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fa91 	bl	8003f60 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8003a3e:	89fb      	ldrh	r3, [r7, #14]
 8003a40:	3301      	adds	r3, #1
 8003a42:	81fb      	strh	r3, [r7, #14]
 8003a44:	89fa      	ldrh	r2, [r7, #14]
 8003a46:	883b      	ldrh	r3, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3f4      	bcc.n	8003a36 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}

08003a56 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	4608      	mov	r0, r1
 8003a60:	4611      	mov	r1, r2
 8003a62:	461a      	mov	r2, r3
 8003a64:	4623      	mov	r3, r4
 8003a66:	80fb      	strh	r3, [r7, #6]
 8003a68:	4603      	mov	r3, r0
 8003a6a:	80bb      	strh	r3, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003a74:	887a      	ldrh	r2, [r7, #2]
 8003a76:	88bb      	ldrh	r3, [r7, #4]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff feae 	bl	80037dc <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	202c      	movs	r0, #44	; 0x2c
 8003a86:	f7ff ff30 	bl	80038ea <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	81fb      	strh	r3, [r7, #14]
 8003a8e:	e00b      	b.n	8003aa8 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	89fb      	ldrh	r3, [r7, #14]
 8003a94:	4413      	add	r3, r2
 8003a96:	b299      	uxth	r1, r3
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	88bb      	ldrh	r3, [r7, #4]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fecf 	bl	8003840 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8003aa2:	89fb      	ldrh	r3, [r7, #14]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	81fb      	strh	r3, [r7, #14]
 8003aa8:	89fa      	ldrh	r2, [r7, #14]
 8003aaa:	883b      	ldrh	r3, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3ef      	bcc.n	8003a90 <ST7789H2_DrawVLine+0x3a>
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}
	...

08003abc <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	603a      	str	r2, [r7, #0]
 8003ac6:	80fb      	strh	r3, [r7, #6]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003ad8:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <ST7789H2_DrawBitmap+0xe0>)
 8003ada:	881a      	ldrh	r2, [r3, #0]
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <ST7789H2_DrawBitmap+0xe4>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <ST7789H2_DrawBitmap+0xe8>)
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <ST7789H2_DrawBitmap+0xec>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	3302      	adds	r3, #2
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	330a      	adds	r3, #10
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	461a      	mov	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4413      	add	r3, r2
 8003b40:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003b42:	88ba      	ldrh	r2, [r7, #4]
 8003b44:	89bb      	ldrh	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e01d      	b.n	8003b88 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fe3f 	bl	80037dc <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b299      	uxth	r1, r3
 8003b66:	89fb      	ldrh	r3, [r7, #14]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	89fa      	ldrh	r2, [r7, #14]
 8003b76:	88f8      	ldrh	r0, [r7, #6]
 8003b78:	f000 f89c 	bl	8003cb4 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	88bb      	ldrh	r3, [r7, #4]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d8dd      	bhi.n	8003b4c <ST7789H2_DrawBitmap+0x90>
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2000004c 	.word	0x2000004c
 8003ba0:	2000063c 	.word	0x2000063c
 8003ba4:	2000004e 	.word	0x2000004e
 8003ba8:	2000063e 	.word	0x2000063e

08003bac <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	80fb      	strh	r3, [r7, #6]
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	80bb      	strh	r3, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	807b      	strh	r3, [r7, #2]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003bce:	88bb      	ldrh	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e019      	b.n	8003c08 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fdfd 	bl	80037dc <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	b299      	uxth	r1, r3
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	88f8      	ldrh	r0, [r7, #6]
 8003bf8:	f000 f85c 	bl	8003cb4 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	88ba      	ldrh	r2, [r7, #4]
 8003c0a:	883b      	ldrh	r3, [r7, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d3de      	bcc.n	8003bd4 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	460a      	mov	r2, r1
 8003c2a:	80fb      	strh	r3, [r7, #6]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003c30:	88ba      	ldrh	r2, [r7, #4]
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fdd0 	bl	80037dc <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2100      	movs	r1, #0
 8003c40:	202e      	movs	r0, #46	; 0x2e
 8003c42:	f7ff fe52 	bl	80038ea <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8003c46:	f000 f9a5 	bl	8003f94 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8003c4a:	f000 f9a3 	bl	8003f94 <LCD_IO_ReadData>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8003c52:	f000 f99f 	bl	8003f94 <LCD_IO_ReadData>
 8003c56:	4603      	mov	r3, r0
 8003c58:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	121b      	asrs	r3, r3, #8
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f023 0303 	bic.w	r3, r3, #3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8003c68:	8afb      	ldrh	r3, [r7, #22]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f023 0303 	bic.w	r3, r3, #3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8003c74:	8abb      	ldrh	r3, [r7, #20]
 8003c76:	121b      	asrs	r3, r3, #8
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8003c82:	f107 0310 	add.w	r3, r7, #16
 8003c86:	f107 020c 	add.w	r2, r7, #12
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	8019      	strh	r1, [r3, #0]
 8003c90:	3302      	adds	r3, #2
 8003c92:	0c12      	lsrs	r2, r2, #16
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	7c3a      	ldrb	r2, [r7, #16]
 8003c9a:	f362 0307 	bfi	r3, r2, #0, #8
 8003c9e:	7c7a      	ldrb	r2, [r7, #17]
 8003ca0:	f362 230f 	bfi	r3, r2, #8, #8
 8003ca4:	7cba      	ldrb	r2, [r7, #18]
 8003ca6:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	81fb      	strh	r3, [r7, #14]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	81bb      	strh	r3, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	202c      	movs	r0, #44	; 0x2c
 8003cd6:	f7ff fe08 	bl	80038ea <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e029      	b.n	8003d34 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <ST7789H2_DrawRGBHLine+0x98>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d320      	bcc.n	8003d2e <ST7789H2_DrawRGBHLine+0x7a>
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <ST7789H2_DrawRGBHLine+0x9c>)
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	89ba      	ldrh	r2, [r7, #12]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d31b      	bcc.n	8003d2e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <ST7789H2_DrawRGBHLine+0xa0>)
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d815      	bhi.n	8003d2e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <ST7789H2_DrawRGBHLine+0xa4>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	89ba      	ldrh	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d810      	bhi.n	8003d2e <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003d0c:	897a      	ldrh	r2, [r7, #10]
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	441a      	add	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d007      	beq.n	8003d28 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f91c 	bl	8003f60 <LCD_IO_WriteData>
      }      
      i++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	3301      	adds	r3, #1
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	897a      	ldrh	r2, [r7, #10]
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	4413      	add	r3, r2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d3ce      	bcc.n	8003ce0 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	2000063c 	.word	0x2000063c
 8003d50:	2000063e 	.word	0x2000063e
 8003d54:	2000004c 	.word	0x2000004c
 8003d58:	2000004e 	.word	0x2000004e

08003d5c <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6393      	str	r3, [r2, #56]	; 0x38
 8003d72:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b33      	ldr	r3, [pc, #204]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003da4:	f043 0310 	orr.w	r3, r3, #16
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003dc0:	f043 0320 	orr.w	r3, r3, #32
 8003dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <FMC_BANK3_MspInit+0xf4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df6:	2303      	movs	r3, #3
 8003df8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8003dfe:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8003e02:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4812      	ldr	r0, [pc, #72]	; (8003e54 <FMC_BANK3_MspInit+0xf8>)
 8003e0c:	f001 fca6 	bl	800575c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8003e10:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003e14:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	480e      	ldr	r0, [pc, #56]	; (8003e58 <FMC_BANK3_MspInit+0xfc>)
 8003e1e:	f001 fc9d 	bl	800575c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e22:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003e26:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	480b      	ldr	r0, [pc, #44]	; (8003e5c <FMC_BANK3_MspInit+0x100>)
 8003e30:	f001 fc94 	bl	800575c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e34:	f240 433f 	movw	r3, #1087	; 0x43f
 8003e38:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e3a:	f107 0314 	add.w	r3, r7, #20
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <FMC_BANK3_MspInit+0x104>)
 8003e42:	f001 fc8b 	bl	800575c <HAL_GPIO_Init>
}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40020c00 	.word	0x40020c00
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40021400 	.word	0x40021400
 8003e60:	40021800 	.word	0x40021800

08003e64 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b09c      	sub	sp, #112	; 0x70
 8003e68:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8003e6a:	f7ff ff77 	bl	8003d5c <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8003e6e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003e72:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <FMC_BANK3_Init+0x8c>)
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8003e80:	2304      	movs	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8003e84:	2301      	movs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8003e94:	2304      	movs	r3, #4
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8003eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8003ebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ec2:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8003ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ed0:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8003eda:	1d3a      	adds	r2, r7, #4
 8003edc:	1d39      	adds	r1, r7, #4
 8003ede:	f107 0320 	add.w	r3, r7, #32
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f005 fe8c 	bl	8009c00 <HAL_SRAM_Init>
}
 8003ee8:	bf00      	nop
 8003eea:	3770      	adds	r7, #112	; 0x70
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	a0000104 	.word	0xa0000104

08003ef4 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8003efe:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	8053      	strh	r3, [r2, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f06:	f3bf 8f4f 	dsb	sy
}
 8003f0a:	bf00      	nop
  __DSB();
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8003f22:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003f26:	79fa      	ldrb	r2, [r7, #7]
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f2c:	f3bf 8f4f 	dsb	sy
}
 8003f30:	bf00      	nop
  __DSB();
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8003f42:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003f46:	885b      	ldrh	r3, [r3, #2]
 8003f48:	b29b      	uxth	r3, r3
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8003f58:	f7ff ff84 	bl	8003e64 <FMC_BANK3_Init>
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ffc1 	bl	8003ef4 <FMC_BANK3_WriteData>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	4603      	mov	r3, r0
 8003f82:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ffc6 	bl	8003f18 <FMC_BANK3_WriteReg>
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8003f98:	f7ff ffd1 	bl	8003f3e <FMC_BANK3_ReadData>
 8003f9c:	4603      	mov	r3, r0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fb7a 	bl	80046a4 <HAL_Delay>
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8003fc0:	f000 f80e 	bl	8003fe0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8003fd4:	f000 f80b 	bl	8003fee <BSP_AUDIO_OUT_Error_CallBack>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
}
 8003ff2:	bf00      	nop
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004004:	f000 f804 	bl	8004010 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8004022:	2001      	movs	r0, #1
 8004024:	f000 f804 	bl	8004030 <BSP_LCD_InitEx>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <BSP_LCD_InitEx+0xc0>)
 800403e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004042:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <BSP_LCD_InitEx+0xc0>)
 8004046:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <BSP_LCD_InitEx+0xc4>)
 8004048:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <BSP_LCD_InitEx+0xc0>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8004050:	f000 f9f0 	bl	8004434 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004054:	2201      	movs	r2, #1
 8004056:	2120      	movs	r1, #32
 8004058:	4827      	ldr	r0, [pc, #156]	; (80040f8 <BSP_LCD_InitEx+0xc8>)
 800405a:	f001 fd13 	bl	8005a84 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800405e:	2200      	movs	r2, #0
 8004060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004064:	4825      	ldr	r0, [pc, #148]	; (80040fc <BSP_LCD_InitEx+0xcc>)
 8004066:	f001 fd0d 	bl	8005a84 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800406a:	2005      	movs	r0, #5
 800406c:	f000 fb1a 	bl	80046a4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8004070:	2201      	movs	r2, #1
 8004072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004076:	4821      	ldr	r0, [pc, #132]	; (80040fc <BSP_LCD_InitEx+0xcc>)
 8004078:	f001 fd04 	bl	8005a84 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800407c:	200a      	movs	r0, #10
 800407e:	f000 fb11 	bl	80046a4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8004082:	2200      	movs	r2, #0
 8004084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004088:	481c      	ldr	r0, [pc, #112]	; (80040fc <BSP_LCD_InitEx+0xcc>)
 800408a:	f001 fcfb 	bl	8005a84 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800408e:	2014      	movs	r0, #20
 8004090:	f000 fb08 	bl	80046a4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8004094:	2201      	movs	r2, #1
 8004096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800409a:	4818      	ldr	r0, [pc, #96]	; (80040fc <BSP_LCD_InitEx+0xcc>)
 800409c:	f001 fcf2 	bl	8005a84 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80040a0:	200a      	movs	r0, #10
 80040a2:	f000 faff 	bl	80046a4 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <BSP_LCD_InitEx+0xd0>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4798      	blx	r3
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b85      	cmp	r3, #133	; 0x85
 80040b0:	d118      	bne.n	80040e4 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <BSP_LCD_InitEx+0xd4>)
 80040b4:	4a12      	ldr	r2, [pc, #72]	; (8004100 <BSP_LCD_InitEx+0xd0>)
 80040b6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <BSP_LCD_InitEx+0xd4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff fb0d 	bl	80036e6 <ST7789H2_SetOrientation>
 80040cc:	e005      	b.n	80040da <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d102      	bne.n	80040da <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80040d4:	2002      	movs	r0, #2
 80040d6:	f7ff fb06 	bl	80036e6 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80040da:	480b      	ldr	r0, [pc, #44]	; (8004108 <BSP_LCD_InitEx+0xd8>)
 80040dc:	f000 f84e 	bl	800417c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000640 	.word	0x20000640
 80040f4:	20000050 	.word	0x20000050
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40020400 	.word	0x40020400
 8004100:	20000014 	.word	0x20000014
 8004104:	2000064c 	.word	0x2000064c
 8004108:	20000060 	.word	0x20000060

0800410c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <BSP_LCD_GetXSize+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	4798      	blx	r3
 8004118:	4603      	mov	r3, r0
}
 800411a:	4618      	mov	r0, r3
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000064c 	.word	0x2000064c

08004124 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <BSP_LCD_GetYSize+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4798      	blx	r3
 8004130:	4603      	mov	r3, r0
}
 8004132:	4618      	mov	r0, r3
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000064c 	.word	0x2000064c

0800413c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4a03      	ldr	r2, [pc, #12]	; (8004158 <BSP_LCD_SetTextColor+0x1c>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000640 	.word	0x20000640

0800415c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	4a03      	ldr	r2, [pc, #12]	; (8004178 <BSP_LCD_SetBackColor+0x1c>)
 800416a:	6053      	str	r3, [r2, #4]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000640 	.word	0x20000640

0800417c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <BSP_LCD_SetFont+0x1c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6093      	str	r3, [r2, #8]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000640 	.word	0x20000640

0800419c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <BSP_LCD_Clear+0x68>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	4a13      	ldr	r2, [pc, #76]	; (8004204 <BSP_LCD_Clear+0x68>)
 80041b8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80041ba:	f7ff ffb3 	bl	8004124 <BSP_LCD_GetYSize>
 80041be:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e00d      	b.n	80041e2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	b29c      	uxth	r4, r3
 80041ca:	f7ff ff9f 	bl	800410c <BSP_LCD_GetXSize>
 80041ce:	4603      	mov	r3, r0
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	4621      	mov	r1, r4
 80041d6:	2000      	movs	r0, #0
 80041d8:	f000 f8f2 	bl	80043c0 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3301      	adds	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3ed      	bcc.n	80041c6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80041ea:	4a06      	ldr	r2, [pc, #24]	; (8004204 <BSP_LCD_Clear+0x68>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <BSP_LCD_Clear+0x68>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ffa0 	bl	800413c <BSP_LCD_SetTextColor>
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	bd90      	pop	{r4, r7, pc}
 8004204:	20000640 	.word	0x20000640

08004208 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
 8004212:	460b      	mov	r3, r1
 8004214:	80bb      	strh	r3, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <BSP_LCD_DisplayChar+0x50>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8004224:	490c      	ldr	r1, [pc, #48]	; (8004258 <BSP_LCD_DisplayChar+0x50>)
 8004226:	6889      	ldr	r1, [r1, #8]
 8004228:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800422a:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <BSP_LCD_DisplayChar+0x50>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	889b      	ldrh	r3, [r3, #4]
 8004234:	3307      	adds	r3, #7
 8004236:	2b00      	cmp	r3, #0
 8004238:	da00      	bge.n	800423c <BSP_LCD_DisplayChar+0x34>
 800423a:	3307      	adds	r3, #7
 800423c:	10db      	asrs	r3, r3, #3
 800423e:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8004242:	441a      	add	r2, r3
 8004244:	88b9      	ldrh	r1, [r7, #4]
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f94f 	bl	80044ec <DrawChar>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000640 	.word	0x20000640

0800425c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60ba      	str	r2, [r7, #8]
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	81fb      	strh	r3, [r7, #14]
 800426a:	460b      	mov	r3, r1
 800426c:	81bb      	strh	r3, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004272:	2301      	movs	r3, #1
 8004274:	83fb      	strh	r3, [r7, #30]
 8004276:	2300      	movs	r3, #0
 8004278:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004286:	e002      	b.n	800428e <BSP_LCD_DisplayStringAt+0x32>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3301      	adds	r3, #1
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	617a      	str	r2, [r7, #20]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f6      	bne.n	8004288 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800429a:	f7ff ff37 	bl	800410c <BSP_LCD_GetXSize>
 800429e:	4602      	mov	r2, r0
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <BSP_LCD_DisplayStringAt+0x128>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	889b      	ldrh	r3, [r3, #4]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d014      	beq.n	80042dc <BSP_LCD_DisplayStringAt+0x80>
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	dc23      	bgt.n	80042fe <BSP_LCD_DisplayStringAt+0xa2>
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d002      	beq.n	80042c0 <BSP_LCD_DisplayStringAt+0x64>
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d011      	beq.n	80042e2 <BSP_LCD_DisplayStringAt+0x86>
 80042be:	e01e      	b.n	80042fe <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <BSP_LCD_DisplayStringAt+0x128>)
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	8892      	ldrh	r2, [r2, #4]
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	89fb      	ldrh	r3, [r7, #14]
 80042d6:	4413      	add	r3, r2
 80042d8:	83fb      	strh	r3, [r7, #30]
      break;
 80042da:	e013      	b.n	8004304 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80042dc:	89fb      	ldrh	r3, [r7, #14]
 80042de:	83fb      	strh	r3, [r7, #30]
      break;
 80042e0:	e010      	b.n	8004304 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	4b26      	ldr	r3, [pc, #152]	; (8004384 <BSP_LCD_DisplayStringAt+0x128>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	889b      	ldrh	r3, [r3, #4]
 80042f0:	fb12 f303 	smulbb	r3, r2, r3
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	83fb      	strh	r3, [r7, #30]
      break;
 80042fc:	e002      	b.n	8004304 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	83fb      	strh	r3, [r7, #30]
      break;
 8004302:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <BSP_LCD_DisplayStringAt+0xb6>
 800430a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da15      	bge.n	800433e <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8004316:	e012      	b.n	800433e <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	89b9      	ldrh	r1, [r7, #12]
 800431e:	8bfb      	ldrh	r3, [r7, #30]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff71 	bl	8004208 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <BSP_LCD_DisplayStringAt+0x128>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	889a      	ldrh	r2, [r3, #4]
 800432c:	8bfb      	ldrh	r3, [r7, #30]
 800432e:	4413      	add	r3, r2
 8004330:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3301      	adds	r3, #1
 8004336:	60bb      	str	r3, [r7, #8]
    i++;
 8004338:	8bbb      	ldrh	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2dc      	uxtb	r4, r3
 800434c:	f7ff fede 	bl	800410c <BSP_LCD_GetXSize>
 8004350:	4601      	mov	r1, r0
 8004352:	8bbb      	ldrh	r3, [r7, #28]
 8004354:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <BSP_LCD_DisplayStringAt+0x128>)
 8004356:	6892      	ldr	r2, [r2, #8]
 8004358:	8892      	ldrh	r2, [r2, #4]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	1acb      	subs	r3, r1, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <BSP_LCD_DisplayStringAt+0x128>)
 8004364:	6892      	ldr	r2, [r2, #8]
 8004366:	8892      	ldrh	r2, [r2, #4]
 8004368:	4293      	cmp	r3, r2
 800436a:	bf2c      	ite	cs
 800436c:	2301      	movcs	r3, #1
 800436e:	2300      	movcc	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	4023      	ands	r3, r4
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ce      	bne.n	8004318 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	3724      	adds	r7, #36	; 0x24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd90      	pop	{r4, r7, pc}
 8004384:	20000640 	.word	0x20000640

08004388 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
 8004392:	460b      	mov	r3, r1
 8004394:	80bb      	strh	r3, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <BSP_LCD_DrawPixel+0x34>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <BSP_LCD_DrawPixel+0x34>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	88b9      	ldrh	r1, [r7, #4]
 80043ae:	88f8      	ldrh	r0, [r7, #6]
 80043b0:	4798      	blx	r3
  }
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2000064c 	.word	0x2000064c

080043c0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	80fb      	strh	r3, [r7, #6]
 80043ca:	460b      	mov	r3, r1
 80043cc:	80bb      	strh	r3, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <BSP_LCD_DrawHLine+0x6c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <BSP_LCD_DrawHLine+0x6c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a1c      	ldr	r4, [r3, #32]
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <BSP_LCD_DrawHLine+0x70>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b298      	uxth	r0, r3
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	88ba      	ldrh	r2, [r7, #4]
 80043f0:	88f9      	ldrh	r1, [r7, #6]
 80043f2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80043f4:	e015      	b.n	8004422 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	e00e      	b.n	800441a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	4413      	add	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <BSP_LCD_DrawHLine+0x70>)
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	b292      	uxth	r2, r2
 800440c:	88b9      	ldrh	r1, [r7, #4]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ffba 	bl	8004388 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	429a      	cmp	r2, r3
 8004420:	d3ec      	bcc.n	80043fc <BSP_LCD_DrawHLine+0x3c>
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}
 800442a:	bf00      	nop
 800442c:	2000064c 	.word	0x2000064c
 8004430:	20000640 	.word	0x20000640

08004434 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	6313      	str	r3, [r2, #48]	; 0x30
 800444a:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	4a20      	ldr	r2, [pc, #128]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	6313      	str	r3, [r2, #48]	; 0x30
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 800447c:	f043 0310 	orr.w	r3, r3, #16
 8004480:	6313      	str	r3, [r2, #48]	; 0x30
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <BSP_LCD_MspInit+0xac>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800448e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004492:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004498:	2302      	movs	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800449c:	2301      	movs	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	4619      	mov	r1, r3
 80044a6:	480f      	ldr	r0, [pc, #60]	; (80044e4 <BSP_LCD_MspInit+0xb0>)
 80044a8:	f001 f958 	bl	800575c <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80044ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80044b6:	f107 030c 	add.w	r3, r7, #12
 80044ba:	4619      	mov	r1, r3
 80044bc:	4809      	ldr	r0, [pc, #36]	; (80044e4 <BSP_LCD_MspInit+0xb0>)
 80044be:	f001 f94d 	bl	800575c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80044c2:	2320      	movs	r3, #32
 80044c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80044c6:	2301      	movs	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	4619      	mov	r1, r3
 80044d0:	4805      	ldr	r0, [pc, #20]	; (80044e8 <BSP_LCD_MspInit+0xb4>)
 80044d2:	f001 f943 	bl	800575c <HAL_GPIO_Init>
}
 80044d6:	bf00      	nop
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40021000 	.word	0x40021000

080044ec <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	603a      	str	r2, [r7, #0]
 80044f6:	80fb      	strh	r3, [r7, #6]
 80044f8:	460b      	mov	r3, r1
 80044fa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <DrawChar+0x130>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	88db      	ldrh	r3, [r3, #6]
 800450a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800450c:	4b43      	ldr	r3, [pc, #268]	; (800461c <DrawChar+0x130>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	889b      	ldrh	r3, [r3, #4]
 8004512:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004514:	8a3b      	ldrh	r3, [r7, #16]
 8004516:	3307      	adds	r3, #7
 8004518:	2b00      	cmp	r3, #0
 800451a:	da00      	bge.n	800451e <DrawChar+0x32>
 800451c:	3307      	adds	r3, #7
 800451e:	10db      	asrs	r3, r3, #3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	b2da      	uxtb	r2, r3
 8004526:	8a3b      	ldrh	r3, [r7, #16]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e069      	b.n	8004608 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004534:	8a3b      	ldrh	r3, [r7, #16]
 8004536:	3307      	adds	r3, #7
 8004538:	2b00      	cmp	r3, #0
 800453a:	da00      	bge.n	800453e <DrawChar+0x52>
 800453c:	3307      	adds	r3, #7
 800453e:	10db      	asrs	r3, r3, #3
 8004540:	461a      	mov	r2, r3
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	4413      	add	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800454e:	8a3b      	ldrh	r3, [r7, #16]
 8004550:	3307      	adds	r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	da00      	bge.n	8004558 <DrawChar+0x6c>
 8004556:	3307      	adds	r3, #7
 8004558:	10db      	asrs	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d002      	beq.n	8004564 <DrawChar+0x78>
 800455e:	2b02      	cmp	r3, #2
 8004560:	d004      	beq.n	800456c <DrawChar+0x80>
 8004562:	e00c      	b.n	800457e <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]
      break;    
 800456a:	e016      	b.n	800459a <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	3201      	adds	r2, #1
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
      break;
 800457c:	e00d      	b.n	800459a <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	041a      	lsls	r2, r3, #16
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3301      	adds	r3, #1
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	4313      	orrs	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	3202      	adds	r2, #2
 8004592:	7812      	ldrb	r2, [r2, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
      break;
 8004598:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e029      	b.n	80045f4 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80045a0:	8a3a      	ldrh	r2, [r7, #16]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	4413      	add	r3, r2
 80045aa:	3b01      	subs	r3, #1
 80045ac:	2201      	movs	r2, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4413      	add	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <DrawChar+0x130>)
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	b292      	uxth	r2, r2
 80045cc:	88b9      	ldrh	r1, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff feda 	bl	8004388 <BSP_LCD_DrawPixel>
 80045d4:	e00b      	b.n	80045ee <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	4413      	add	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4a0e      	ldr	r2, [pc, #56]	; (800461c <DrawChar+0x130>)
 80045e2:	6852      	ldr	r2, [r2, #4]
 80045e4:	b292      	uxth	r2, r2
 80045e6:	88b9      	ldrh	r1, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fecd 	bl	8004388 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	3301      	adds	r3, #1
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	8a3b      	ldrh	r3, [r7, #16]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3d1      	bcc.n	80045a0 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80045fc:	88bb      	ldrh	r3, [r7, #4]
 80045fe:	3301      	adds	r3, #1
 8004600:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	8a7b      	ldrh	r3, [r7, #18]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	429a      	cmp	r2, r3
 800460e:	d391      	bcc.n	8004534 <DrawChar+0x48>
  }
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000640 	.word	0x20000640

08004620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_Init+0x40>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_Init+0x40>)
 800462a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800462e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_Init+0x40>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <HAL_Init+0x40>)
 8004636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800463a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_Init+0x40>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a07      	ldr	r2, [pc, #28]	; (8004660 <HAL_Init+0x40>)
 8004642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004648:	2003      	movs	r0, #3
 800464a:	f000 fb6e 	bl	8004d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800464e:	200f      	movs	r0, #15
 8004650:	f7fe fe32 	bl	80032b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004654:	f7fd fefa 	bl	800244c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00

08004664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_IncTick+0x20>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_IncTick+0x24>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4413      	add	r3, r2
 8004674:	4a04      	ldr	r2, [pc, #16]	; (8004688 <HAL_IncTick+0x24>)
 8004676:	6013      	str	r3, [r2, #0]
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	2000006c 	.word	0x2000006c
 8004688:	20000650 	.word	0x20000650

0800468c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return uwTick;
 8004690:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_GetTick+0x14>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000650 	.word	0x20000650

080046a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046ac:	f7ff ffee 	bl	800468c <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d005      	beq.n	80046ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_Delay+0x44>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ca:	bf00      	nop
 80046cc:	f7ff ffde 	bl	800468c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d8f7      	bhi.n	80046cc <HAL_Delay+0x28>
  {
  }
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	2000006c 	.word	0x2000006c

080046ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e033      	b.n	800476a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fd feca 	bl	80024a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d118      	bne.n	800475c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004732:	f023 0302 	bic.w	r3, r3, #2
 8004736:	f043 0202 	orr.w	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f94a 	bl	80049d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
 800475a:	e001      	b.n	8004760 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e113      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x244>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b09      	cmp	r3, #9
 800479e:	d925      	bls.n	80047ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	3b1e      	subs	r3, #30
 80047b6:	2207      	movs	r2, #7
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43da      	mvns	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	400a      	ands	r2, r1
 80047c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68d9      	ldr	r1, [r3, #12]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	4603      	mov	r3, r0
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4403      	add	r3, r0
 80047de:	3b1e      	subs	r3, #30
 80047e0:	409a      	lsls	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e022      	b.n	8004832 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6919      	ldr	r1, [r3, #16]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	2207      	movs	r2, #7
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43da      	mvns	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	400a      	ands	r2, r1
 800480e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	4618      	mov	r0, r3
 8004822:	4603      	mov	r3, r0
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4403      	add	r3, r0
 8004828:	409a      	lsls	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b06      	cmp	r3, #6
 8004838:	d824      	bhi.n	8004884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	3b05      	subs	r3, #5
 800484c:	221f      	movs	r2, #31
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	400a      	ands	r2, r1
 800485a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	4618      	mov	r0, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	3b05      	subs	r3, #5
 8004876:	fa00 f203 	lsl.w	r2, r0, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	635a      	str	r2, [r3, #52]	; 0x34
 8004882:	e04c      	b.n	800491e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b0c      	cmp	r3, #12
 800488a:	d824      	bhi.n	80048d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	3b23      	subs	r3, #35	; 0x23
 800489e:	221f      	movs	r2, #31
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43da      	mvns	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	400a      	ands	r2, r1
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4618      	mov	r0, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	3b23      	subs	r3, #35	; 0x23
 80048c8:	fa00 f203 	lsl.w	r2, r0, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
 80048d4:	e023      	b.n	800491e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	3b41      	subs	r3, #65	; 0x41
 80048e8:	221f      	movs	r2, #31
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43da      	mvns	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	400a      	ands	r2, r1
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	4618      	mov	r0, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	3b41      	subs	r3, #65	; 0x41
 8004912:	fa00 f203 	lsl.w	r2, r0, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800491e:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <HAL_ADC_ConfigChannel+0x250>)
 8004920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a28      	ldr	r2, [pc, #160]	; (80049c8 <HAL_ADC_ConfigChannel+0x254>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10f      	bne.n	800494c <HAL_ADC_ConfigChannel+0x1d8>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b12      	cmp	r3, #18
 8004932:	d10b      	bne.n	800494c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_ADC_ConfigChannel+0x254>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d12b      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x23a>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_ADC_ConfigChannel+0x258>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <HAL_ADC_ConfigChannel+0x1f4>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b11      	cmp	r3, #17
 8004966:	d122      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <HAL_ADC_ConfigChannel+0x258>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d111      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_ADC_ConfigChannel+0x25c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <HAL_ADC_ConfigChannel+0x260>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	0c9a      	lsrs	r2, r3, #18
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049a0:	e002      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f9      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40012300 	.word	0x40012300
 80049c8:	40012000 	.word	0x40012000
 80049cc:	10000012 	.word	0x10000012
 80049d0:	20000010 	.word	0x20000010
 80049d4:	431bde83 	.word	0x431bde83

080049d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049e0:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <ADC_Init+0x1f0>)
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	021a      	lsls	r2, r3, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6899      	ldr	r1, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <ADC_Init+0x1f4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6899      	ldr	r1, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e00f      	b.n	8004ad6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0202 	bic.w	r2, r2, #2
 8004ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6899      	ldr	r1, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7e1b      	ldrb	r3, [r3, #24]
 8004af0:	005a      	lsls	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	035a      	lsls	r2, r3, #13
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	e007      	b.n	8004b4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	051a      	lsls	r2, r3, #20
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b8e:	025a      	lsls	r2, r3, #9
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6899      	ldr	r1, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	029a      	lsls	r2, r3, #10
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40012300 	.word	0x40012300
 8004bcc:	0f000001 	.word	0x0f000001

08004bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	60d3      	str	r3, [r2, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <__NVIC_GetPriorityGrouping+0x18>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0307 	and.w	r3, r3, #7
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	db0b      	blt.n	8004c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	f003 021f 	and.w	r2, r3, #31
 8004c4c:	4907      	ldr	r1, [pc, #28]	; (8004c6c <__NVIC_EnableIRQ+0x38>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2001      	movs	r0, #1
 8004c56:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	6039      	str	r1, [r7, #0]
 8004c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db0a      	blt.n	8004c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	490c      	ldr	r1, [pc, #48]	; (8004cbc <__NVIC_SetPriority+0x4c>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	440b      	add	r3, r1
 8004c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c98:	e00a      	b.n	8004cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <__NVIC_SetPriority+0x50>)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	0112      	lsls	r2, r2, #4
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	440b      	add	r3, r1
 8004cae:	761a      	strb	r2, [r3, #24]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000e100 	.word	0xe000e100
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf28      	it	cs
 8004ce2:	2304      	movcs	r3, #4
 8004ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d902      	bls.n	8004cf4 <NVIC_EncodePriority+0x30>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	e000      	b.n	8004cf6 <NVIC_EncodePriority+0x32>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	401a      	ands	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	43d9      	mvns	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	4313      	orrs	r3, r2
         );
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	; 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ff4c 	bl	8004bd0 <__NVIC_SetPriorityGrouping>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d52:	f7ff ff61 	bl	8004c18 <__NVIC_GetPriorityGrouping>
 8004d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	6978      	ldr	r0, [r7, #20]
 8004d5e:	f7ff ffb1 	bl	8004cc4 <NVIC_EncodePriority>
 8004d62:	4602      	mov	r2, r0
 8004d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff80 	bl	8004c70 <__NVIC_SetPriority>
}
 8004d70:	bf00      	nop
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff ff54 	bl	8004c34 <__NVIC_EnableIRQ>
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e014      	b.n	8004dd0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd fbf0 	bl	800259c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01d      	beq.n	8004e36 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d018      	beq.n	8004e36 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2204      	movs	r2, #4
 8004e08:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f043 0201 	orr.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f827 	bl	8004e84 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01d      	beq.n	8004e7c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f043 0202 	orr.w	r2, r3, #2
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e74:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f867 	bl	8004f4a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_DAC_ConfigChannel+0x1c>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e042      	b.n	8004f3e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	795b      	ldrb	r3, [r3, #5]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DAC_ConfigChannel+0x2c>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e03c      	b.n	8004f3e <HAL_DAC_ConfigChannel+0xa6>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	22c0      	movs	r2, #192	; 0xc0
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43da      	mvns	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0cf      	b.n	8005112 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a69      	ldr	r2, [pc, #420]	; (800511c <HAL_DFSDM_ChannelInit+0x1bc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_DFSDM_ChannelInit+0x3a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a67      	ldr	r2, [pc, #412]	; (8005120 <HAL_DFSDM_ChannelInit+0x1c0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_DFSDM_ChannelInit+0x3a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a66      	ldr	r2, [pc, #408]	; (8005124 <HAL_DFSDM_ChannelInit+0x1c4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_DFSDM_ChannelInit+0x3a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a64      	ldr	r2, [pc, #400]	; (8005128 <HAL_DFSDM_ChannelInit+0x1c8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d106      	bne.n	8004fa8 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004f9a:	4b64      	ldr	r3, [pc, #400]	; (800512c <HAL_DFSDM_ChannelInit+0x1cc>)
 8004f9c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8004f9e:	4b64      	ldr	r3, [pc, #400]	; (8005130 <HAL_DFSDM_ChannelInit+0x1d0>)
 8004fa0:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8004fa2:	4b5e      	ldr	r3, [pc, #376]	; (800511c <HAL_DFSDM_ChannelInit+0x1bc>)
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e005      	b.n	8004fb4 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004fa8:	4b62      	ldr	r3, [pc, #392]	; (8005134 <HAL_DFSDM_ChannelInit+0x1d4>)
 8004faa:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004fac:	4b62      	ldr	r3, [pc, #392]	; (8005138 <HAL_DFSDM_ChannelInit+0x1d8>)
 8004fae:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8004fb0:	4b62      	ldr	r3, [pc, #392]	; (800513c <HAL_DFSDM_ChannelInit+0x1dc>)
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f9f3 	bl	80053a4 <DFSDM_GetChannelFromInstance>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0a0      	b.n	8005112 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fd fbcb 	bl	800276c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d125      	bne.n	8005034 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d108      	bne.n	8005028 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	3b01      	subs	r3, #1
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	431a      	orrs	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005042:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005052:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005058:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 020f 	bic.w	r2, r2, #15
 8005070:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6819      	ldr	r1, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005098:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6899      	ldr	r1, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f002 0207 	and.w	r2, r2, #7
 80050c4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050f0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f950 	bl	80053a4 <DFSDM_GetChannelFromInstance>
 8005104:	4603      	mov	r3, r0
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40016000 	.word	0x40016000
 8005120:	40016020 	.word	0x40016020
 8005124:	40016040 	.word	0x40016040
 8005128:	40016060 	.word	0x40016060
 800512c:	20000654 	.word	0x20000654
 8005130:	20000658 	.word	0x20000658
 8005134:	20000668 	.word	0x20000668
 8005138:	2000066c 	.word	0x2000066c
 800513c:	40016400 	.word	0x40016400

08005140 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0d9      	b.n	8005306 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a6e      	ldr	r2, [pc, #440]	; (8005310 <HAL_DFSDM_FilterInit+0x1d0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8005160:	2b01      	cmp	r3, #1
 8005162:	d003      	beq.n	800516c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0ca      	b.n	8005306 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) &&
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a67      	ldr	r2, [pc, #412]	; (8005314 <HAL_DFSDM_FilterInit+0x1d4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d109      	bne.n	800518e <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) &&
 800517e:	2b01      	cmp	r3, #1
 8005180:	d003      	beq.n	800518a <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0bb      	b.n	8005306 <HAL_DFSDM_FilterInit+0x1c6>
  }
#endif /* DFSDM2_Channel0 */

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fa44 	bl	8002634 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80051ba:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7a1b      	ldrb	r3, [r3, #8]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d108      	bne.n	80051d6 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e007      	b.n	80051e6 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80051e4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7a5b      	ldrb	r3, [r3, #9]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d108      	bne.n	8005200 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e007      	b.n	8005210 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800520e:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800521e:	f023 0308 	bic.w	r3, r3, #8
 8005222:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d108      	bne.n	800523e <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	7c1b      	ldrb	r3, [r3, #16]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d108      	bne.n	8005258 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0210 	orr.w	r2, r2, #16
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e007      	b.n	8005268 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0210 	bic.w	r2, r2, #16
 8005266:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7c5b      	ldrb	r3, [r3, #17]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d108      	bne.n	8005282 <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0220 	orr.w	r2, r2, #32
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e007      	b.n	8005292 <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0220 	bic.w	r2, r2, #32
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80052a0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80052a4:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6959      	ldr	r1, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80052b8:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80052c0:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7c1a      	ldrb	r2, [r3, #16]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40016100 	.word	0x40016100
 8005314:	40016500 	.word	0x40016500

08005318 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02e      	beq.n	8005390 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005338:	2bff      	cmp	r3, #255	; 0xff
 800533a:	d029      	beq.n	8005390 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800534a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d10d      	bne.n	8005372 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e00a      	b.n	8005388 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
 800538e:	e001      	b.n	8005394 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a24      	ldr	r2, [pc, #144]	; (8005440 <DFSDM_GetChannelFromInstance+0x9c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <DFSDM_GetChannelFromInstance+0x18>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a23      	ldr	r2, [pc, #140]	; (8005444 <DFSDM_GetChannelFromInstance+0xa0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d102      	bne.n	80053c2 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e037      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <DFSDM_GetChannelFromInstance+0xa4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <DFSDM_GetChannelFromInstance+0x2e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a1f      	ldr	r2, [pc, #124]	; (800544c <DFSDM_GetChannelFromInstance+0xa8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d102      	bne.n	80053d8 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80053d2:	2301      	movs	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e02c      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <DFSDM_GetChannelFromInstance+0xac>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <DFSDM_GetChannelFromInstance+0x44>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <DFSDM_GetChannelFromInstance+0xb0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d102      	bne.n	80053ee <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80053e8:	2302      	movs	r3, #2
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e021      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a19      	ldr	r2, [pc, #100]	; (8005458 <DFSDM_GetChannelFromInstance+0xb4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <DFSDM_GetChannelFromInstance+0x5a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a18      	ldr	r2, [pc, #96]	; (800545c <DFSDM_GetChannelFromInstance+0xb8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d102      	bne.n	8005404 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80053fe:	2303      	movs	r3, #3
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e016      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <DFSDM_GetChannelFromInstance+0xbc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d102      	bne.n	8005412 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 800540c:	2304      	movs	r3, #4
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e00f      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <DFSDM_GetChannelFromInstance+0xc0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d102      	bne.n	8005420 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800541a:	2305      	movs	r3, #5
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e008      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a11      	ldr	r2, [pc, #68]	; (8005468 <DFSDM_GetChannelFromInstance+0xc4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d102      	bne.n	800542e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8005428:	2306      	movs	r3, #6
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e001      	b.n	8005432 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800542e:	2307      	movs	r3, #7
 8005430:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40016000 	.word	0x40016000
 8005444:	40016400 	.word	0x40016400
 8005448:	40016020 	.word	0x40016020
 800544c:	40016420 	.word	0x40016420
 8005450:	40016040 	.word	0x40016040
 8005454:	40016440 	.word	0x40016440
 8005458:	40016060 	.word	0x40016060
 800545c:	40016460 	.word	0x40016460
 8005460:	40016480 	.word	0x40016480
 8005464:	400164a0 	.word	0x400164a0
 8005468:	400164c0 	.word	0x400164c0

0800546c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800547a:	f7ff f907 	bl	800468c <HAL_GetTick>
 800547e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d008      	beq.n	800549e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e052      	b.n	8005544 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0216 	bic.w	r2, r2, #22
 80054ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <HAL_DMA_Abort+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0208 	bic.w	r2, r2, #8
 80054dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ee:	e013      	b.n	8005518 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054f0:	f7ff f8cc 	bl	800468c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d90c      	bls.n	8005518 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e015      	b.n	8005544 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e4      	bne.n	80054f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552a:	223f      	movs	r2, #63	; 0x3f
 800552c:	409a      	lsls	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d004      	beq.n	800556a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2280      	movs	r2, #128	; 0x80
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e00c      	b.n	8005584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2205      	movs	r2, #5
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e08d      	b.n	80056be <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fd fa34 	bl	8002a24 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055f0:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	e006      	b.n	8005618 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005616:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d108      	bne.n	8005632 <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	e007      	b.n	8005642 <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005640:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005654:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005664:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69d9      	ldr	r1, [r3, #28]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d138      	bne.n	800574e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e032      	b.n	8005750 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2224      	movs	r2, #36	; 0x24
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005718:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6819      	ldr	r1, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800574e:	2302      	movs	r3, #2
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800575c:	b480      	push	{r7}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	e165      	b.n	8005a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005778:	2201      	movs	r2, #1
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4013      	ands	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	f040 8154 	bne.w	8005a3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d005      	beq.n	80057ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d130      	bne.n	8005810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	2203      	movs	r2, #3
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e4:	2201      	movs	r2, #1
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	f003 0201 	and.w	r2, r3, #1
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	2b03      	cmp	r3, #3
 800581a:	d017      	beq.n	800584c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2203      	movs	r2, #3
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d123      	bne.n	80058a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	08da      	lsrs	r2, r3, #3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3208      	adds	r2, #8
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	220f      	movs	r2, #15
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	08da      	lsrs	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3208      	adds	r2, #8
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	2203      	movs	r2, #3
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0203 	and.w	r2, r3, #3
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80ae 	beq.w	8005a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <HAL_GPIO_Init+0x300>)
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	4a5c      	ldr	r2, [pc, #368]	; (8005a5c <HAL_GPIO_Init+0x300>)
 80058ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f0:	6453      	str	r3, [r2, #68]	; 0x44
 80058f2:	4b5a      	ldr	r3, [pc, #360]	; (8005a5c <HAL_GPIO_Init+0x300>)
 80058f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058fe:	4a58      	ldr	r2, [pc, #352]	; (8005a60 <HAL_GPIO_Init+0x304>)
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	089b      	lsrs	r3, r3, #2
 8005904:	3302      	adds	r3, #2
 8005906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	220f      	movs	r2, #15
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a4f      	ldr	r2, [pc, #316]	; (8005a64 <HAL_GPIO_Init+0x308>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d025      	beq.n	8005976 <HAL_GPIO_Init+0x21a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a4e      	ldr	r2, [pc, #312]	; (8005a68 <HAL_GPIO_Init+0x30c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01f      	beq.n	8005972 <HAL_GPIO_Init+0x216>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a4d      	ldr	r2, [pc, #308]	; (8005a6c <HAL_GPIO_Init+0x310>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d019      	beq.n	800596e <HAL_GPIO_Init+0x212>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4c      	ldr	r2, [pc, #304]	; (8005a70 <HAL_GPIO_Init+0x314>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_GPIO_Init+0x20e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a4b      	ldr	r2, [pc, #300]	; (8005a74 <HAL_GPIO_Init+0x318>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00d      	beq.n	8005966 <HAL_GPIO_Init+0x20a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a4a      	ldr	r2, [pc, #296]	; (8005a78 <HAL_GPIO_Init+0x31c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <HAL_GPIO_Init+0x206>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a49      	ldr	r2, [pc, #292]	; (8005a7c <HAL_GPIO_Init+0x320>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d101      	bne.n	800595e <HAL_GPIO_Init+0x202>
 800595a:	2306      	movs	r3, #6
 800595c:	e00c      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 800595e:	2307      	movs	r3, #7
 8005960:	e00a      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 8005962:	2305      	movs	r3, #5
 8005964:	e008      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 8005966:	2304      	movs	r3, #4
 8005968:	e006      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 800596a:	2303      	movs	r3, #3
 800596c:	e004      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 800596e:	2302      	movs	r3, #2
 8005970:	e002      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_GPIO_Init+0x21c>
 8005976:	2300      	movs	r3, #0
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	f002 0203 	and.w	r2, r2, #3
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	4093      	lsls	r3, r2
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005988:	4935      	ldr	r1, [pc, #212]	; (8005a60 <HAL_GPIO_Init+0x304>)
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	089b      	lsrs	r3, r3, #2
 800598e:	3302      	adds	r3, #2
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005996:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <HAL_GPIO_Init+0x324>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	43db      	mvns	r3, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ba:	4a31      	ldr	r2, [pc, #196]	; (8005a80 <HAL_GPIO_Init+0x324>)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c0:	4b2f      	ldr	r3, [pc, #188]	; (8005a80 <HAL_GPIO_Init+0x324>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <HAL_GPIO_Init+0x324>)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059ea:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <HAL_GPIO_Init+0x324>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4013      	ands	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <HAL_GPIO_Init+0x324>)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a14:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <HAL_GPIO_Init+0x324>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4013      	ands	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a38:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <HAL_GPIO_Init+0x324>)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3301      	adds	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b0f      	cmp	r3, #15
 8005a48:	f67f ae96 	bls.w	8005778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40013800 	.word	0x40013800
 8005a64:	40020000 	.word	0x40020000
 8005a68:	40020400 	.word	0x40020400
 8005a6c:	40020800 	.word	0x40020800
 8005a70:	40020c00 	.word	0x40020c00
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40021400 	.word	0x40021400
 8005a7c:	40021800 	.word	0x40021800
 8005a80:	40013c00 	.word	0x40013c00

08005a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
 8005a90:	4613      	mov	r3, r2
 8005a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a94:	787b      	ldrb	r3, [r7, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aa0:	e003      	b.n	8005aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	041a      	lsls	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af02      	add	r7, sp, #8
 8005abc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e059      	b.n	8005b7c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f00d fab6 	bl	8013054 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2203      	movs	r2, #3
 8005aec:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af6:	d102      	bne.n	8005afe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f006 fae7 	bl	800c0d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	7c1a      	ldrb	r2, [r3, #16]
 8005b10:	f88d 2000 	strb.w	r2, [sp]
 8005b14:	3304      	adds	r3, #4
 8005b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b18:	f006 fa68 	bl	800bfec <USB_CoreInit>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e026      	b.n	8005b7c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2101      	movs	r1, #1
 8005b34:	4618      	mov	r0, r3
 8005b36:	f006 fadf 	bl	800c0f8 <USB_SetCurrentMode>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e017      	b.n	8005b7c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	7c1a      	ldrb	r2, [r3, #16]
 8005b54:	f88d 2000 	strb.w	r2, [sp]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b5c:	f006 fc82 	bl	800c464 <USB_HostInit>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e004      	b.n	8005b7c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b08b      	sub	sp, #44	; 0x2c
 8005b88:	af04      	add	r7, sp, #16
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	70fb      	strb	r3, [r7, #3]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70bb      	strb	r3, [r7, #2]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005b9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ba0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_HCD_HC_Init+0x2c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e09d      	b.n	8005cec <HAL_HCD_HC_Init+0x168>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3319      	adds	r3, #25
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3314      	adds	r3, #20
 8005bdc:	787a      	ldrb	r2, [r7, #1]
 8005bde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	3315      	adds	r3, #21
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	3326      	adds	r3, #38	; 0x26
 8005c04:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005c08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	78bb      	ldrb	r3, [r7, #2]
 8005c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c12:	b2d8      	uxtb	r0, r3
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3316      	adds	r3, #22
 8005c22:	4602      	mov	r2, r0
 8005c24:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fbc8 	bl	80063c0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005c30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da0a      	bge.n	8005c4e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	3317      	adds	r3, #23
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e009      	b.n	8005c62 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3317      	adds	r3, #23
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f006 fd44 	bl	800c6f4 <USB_GetHostSpeed>
 8005c6c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10b      	bne.n	8005c8e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d107      	bne.n	8005c8e <HAL_HCD_HC_Init+0x10a>
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2bbc      	cmp	r3, #188	; 0xbc
 8005c88:	d901      	bls.n	8005c8e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005c8a:	23bc      	movs	r3, #188	; 0xbc
 8005c8c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	b298      	uxth	r0, r3
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	3328      	adds	r3, #40	; 0x28
 8005cb8:	4602      	mov	r2, r0
 8005cba:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	787c      	ldrb	r4, [r7, #1]
 8005cc6:	78ba      	ldrb	r2, [r7, #2]
 8005cc8:	78f9      	ldrb	r1, [r7, #3]
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4623      	mov	r3, r4
 8005cda:	f006 fd33 	bl	800c744 <USB_HC_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}

08005cf4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_HCD_HC_Halt+0x1e>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e00f      	b.n	8005d32 <HAL_HCD_HC_Halt+0x3e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	4611      	mov	r1, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f007 f879 	bl	800ce1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70bb      	strb	r3, [r7, #2]
 8005d52:	4613      	mov	r3, r2
 8005d54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3317      	adds	r3, #23
 8005d66:	78ba      	ldrb	r2, [r7, #2]
 8005d68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	3326      	adds	r3, #38	; 0x26
 8005d7a:	787a      	ldrb	r2, [r7, #1]
 8005d7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005d7e:	7c3b      	ldrb	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d114      	bne.n	8005dae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	332a      	adds	r3, #42	; 0x2a
 8005d94:	2203      	movs	r2, #3
 8005d96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	3319      	adds	r3, #25
 8005da8:	7f3a      	ldrb	r2, [r7, #28]
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e009      	b.n	8005dc2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	332a      	adds	r3, #42	; 0x2a
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005dc2:	787b      	ldrb	r3, [r7, #1]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	f200 8102 	bhi.w	8005fce <HAL_HCD_HC_SubmitRequest+0x292>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005fb9 	.word	0x08005fb9
 8005dd8:	08005ea5 	.word	0x08005ea5
 8005ddc:	08005f2f 	.word	0x08005f2f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005de0:	7c3b      	ldrb	r3, [r7, #16]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	f040 80f5 	bne.w	8005fd2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005de8:	78bb      	ldrb	r3, [r7, #2]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d12d      	bne.n	8005e4a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005dee:	8b3b      	ldrh	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	333d      	adds	r3, #61	; 0x3d
 8005e04:	2201      	movs	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	333d      	adds	r3, #61	; 0x3d
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	332a      	adds	r3, #42	; 0x2a
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005e32:	e0ce      	b.n	8005fd2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	1a9b      	subs	r3, r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	332a      	adds	r3, #42	; 0x2a
 8005e44:	2202      	movs	r2, #2
 8005e46:	701a      	strb	r2, [r3, #0]
      break;
 8005e48:	e0c3      	b.n	8005fd2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	331a      	adds	r3, #26
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 80b8 	bne.w	8005fd2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	333c      	adds	r3, #60	; 0x3c
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	332a      	adds	r3, #42	; 0x2a
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
      break;
 8005e8c:	e0a1      	b.n	8005fd2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	332a      	adds	r3, #42	; 0x2a
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	701a      	strb	r2, [r3, #0]
      break;
 8005ea2:	e096      	b.n	8005fd2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005ea4:	78bb      	ldrb	r3, [r7, #2]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d120      	bne.n	8005eec <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	333d      	adds	r3, #61	; 0x3d
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	332a      	adds	r3, #42	; 0x2a
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005ed4:	e07e      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	332a      	adds	r3, #42	; 0x2a
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	701a      	strb	r2, [r3, #0]
      break;
 8005eea:	e073      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	333c      	adds	r3, #60	; 0x3c
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	332a      	adds	r3, #42	; 0x2a
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
      break;
 8005f16:	e05d      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	332a      	adds	r3, #42	; 0x2a
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]
      break;
 8005f2c:	e052      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005f2e:	78bb      	ldrb	r3, [r7, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d120      	bne.n	8005f76 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	333d      	adds	r3, #61	; 0x3d
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	332a      	adds	r3, #42	; 0x2a
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005f5e:	e039      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	332a      	adds	r3, #42	; 0x2a
 8005f70:	2202      	movs	r2, #2
 8005f72:	701a      	strb	r2, [r3, #0]
      break;
 8005f74:	e02e      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	333c      	adds	r3, #60	; 0x3c
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	332a      	adds	r3, #42	; 0x2a
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
      break;
 8005fa0:	e018      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	332a      	adds	r3, #42	; 0x2a
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	701a      	strb	r2, [r3, #0]
      break;
 8005fb6:	e00d      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	332a      	adds	r3, #42	; 0x2a
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
      break;
 8005fcc:	e002      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8005fd2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	332c      	adds	r3, #44	; 0x2c
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	8b39      	ldrh	r1, [r7, #24]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4403      	add	r3, r0
 8005ff8:	3334      	adds	r3, #52	; 0x34
 8005ffa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	334c      	adds	r3, #76	; 0x4c
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	3338      	adds	r3, #56	; 0x38
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	3315      	adds	r3, #21
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006038:	78fa      	ldrb	r2, [r7, #3]
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	334d      	adds	r3, #77	; 0x4d
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	3310      	adds	r3, #16
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	4413      	add	r3, r2
 8006060:	1d19      	adds	r1, r3, #4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	799b      	ldrb	r3, [r3, #6]
 8006066:	461a      	mov	r2, r3
 8006068:	f006 fc82 	bl	800c970 <USB_HC_StartXfer>
 800606c:	4603      	mov	r3, r0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop

08006078 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f006 f9a8 	bl	800c3e4 <USB_GetMode>
 8006094:	4603      	mov	r3, r0
 8006096:	2b01      	cmp	r3, #1
 8006098:	f040 80fb 	bne.w	8006292 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f006 f96b 	bl	800c37c <USB_ReadInterrupts>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80f1 	beq.w	8006290 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f006 f962 	bl	800c37c <USB_ReadInterrupts>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060c2:	d104      	bne.n	80060ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80060cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f006 f952 	bl	800c37c <USB_ReadInterrupts>
 80060d8:	4603      	mov	r3, r0
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e2:	d104      	bne.n	80060ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f006 f942 	bl	800c37c <USB_ReadInterrupts>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006102:	d104      	bne.n	800610e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800610c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f006 f932 	bl	800c37c <USB_ReadInterrupts>
 8006118:	4603      	mov	r3, r0
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	d103      	bne.n	800612a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2202      	movs	r2, #2
 8006128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f006 f924 	bl	800c37c <USB_ReadInterrupts>
 8006134:	4603      	mov	r3, r0
 8006136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613e:	d120      	bne.n	8006182 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006148:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d113      	bne.n	8006182 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800615a:	2110      	movs	r1, #16
 800615c:	6938      	ldr	r0, [r7, #16]
 800615e:	f006 f817 	bl	800c190 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006162:	6938      	ldr	r0, [r7, #16]
 8006164:	f006 f846 	bl	800c1f4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	7a5b      	ldrb	r3, [r3, #9]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d105      	bne.n	800617c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2101      	movs	r1, #1
 8006176:	4618      	mov	r0, r3
 8006178:	f006 fa1c 	bl	800c5b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f00c ffef 	bl	8013160 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f006 f8f8 	bl	800c37c <USB_ReadInterrupts>
 800618c:	4603      	mov	r3, r0
 800618e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006196:	d102      	bne.n	800619e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fd4d 	bl	8007c38 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f006 f8ea 	bl	800c37c <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d106      	bne.n	80061c0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f00c ffb8 	bl	8013128 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2208      	movs	r2, #8
 80061be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f006 f8d9 	bl	800c37c <USB_ReadInterrupts>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d4:	d139      	bne.n	800624a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f006 fe0c 	bl	800cdf8 <USB_HC_ReadInterrupt>
 80061e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e025      	b.n	8006234 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d018      	beq.n	800622e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006212:	d106      	bne.n	8006222 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f905 	bl	800642a <HCD_HC_IN_IRQHandler>
 8006220:	e005      	b.n	800622e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 ff67 	bl	80070fc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	3301      	adds	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	795b      	ldrb	r3, [r3, #5]
 8006238:	461a      	mov	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4293      	cmp	r3, r2
 800623e:	d3d3      	bcc.n	80061e8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f006 f894 	bl	800c37c <USB_ReadInterrupts>
 8006254:	4603      	mov	r3, r0
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b10      	cmp	r3, #16
 800625c:	d101      	bne.n	8006262 <HAL_HCD_IRQHandler+0x1ea>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_HCD_IRQHandler+0x1ec>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d014      	beq.n	8006292 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0210 	bic.w	r2, r2, #16
 8006276:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fbfe 	bl	8007a7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0210 	orr.w	r2, r2, #16
 800628c:	619a      	str	r2, [r3, #24]
 800628e:	e000      	b.n	8006292 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006290:	bf00      	nop
    }
  }
}
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_HCD_Start+0x16>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e013      	b.n	80062d6 <HAL_HCD_Start+0x3e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2101      	movs	r1, #1
 80062bc:	4618      	mov	r0, r3
 80062be:	f006 f9e0 	bl	800c682 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f005 fef4 	bl	800c0b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_HCD_Stop+0x16>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e00d      	b.n	8006310 <HAL_HCD_Stop+0x32>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f006 feaa 	bl	800d05a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f006 f982 	bl	800c62e <USB_ResetPort>
 800632a:	4603      	mov	r3, r0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	334c      	adds	r3, #76	; 0x4c
 8006350:	781b      	ldrb	r3, [r3, #0]
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	3338      	adds	r3, #56	; 0x38
 800637a:	681b      	ldr	r3, [r3, #0]
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f006 f9c4 	bl	800c722 <USB_GetCurrentFrame>
 800639a:	4603      	mov	r3, r0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f006 f99f 	bl	800c6f4 <USB_GetHostSpeed>
 80063b6:	4603      	mov	r3, r0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80063cc:	78fa      	ldrb	r2, [r7, #3]
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	331a      	adds	r3, #26
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	331b      	adds	r3, #27
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	3325      	adds	r3, #37	; 0x25
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	2200      	movs	r2, #0
 800641a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f005 ffaa 	bl	800c3a2 <USB_ReadChInterrupts>
 800644e:	4603      	mov	r3, r0
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b04      	cmp	r3, #4
 8006456:	d11a      	bne.n	800648e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006464:	461a      	mov	r2, r3
 8006466:	2304      	movs	r3, #4
 8006468:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	334d      	adds	r3, #77	; 0x4d
 800647a:	2207      	movs	r2, #7
 800647c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f006 fcc7 	bl	800ce1a <USB_HC_Halt>
 800648c:	e09e      	b.n	80065cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f005 ff83 	bl	800c3a2 <USB_ReadChInterrupts>
 800649c:	4603      	mov	r3, r0
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a6:	d11b      	bne.n	80064e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	461a      	mov	r2, r3
 80064b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	334d      	adds	r3, #77	; 0x4d
 80064cc:	2208      	movs	r2, #8
 80064ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f006 fc9e 	bl	800ce1a <USB_HC_Halt>
 80064de:	e075      	b.n	80065cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f005 ff5a 	bl	800c3a2 <USB_ReadChInterrupts>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d11a      	bne.n	800652e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006504:	461a      	mov	r2, r3
 8006506:	2308      	movs	r3, #8
 8006508:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	334d      	adds	r3, #77	; 0x4d
 800651a:	2206      	movs	r2, #6
 800651c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f006 fc77 	bl	800ce1a <USB_HC_Halt>
 800652c:	e04e      	b.n	80065cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f005 ff33 	bl	800c3a2 <USB_ReadChInterrupts>
 800653c:	4603      	mov	r3, r0
 800653e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	d11b      	bne.n	8006580 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	461a      	mov	r2, r3
 8006556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800655a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	334d      	adds	r3, #77	; 0x4d
 800656c:	2209      	movs	r2, #9
 800656e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f006 fc4e 	bl	800ce1a <USB_HC_Halt>
 800657e:	e025      	b.n	80065cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f005 ff0a 	bl	800c3a2 <USB_ReadChInterrupts>
 800658e:	4603      	mov	r3, r0
 8006590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006594:	2b80      	cmp	r3, #128	; 0x80
 8006596:	d119      	bne.n	80065cc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	461a      	mov	r2, r3
 80065a6:	2380      	movs	r3, #128	; 0x80
 80065a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	334d      	adds	r3, #77	; 0x4d
 80065ba:	2207      	movs	r2, #7
 80065bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f006 fc27 	bl	800ce1a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f005 fee4 	bl	800c3a2 <USB_ReadChInterrupts>
 80065da:	4603      	mov	r3, r0
 80065dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e4:	d112      	bne.n	800660c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f006 fc13 	bl	800ce1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	461a      	mov	r2, r3
 8006602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006606:	6093      	str	r3, [r2, #8]
 8006608:	f000 bd75 	b.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	78fa      	ldrb	r2, [r7, #3]
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f005 fec4 	bl	800c3a2 <USB_ReadChInterrupts>
 800661a:	4603      	mov	r3, r0
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 8128 	bne.w	8006876 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	461a      	mov	r2, r3
 8006634:	2320      	movs	r3, #32
 8006636:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	331b      	adds	r3, #27
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d119      	bne.n	8006682 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	331b      	adds	r3, #27
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006680:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	799b      	ldrb	r3, [r3, #6]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01b      	beq.n	80066c2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3330      	adds	r3, #48	; 0x30
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	1ac9      	subs	r1, r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4403      	add	r3, r0
 80066be:	3338      	adds	r3, #56	; 0x38
 80066c0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	334d      	adds	r3, #77	; 0x4d
 80066d2:	2201      	movs	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3344      	adds	r3, #68	; 0x44
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	461a      	mov	r2, r3
 80066f8:	2301      	movs	r3, #1
 80066fa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80066fc:	78fa      	ldrb	r2, [r7, #3]
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	3326      	adds	r3, #38	; 0x26
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3326      	adds	r3, #38	; 0x26
 8006722:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006724:	2b02      	cmp	r3, #2
 8006726:	d110      	bne.n	800674a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	4611      	mov	r1, r2
 8006730:	4618      	mov	r0, r3
 8006732:	f006 fb72 	bl	800ce1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	461a      	mov	r2, r3
 8006744:	2310      	movs	r3, #16
 8006746:	6093      	str	r3, [r2, #8]
 8006748:	e03d      	b.n	80067c6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3326      	adds	r3, #38	; 0x26
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d00a      	beq.n	8006776 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3326      	adds	r3, #38	; 0x26
 8006770:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006772:	2b01      	cmp	r3, #1
 8006774:	d127      	bne.n	80067c6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	78fa      	ldrb	r2, [r7, #3]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	440a      	add	r2, r1
 800678c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006794:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	334c      	adds	r3, #76	; 0x4c
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	334c      	adds	r3, #76	; 0x4c
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f00c fcdb 	bl	801317c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	799b      	ldrb	r3, [r3, #6]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d13b      	bne.n	8006846 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3338      	adds	r3, #56	; 0x38
 80067de:	6819      	ldr	r1, [r3, #0]
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4403      	add	r3, r0
 80067ee:	3328      	adds	r3, #40	; 0x28
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	440b      	add	r3, r1
 80067f4:	1e59      	subs	r1, r3, #1
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4403      	add	r3, r0
 8006804:	3328      	adds	r3, #40	; 0x28
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	fbb1 f3f3 	udiv	r3, r1, r3
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8470 	beq.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	333c      	adds	r3, #60	; 0x3c
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	f083 0301 	eor.w	r3, r3, #1
 800682e:	b2d8      	uxtb	r0, r3
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	333c      	adds	r3, #60	; 0x3c
 800683e:	4602      	mov	r2, r0
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	f000 bc58 	b.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	333c      	adds	r3, #60	; 0x3c
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	f083 0301 	eor.w	r3, r3, #1
 800685e:	b2d8      	uxtb	r0, r3
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	333c      	adds	r3, #60	; 0x3c
 800686e:	4602      	mov	r2, r0
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	f000 bc40 	b.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	78fa      	ldrb	r2, [r7, #3]
 800687c:	4611      	mov	r1, r2
 800687e:	4618      	mov	r0, r3
 8006880:	f005 fd8f 	bl	800c3a2 <USB_ReadChInterrupts>
 8006884:	4603      	mov	r3, r0
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d131      	bne.n	80068f2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	461a      	mov	r2, r3
 800689c:	2320      	movs	r3, #32
 800689e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	331a      	adds	r3, #26
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	f040 841f 	bne.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	331b      	adds	r3, #27
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80068cc:	78fa      	ldrb	r2, [r7, #3]
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	334d      	adds	r3, #77	; 0x4d
 80068dc:	2203      	movs	r2, #3
 80068de:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f006 fa96 	bl	800ce1a <USB_HC_Halt>
 80068ee:	f000 bc02 	b.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f005 fd51 	bl	800c3a2 <USB_ReadChInterrupts>
 8006900:	4603      	mov	r3, r0
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	f040 8305 	bne.w	8006f16 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	461a      	mov	r2, r3
 800691a:	2302      	movs	r3, #2
 800691c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	334d      	adds	r3, #77	; 0x4d
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d114      	bne.n	800695e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	334d      	adds	r3, #77	; 0x4d
 8006944:	2202      	movs	r2, #2
 8006946:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	334c      	adds	r3, #76	; 0x4c
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e2cc      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	334d      	adds	r3, #77	; 0x4d
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b06      	cmp	r3, #6
 8006972:	d114      	bne.n	800699e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	334d      	adds	r3, #77	; 0x4d
 8006984:	2202      	movs	r2, #2
 8006986:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	334c      	adds	r3, #76	; 0x4c
 8006998:	2205      	movs	r2, #5
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e2ac      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	334d      	adds	r3, #77	; 0x4d
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b07      	cmp	r3, #7
 80069b2:	d00b      	beq.n	80069cc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	334d      	adds	r3, #77	; 0x4d
 80069c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	f040 80a6 	bne.w	8006b18 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	334d      	adds	r3, #77	; 0x4d
 80069dc:	2202      	movs	r2, #2
 80069de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	3344      	adds	r3, #68	; 0x44
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4403      	add	r3, r0
 8006a00:	3344      	adds	r3, #68	; 0x44
 8006a02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	3344      	adds	r3, #68	; 0x44
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d943      	bls.n	8006aa2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	3344      	adds	r3, #68	; 0x44
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	331a      	adds	r3, #26
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d123      	bne.n	8006a8c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	331b      	adds	r3, #27
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	331c      	adds	r3, #28
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a8c:	78fa      	ldrb	r2, [r7, #3]
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	334c      	adds	r3, #76	; 0x4c
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006aa0:	e229      	b.n	8006ef6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	334c      	adds	r3, #76	; 0x4c
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3326      	adds	r3, #38	; 0x26
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	3326      	adds	r3, #38	; 0x26
 8006adc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	f040 8209 	bne.w	8006ef6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006afa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b02:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b10:	461a      	mov	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b16:	e1ee      	b.n	8006ef6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	334d      	adds	r3, #77	; 0x4d
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	f040 80c8 	bne.w	8006cc0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	334d      	adds	r3, #77	; 0x4d
 8006b40:	2202      	movs	r2, #2
 8006b42:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	331b      	adds	r3, #27
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f040 81ce 	bne.w	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	3326      	adds	r3, #38	; 0x26
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d16b      	bne.n	8006c4a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3348      	adds	r3, #72	; 0x48
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4403      	add	r3, r0
 8006b92:	3348      	adds	r3, #72	; 0x48
 8006b94:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3348      	adds	r3, #72	; 0x48
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d943      	bls.n	8006c34 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006bac:	78fa      	ldrb	r2, [r7, #3]
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	3348      	adds	r3, #72	; 0x48
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	331b      	adds	r3, #27
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	3344      	adds	r3, #68	; 0x44
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d809      	bhi.n	8006bfe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	331c      	adds	r3, #28
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	1a9b      	subs	r3, r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	334c      	adds	r3, #76	; 0x4c
 8006c2e:	2204      	movs	r2, #4
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e014      	b.n	8006c5e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	334c      	adds	r3, #76	; 0x4c
 8006c44:	2202      	movs	r2, #2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e009      	b.n	8006c5e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	334c      	adds	r3, #76	; 0x4c
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3326      	adds	r3, #38	; 0x26
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3326      	adds	r3, #38	; 0x26
 8006c84:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	f040 8136 	bne.w	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ca2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006caa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e11b      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	334d      	adds	r3, #77	; 0x4d
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	f040 8081 	bne.w	8006dda <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	334d      	adds	r3, #77	; 0x4d
 8006ce8:	2202      	movs	r2, #2
 8006cea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	331b      	adds	r3, #27
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	f040 80fa 	bne.w	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	334c      	adds	r3, #76	; 0x4c
 8006d14:	2202      	movs	r2, #2
 8006d16:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d36:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d56:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	78fa      	ldrb	r2, [r7, #3]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d72:	f023 0320 	bic.w	r3, r3, #32
 8006d76:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	3326      	adds	r3, #38	; 0x26
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	1a9b      	subs	r3, r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3326      	adds	r3, #38	; 0x26
 8006d9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	f040 80a9 	bne.w	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dbc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dc4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	e08e      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	334d      	adds	r3, #77	; 0x4d
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d143      	bne.n	8006e78 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	334d      	adds	r3, #77	; 0x4d
 8006e00:	2202      	movs	r2, #2
 8006e02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	334c      	adds	r3, #76	; 0x4c
 8006e14:	2202      	movs	r2, #2
 8006e16:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	3326      	adds	r3, #38	; 0x26
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3326      	adds	r3, #38	; 0x26
 8006e3e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d159      	bne.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e5a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e70:	461a      	mov	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e03f      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	334d      	adds	r3, #77	; 0x4d
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d126      	bne.n	8006edc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	334d      	adds	r3, #77	; 0x4d
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	3344      	adds	r3, #68	; 0x44
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1c59      	adds	r1, r3, #1
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4403      	add	r3, r0
 8006ec2:	3344      	adds	r3, #68	; 0x44
 8006ec4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	334c      	adds	r3, #76	; 0x4c
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e00d      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	334d      	adds	r3, #77	; 0x4d
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	f000 8100 	beq.w	80070f4 <HCD_HC_IN_IRQHandler+0xcca>
 8006ef4:	e000      	b.n	8006ef8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ef6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	334c      	adds	r3, #76	; 0x4c
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f00c f934 	bl	801317c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006f14:	e0ef      	b.n	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f005 fa3f 	bl	800c3a2 <USB_ReadChInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d12f      	bne.n	8006f8e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	334d      	adds	r3, #77	; 0x4d
 8006f50:	2205      	movs	r2, #5
 8006f52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	331a      	adds	r3, #26
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006f6a:	78fa      	ldrb	r2, [r7, #3]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3344      	adds	r3, #68	; 0x44
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f005 ff47 	bl	800ce1a <USB_HC_Halt>
 8006f8c:	e0b3      	b.n	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	4611      	mov	r1, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f005 fa03 	bl	800c3a2 <USB_ReadChInterrupts>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	f040 80a7 	bne.w	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	3326      	adds	r3, #38	; 0x26
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d11b      	bne.n	8006ff6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	3344      	adds	r3, #68	; 0x44
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8006fd2:	78fa      	ldrb	r2, [r7, #3]
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	334d      	adds	r3, #77	; 0x4d
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	4611      	mov	r1, r2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f005 ff13 	bl	800ce1a <USB_HC_Halt>
 8006ff4:	e03f      	b.n	8007076 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3326      	adds	r3, #38	; 0x26
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	4613      	mov	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	3326      	adds	r3, #38	; 0x26
 800701c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800701e:	2b02      	cmp	r3, #2
 8007020:	d129      	bne.n	8007076 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3344      	adds	r3, #68	; 0x44
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	799b      	ldrb	r3, [r3, #6]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HCD_HC_IN_IRQHandler+0xc2a>
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	331b      	adds	r3, #27
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d110      	bne.n	8007076 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	334d      	adds	r3, #77	; 0x4d
 8007064:	2204      	movs	r2, #4
 8007066:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f005 fed2 	bl	800ce1a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	331b      	adds	r3, #27
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d129      	bne.n	80070e0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	331b      	adds	r3, #27
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	78fa      	ldrb	r2, [r7, #3]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070be:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070da:	f043 0320 	orr.w	r3, r3, #32
 80070de:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ec:	461a      	mov	r2, r3
 80070ee:	2310      	movs	r3, #16
 80070f0:	6093      	str	r3, [r2, #8]
 80070f2:	e000      	b.n	80070f6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80070f4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	4611      	mov	r1, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f005 f941 	bl	800c3a2 <USB_ReadChInterrupts>
 8007120:	4603      	mov	r3, r0
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b04      	cmp	r3, #4
 8007128:	d11b      	bne.n	8007162 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	461a      	mov	r2, r3
 8007138:	2304      	movs	r3, #4
 800713a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	334d      	adds	r3, #77	; 0x4d
 800714c:	2207      	movs	r2, #7
 800714e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f005 fe5e 	bl	800ce1a <USB_HC_Halt>
 800715e:	f000 bc89 	b.w	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f005 f919 	bl	800c3a2 <USB_ReadChInterrupts>
 8007170:	4603      	mov	r3, r0
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b20      	cmp	r3, #32
 8007178:	f040 8082 	bne.w	8007280 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	4413      	add	r3, r2
 8007184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007188:	461a      	mov	r2, r3
 800718a:	2320      	movs	r3, #32
 800718c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3319      	adds	r3, #25
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d124      	bne.n	80071ee <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	3319      	adds	r3, #25
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	334c      	adds	r3, #76	; 0x4c
 80071c8:	2202      	movs	r2, #2
 80071ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	334d      	adds	r3, #77	; 0x4d
 80071dc:	2203      	movs	r2, #3
 80071de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f005 fe16 	bl	800ce1a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4613      	mov	r3, r2
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	331a      	adds	r3, #26
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	f040 8437 	bne.w	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	331b      	adds	r3, #27
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 842b 	bne.w	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3326      	adds	r3, #38	; 0x26
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d009      	beq.n	8007248 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	331b      	adds	r3, #27
 8007244:	2201      	movs	r2, #1
 8007246:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007248:	78fa      	ldrb	r2, [r7, #3]
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	4613      	mov	r3, r2
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	1a9b      	subs	r3, r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	440b      	add	r3, r1
 8007256:	334d      	adds	r3, #77	; 0x4d
 8007258:	2203      	movs	r2, #3
 800725a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f005 fdd8 	bl	800ce1a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	440b      	add	r3, r1
 8007278:	3344      	adds	r3, #68	; 0x44
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e3f9      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f005 f88a 	bl	800c3a2 <USB_ReadChInterrupts>
 800728e:	4603      	mov	r3, r0
 8007290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007298:	d111      	bne.n	80072be <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a6:	461a      	mov	r2, r3
 80072a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f005 fdaf 	bl	800ce1a <USB_HC_Halt>
 80072bc:	e3da      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f005 f86b 	bl	800c3a2 <USB_ReadChInterrupts>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d168      	bne.n	80073a8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	3344      	adds	r3, #68	; 0x44
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	4611      	mov	r1, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f005 f855 	bl	800c3a2 <USB_ReadChInterrupts>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b40      	cmp	r3, #64	; 0x40
 8007300:	d112      	bne.n	8007328 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	3319      	adds	r3, #25
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	461a      	mov	r2, r3
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	1a9b      	subs	r3, r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	331b      	adds	r3, #27
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d019      	beq.n	8007372 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	331b      	adds	r3, #27
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	440a      	add	r2, r1
 8007368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800736c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007370:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	461a      	mov	r2, r3
 8007380:	2301      	movs	r3, #1
 8007382:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	1a9b      	subs	r3, r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	334d      	adds	r3, #77	; 0x4d
 8007394:	2201      	movs	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f005 fd3a 	bl	800ce1a <USB_HC_Halt>
 80073a6:	e365      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	4611      	mov	r1, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f004 fff6 	bl	800c3a2 <USB_ReadChInterrupts>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d139      	bne.n	8007434 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	334d      	adds	r3, #77	; 0x4d
 80073d0:	2205      	movs	r2, #5
 80073d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	331a      	adds	r3, #26
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3319      	adds	r3, #25
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	3344      	adds	r3, #68	; 0x44
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f005 fcfd 	bl	800ce1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	461a      	mov	r2, r3
 800742e:	2340      	movs	r3, #64	; 0x40
 8007430:	6093      	str	r3, [r2, #8]
 8007432:	e31f      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f004 ffb0 	bl	800c3a2 <USB_ReadChInterrupts>
 8007442:	4603      	mov	r3, r0
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d11a      	bne.n	8007482 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	461a      	mov	r2, r3
 800745a:	2308      	movs	r3, #8
 800745c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	334d      	adds	r3, #77	; 0x4d
 800746e:	2206      	movs	r2, #6
 8007470:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f005 fccd 	bl	800ce1a <USB_HC_Halt>
 8007480:	e2f8      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f004 ff89 	bl	800c3a2 <USB_ReadChInterrupts>
 8007490:	4603      	mov	r3, r0
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b10      	cmp	r3, #16
 8007498:	d144      	bne.n	8007524 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	3344      	adds	r3, #68	; 0x44
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	334d      	adds	r3, #77	; 0x4d
 80074be:	2204      	movs	r2, #4
 80074c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3319      	adds	r3, #25
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d114      	bne.n	8007502 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	3318      	adds	r3, #24
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80074ee:	78fa      	ldrb	r2, [r7, #3]
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3319      	adds	r3, #25
 80074fe:	2201      	movs	r2, #1
 8007500:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	78fa      	ldrb	r2, [r7, #3]
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f005 fc85 	bl	800ce1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751c:	461a      	mov	r2, r3
 800751e:	2310      	movs	r3, #16
 8007520:	6093      	str	r3, [r2, #8]
 8007522:	e2a7      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f004 ff38 	bl	800c3a2 <USB_ReadChInterrupts>
 8007532:	4603      	mov	r3, r0
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	f040 8083 	bne.w	8007644 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	799b      	ldrb	r3, [r3, #6]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d111      	bne.n	800756a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	334d      	adds	r3, #77	; 0x4d
 8007556:	2207      	movs	r2, #7
 8007558:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f005 fc59 	bl	800ce1a <USB_HC_Halt>
 8007568:	e062      	b.n	8007630 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	3344      	adds	r3, #68	; 0x44
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	1c59      	adds	r1, r3, #1
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4403      	add	r3, r0
 800758a:	3344      	adds	r3, #68	; 0x44
 800758c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3344      	adds	r3, #68	; 0x44
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d922      	bls.n	80075ea <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3344      	adds	r3, #68	; 0x44
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	334c      	adds	r3, #76	; 0x4c
 80075c8:	2204      	movs	r2, #4
 80075ca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	334c      	adds	r3, #76	; 0x4c
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f00b fdca 	bl	801317c <HAL_HCD_HC_NotifyURBChange_Callback>
 80075e8:	e022      	b.n	8007630 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	334c      	adds	r3, #76	; 0x4c
 80075fa:	2202      	movs	r2, #2
 80075fc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	4413      	add	r3, r2
 8007606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007614:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800761c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4413      	add	r3, r2
 8007626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762a:	461a      	mov	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763c:	461a      	mov	r2, r3
 800763e:	2380      	movs	r3, #128	; 0x80
 8007640:	6093      	str	r3, [r2, #8]
 8007642:	e217      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f004 fea8 	bl	800c3a2 <USB_ReadChInterrupts>
 8007652:	4603      	mov	r3, r0
 8007654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765c:	d11b      	bne.n	8007696 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	334d      	adds	r3, #77	; 0x4d
 800766e:	2209      	movs	r2, #9
 8007670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	78fa      	ldrb	r2, [r7, #3]
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f005 fbcd 	bl	800ce1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4413      	add	r3, r2
 8007688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768c:	461a      	mov	r2, r3
 800768e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007692:	6093      	str	r3, [r2, #8]
 8007694:	e1ee      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	4611      	mov	r1, r2
 800769e:	4618      	mov	r0, r3
 80076a0:	f004 fe7f 	bl	800c3a2 <USB_ReadChInterrupts>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	f040 81df 	bne.w	8007a6e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076bc:	461a      	mov	r2, r3
 80076be:	2302      	movs	r3, #2
 80076c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	334d      	adds	r3, #77	; 0x4d
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	f040 8093 	bne.w	8007800 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80076da:	78fa      	ldrb	r2, [r7, #3]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	334d      	adds	r3, #77	; 0x4d
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80076ee:	78fa      	ldrb	r2, [r7, #3]
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	1a9b      	subs	r3, r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	334c      	adds	r3, #76	; 0x4c
 80076fe:	2201      	movs	r2, #1
 8007700:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	3326      	adds	r3, #38	; 0x26
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d00b      	beq.n	8007730 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007718:	78fa      	ldrb	r2, [r7, #3]
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	4613      	mov	r3, r2
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	1a9b      	subs	r3, r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	3326      	adds	r3, #38	; 0x26
 8007728:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800772a:	2b03      	cmp	r3, #3
 800772c:	f040 8190 	bne.w	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	799b      	ldrb	r3, [r3, #6]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d115      	bne.n	8007764 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	333d      	adds	r3, #61	; 0x3d
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	78fa      	ldrb	r2, [r7, #3]
 800774c:	f083 0301 	eor.w	r3, r3, #1
 8007750:	b2d8      	uxtb	r0, r3
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	333d      	adds	r3, #61	; 0x3d
 8007760:	4602      	mov	r2, r0
 8007762:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	799b      	ldrb	r3, [r3, #6]
 8007768:	2b01      	cmp	r3, #1
 800776a:	f040 8171 	bne.w	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	3334      	adds	r3, #52	; 0x34
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 8165 	beq.w	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	3334      	adds	r3, #52	; 0x34
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	1a9b      	subs	r3, r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4403      	add	r3, r0
 80077a6:	3328      	adds	r3, #40	; 0x28
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	440b      	add	r3, r1
 80077ac:	1e59      	subs	r1, r3, #1
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4403      	add	r3, r0
 80077bc:	3328      	adds	r3, #40	; 0x28
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80077c4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 813f 	beq.w	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	333d      	adds	r3, #61	; 0x3d
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	f083 0301 	eor.w	r3, r3, #1
 80077ea:	b2d8      	uxtb	r0, r3
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	333d      	adds	r3, #61	; 0x3d
 80077fa:	4602      	mov	r2, r0
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e127      	b.n	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	334d      	adds	r3, #77	; 0x4d
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d120      	bne.n	8007858 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	334d      	adds	r3, #77	; 0x4d
 8007826:	2202      	movs	r2, #2
 8007828:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	331b      	adds	r3, #27
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 8107 	bne.w	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4613      	mov	r3, r2
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	1a9b      	subs	r3, r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	334c      	adds	r3, #76	; 0x4c
 8007852:	2202      	movs	r2, #2
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e0fb      	b.n	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	334d      	adds	r3, #77	; 0x4d
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b04      	cmp	r3, #4
 800786c:	d13a      	bne.n	80078e4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	334d      	adds	r3, #77	; 0x4d
 800787e:	2202      	movs	r2, #2
 8007880:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4613      	mov	r3, r2
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	334c      	adds	r3, #76	; 0x4c
 8007892:	2202      	movs	r2, #2
 8007894:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007896:	78fa      	ldrb	r2, [r7, #3]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	331b      	adds	r3, #27
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	f040 80d1 	bne.w	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	331b      	adds	r3, #27
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e0:	6053      	str	r3, [r2, #4]
 80078e2:	e0b5      	b.n	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	334d      	adds	r3, #77	; 0x4d
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d114      	bne.n	8007924 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	334d      	adds	r3, #77	; 0x4d
 800790a:	2202      	movs	r2, #2
 800790c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	334c      	adds	r3, #76	; 0x4c
 800791e:	2202      	movs	r2, #2
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e095      	b.n	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	334d      	adds	r3, #77	; 0x4d
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b06      	cmp	r3, #6
 8007938:	d114      	bne.n	8007964 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4613      	mov	r3, r2
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	334d      	adds	r3, #77	; 0x4d
 800794a:	2202      	movs	r2, #2
 800794c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	334c      	adds	r3, #76	; 0x4c
 800795e:	2205      	movs	r2, #5
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	e075      	b.n	8007a50 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	334d      	adds	r3, #77	; 0x4d
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b07      	cmp	r3, #7
 8007978:	d00a      	beq.n	8007990 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	334d      	adds	r3, #77	; 0x4d
 800798a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800798c:	2b09      	cmp	r3, #9
 800798e:	d170      	bne.n	8007a72 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	334d      	adds	r3, #77	; 0x4d
 80079a0:	2202      	movs	r2, #2
 80079a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	3344      	adds	r3, #68	; 0x44
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	1c59      	adds	r1, r3, #1
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4403      	add	r3, r0
 80079c4:	3344      	adds	r3, #68	; 0x44
 80079c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	3344      	adds	r3, #68	; 0x44
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d914      	bls.n	8007a08 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3344      	adds	r3, #68	; 0x44
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	334c      	adds	r3, #76	; 0x4c
 8007a02:	2204      	movs	r2, #4
 8007a04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a06:	e022      	b.n	8007a4e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	334c      	adds	r3, #76	; 0x4c
 8007a18:	2202      	movs	r2, #2
 8007a1a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a32:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a3a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a48:	461a      	mov	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a4e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4613      	mov	r3, r2
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	334c      	adds	r3, #76	; 0x4c
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f00b fb88 	bl	801317c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a6c:	e002      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007a6e:	bf00      	nop
 8007a70:	e000      	b.n	8007a74 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8007a72:	bf00      	nop
  }
}
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b08a      	sub	sp, #40	; 0x28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	0c5b      	lsrs	r3, r3, #17
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	091b      	lsrs	r3, r3, #4
 8007aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d004      	beq.n	8007ac0 <HCD_RXQLVL_IRQHandler+0x46>
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b05      	cmp	r3, #5
 8007aba:	f000 80b6 	beq.w	8007c2a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007abe:	e0b7      	b.n	8007c30 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80b3 	beq.w	8007c2e <HCD_RXQLVL_IRQHandler+0x1b4>
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4613      	mov	r3, r2
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	332c      	adds	r3, #44	; 0x2c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80a7 	beq.w	8007c2e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	3338      	adds	r3, #56	; 0x38
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	18d1      	adds	r1, r2, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	4613      	mov	r3, r2
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4403      	add	r3, r0
 8007b04:	3334      	adds	r3, #52	; 0x34
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	f200 8083 	bhi.w	8007c14 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4613      	mov	r3, r2
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	332c      	adds	r3, #44	; 0x2c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	b292      	uxth	r2, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f004 fbcf 	bl	800c2cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4613      	mov	r3, r2
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	332c      	adds	r3, #44	; 0x2c
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	18d1      	adds	r1, r2, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4403      	add	r3, r0
 8007b52:	332c      	adds	r3, #44	; 0x2c
 8007b54:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3338      	adds	r3, #56	; 0x38
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	18d1      	adds	r1, r2, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4613      	mov	r3, r2
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	1a9b      	subs	r3, r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4403      	add	r3, r0
 8007b7a:	3338      	adds	r3, #56	; 0x38
 8007b7c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	0cdb      	lsrs	r3, r3, #19
 8007b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b92:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	3328      	adds	r3, #40	; 0x28
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d13f      	bne.n	8007c2e <HCD_RXQLVL_IRQHandler+0x1b4>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d03c      	beq.n	8007c2e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bd2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	461a      	mov	r2, r3
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4613      	mov	r3, r2
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	333c      	adds	r3, #60	; 0x3c
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f083 0301 	eor.w	r3, r3, #1
 8007bfc:	b2d8      	uxtb	r0, r3
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4613      	mov	r3, r2
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	1a9b      	subs	r3, r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	333c      	adds	r3, #60	; 0x3c
 8007c0e:	4602      	mov	r2, r0
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e00c      	b.n	8007c2e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	334c      	adds	r3, #76	; 0x4c
 8007c24:	2204      	movs	r2, #4
 8007c26:	701a      	strb	r2, [r3, #0]
      break;
 8007c28:	e001      	b.n	8007c2e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007c2e:	bf00      	nop
  }
}
 8007c30:	bf00      	nop
 8007c32:	3728      	adds	r7, #40	; 0x28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c64:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d10b      	bne.n	8007c88 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d102      	bne.n	8007c80 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f00b fa62 	bl	8013144 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f043 0302 	orr.w	r3, r3, #2
 8007c86:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d132      	bne.n	8007cf8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f043 0308 	orr.w	r3, r3, #8
 8007c98:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d126      	bne.n	8007cf2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7a5b      	ldrb	r3, [r3, #9]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d113      	bne.n	8007cd4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cb6:	d106      	bne.n	8007cc6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2102      	movs	r1, #2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f004 fc78 	bl	800c5b4 <USB_InitFSLSPClkSel>
 8007cc4:	e011      	b.n	8007cea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f004 fc71 	bl	800c5b4 <USB_InitFSLSPClkSel>
 8007cd2:	e00a      	b.n	8007cea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	79db      	ldrb	r3, [r3, #7]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d106      	bne.n	8007cea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007ce8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f00b fa58 	bl	80131a0 <HAL_HCD_PortEnabled_Callback>
 8007cf0:	e002      	b.n	8007cf8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f00b fa62 	bl	80131bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d103      	bne.n	8007d0a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f043 0320 	orr.w	r3, r3, #32
 8007d08:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d10:	461a      	mov	r2, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6013      	str	r3, [r2, #0]
}
 8007d16:	bf00      	nop
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e12b      	b.n	8007f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fa fec8 	bl	8002adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2224      	movs	r2, #36	; 0x24
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d84:	f001 f86e 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 8007d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	4a81      	ldr	r2, [pc, #516]	; (8007f94 <HAL_I2C_Init+0x274>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d807      	bhi.n	8007da4 <HAL_I2C_Init+0x84>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a80      	ldr	r2, [pc, #512]	; (8007f98 <HAL_I2C_Init+0x278>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	bf94      	ite	ls
 8007d9c:	2301      	movls	r3, #1
 8007d9e:	2300      	movhi	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	e006      	b.n	8007db2 <HAL_I2C_Init+0x92>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4a7d      	ldr	r2, [pc, #500]	; (8007f9c <HAL_I2C_Init+0x27c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bf94      	ite	ls
 8007dac:	2301      	movls	r3, #1
 8007dae:	2300      	movhi	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e0e7      	b.n	8007f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a78      	ldr	r2, [pc, #480]	; (8007fa0 <HAL_I2C_Init+0x280>)
 8007dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc2:	0c9b      	lsrs	r3, r3, #18
 8007dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	4a6a      	ldr	r2, [pc, #424]	; (8007f94 <HAL_I2C_Init+0x274>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d802      	bhi.n	8007df4 <HAL_I2C_Init+0xd4>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3301      	adds	r3, #1
 8007df2:	e009      	b.n	8007e08 <HAL_I2C_Init+0xe8>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	4a69      	ldr	r2, [pc, #420]	; (8007fa4 <HAL_I2C_Init+0x284>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	3301      	adds	r3, #1
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	495c      	ldr	r1, [pc, #368]	; (8007f94 <HAL_I2C_Init+0x274>)
 8007e24:	428b      	cmp	r3, r1
 8007e26:	d819      	bhi.n	8007e5c <HAL_I2C_Init+0x13c>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1e59      	subs	r1, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e36:	1c59      	adds	r1, r3, #1
 8007e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_I2C_Init+0x138>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1e59      	subs	r1, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e50:	3301      	adds	r3, #1
 8007e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e56:	e051      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	e04f      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d111      	bne.n	8007e88 <HAL_I2C_Init+0x168>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1e58      	subs	r0, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6859      	ldr	r1, [r3, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	440b      	add	r3, r1
 8007e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e76:	3301      	adds	r3, #1
 8007e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e012      	b.n	8007eae <HAL_I2C_Init+0x18e>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	1e58      	subs	r0, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6859      	ldr	r1, [r3, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	0099      	lsls	r1, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <HAL_I2C_Init+0x196>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e022      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10e      	bne.n	8007edc <HAL_I2C_Init+0x1bc>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1e58      	subs	r0, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6859      	ldr	r1, [r3, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	440b      	add	r3, r1
 8007ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eda:	e00f      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	1e58      	subs	r0, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6859      	ldr	r1, [r3, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	0099      	lsls	r1, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	6809      	ldr	r1, [r1, #0]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69da      	ldr	r2, [r3, #28]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6911      	ldr	r1, [r2, #16]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68d2      	ldr	r2, [r2, #12]
 8007f36:	4311      	orrs	r1, r2
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	000186a0 	.word	0x000186a0
 8007f98:	001e847f 	.word	0x001e847f
 8007f9c:	003d08ff 	.word	0x003d08ff
 8007fa0:	431bde83 	.word	0x431bde83
 8007fa4:	10624dd3 	.word	0x10624dd3

08007fa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e154      	b.n	8008264 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a98      	ldr	r2, [pc, #608]	; (8008234 <HAL_I2S_Init+0x28c>)
 8007fd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7fa fdc9 	bl	8002b6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007ff0:	f023 030f 	bic.w	r3, r3, #15
 8007ff4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d06f      	beq.n	80080e6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800800e:	2310      	movs	r3, #16
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	e001      	b.n	8008018 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008014:	2320      	movs	r3, #32
 8008016:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b20      	cmp	r3, #32
 800801e:	d802      	bhi.n	8008026 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a83      	ldr	r2, [pc, #524]	; (8008238 <HAL_I2S_Init+0x290>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d004      	beq.n	800803a <HAL_I2S_Init+0x92>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a81      	ldr	r2, [pc, #516]	; (800823c <HAL_I2S_Init+0x294>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d104      	bne.n	8008044 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800803a:	2001      	movs	r0, #1
 800803c:	f001 f9f8 	bl	8009430 <HAL_RCCEx_GetPeriphCLKFreq>
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	e003      	b.n	800804c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008044:	2002      	movs	r0, #2
 8008046:	f001 f9f3 	bl	8009430 <HAL_RCCEx_GetPeriphCLKFreq>
 800804a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008054:	d125      	bne.n	80080a2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d010      	beq.n	8008080 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	fbb2 f2f3 	udiv	r2, r2, r3
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	fbb2 f3f3 	udiv	r3, r2, r3
 800807a:	3305      	adds	r3, #5
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e01f      	b.n	80080c0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	fbb2 f2f3 	udiv	r2, r2, r3
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	fbb2 f3f3 	udiv	r3, r2, r3
 800809c:	3305      	adds	r3, #5
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e00e      	b.n	80080c0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	461a      	mov	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	3305      	adds	r3, #5
 80080be:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4a5f      	ldr	r2, [pc, #380]	; (8008240 <HAL_I2S_Init+0x298>)
 80080c4:	fba2 2303 	umull	r2, r3, r2, r3
 80080c8:	08db      	lsrs	r3, r3, #3
 80080ca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	085b      	lsrs	r3, r3, #1
 80080dc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	e003      	b.n	80080ee <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80080e6:	2302      	movs	r3, #2
 80080e8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d902      	bls.n	80080fa <HAL_I2S_Init+0x152>
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2bff      	cmp	r3, #255	; 0xff
 80080f8:	d907      	bls.n	800810a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fe:	f043 0210 	orr.w	r2, r3, #16
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0ac      	b.n	8008264 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691a      	ldr	r2, [r3, #16]
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	ea42 0103 	orr.w	r1, r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	430a      	orrs	r2, r1
 800811c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008128:	f023 030f 	bic.w	r3, r3, #15
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6851      	ldr	r1, [r2, #4]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6892      	ldr	r2, [r2, #8]
 8008134:	4311      	orrs	r1, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68d2      	ldr	r2, [r2, #12]
 800813a:	4311      	orrs	r1, r2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6992      	ldr	r2, [r2, #24]
 8008140:	430a      	orrs	r2, r1
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800814c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b30      	cmp	r3, #48	; 0x30
 8008154:	d003      	beq.n	800815e <HAL_I2S_Init+0x1b6>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2bb0      	cmp	r3, #176	; 0xb0
 800815c:	d107      	bne.n	800816e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800816c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d16e      	bne.n	8008254 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a32      	ldr	r2, [pc, #200]	; (8008244 <HAL_I2S_Init+0x29c>)
 800817a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a2d      	ldr	r2, [pc, #180]	; (8008238 <HAL_I2S_Init+0x290>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d101      	bne.n	800818a <HAL_I2S_Init+0x1e2>
 8008186:	4b30      	ldr	r3, [pc, #192]	; (8008248 <HAL_I2S_Init+0x2a0>)
 8008188:	e001      	b.n	800818e <HAL_I2S_Init+0x1e6>
 800818a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6812      	ldr	r2, [r2, #0]
 8008194:	4928      	ldr	r1, [pc, #160]	; (8008238 <HAL_I2S_Init+0x290>)
 8008196:	428a      	cmp	r2, r1
 8008198:	d101      	bne.n	800819e <HAL_I2S_Init+0x1f6>
 800819a:	4a2b      	ldr	r2, [pc, #172]	; (8008248 <HAL_I2S_Init+0x2a0>)
 800819c:	e001      	b.n	80081a2 <HAL_I2S_Init+0x1fa>
 800819e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80081a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80081a6:	f023 030f 	bic.w	r3, r3, #15
 80081aa:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a21      	ldr	r2, [pc, #132]	; (8008238 <HAL_I2S_Init+0x290>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d101      	bne.n	80081ba <HAL_I2S_Init+0x212>
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <HAL_I2S_Init+0x2a0>)
 80081b8:	e001      	b.n	80081be <HAL_I2S_Init+0x216>
 80081ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80081be:	2202      	movs	r2, #2
 80081c0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <HAL_I2S_Init+0x290>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d101      	bne.n	80081d0 <HAL_I2S_Init+0x228>
 80081cc:	4b1e      	ldr	r3, [pc, #120]	; (8008248 <HAL_I2S_Init+0x2a0>)
 80081ce:	e001      	b.n	80081d4 <HAL_I2S_Init+0x22c>
 80081d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e0:	d003      	beq.n	80081ea <HAL_I2S_Init+0x242>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d103      	bne.n	80081f2 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80081ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e001      	b.n	80081f6 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80081f2:	2300      	movs	r3, #0
 80081f4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008200:	4313      	orrs	r3, r2
 8008202:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800820a:	4313      	orrs	r3, r2
 800820c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008214:	4313      	orrs	r3, r2
 8008216:	b29a      	uxth	r2, r3
 8008218:	897b      	ldrh	r3, [r7, #10]
 800821a:	4313      	orrs	r3, r2
 800821c:	b29b      	uxth	r3, r3
 800821e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008222:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a03      	ldr	r2, [pc, #12]	; (8008238 <HAL_I2S_Init+0x290>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d10e      	bne.n	800824c <HAL_I2S_Init+0x2a4>
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <HAL_I2S_Init+0x2a0>)
 8008230:	e00e      	b.n	8008250 <HAL_I2S_Init+0x2a8>
 8008232:	bf00      	nop
 8008234:	08008327 	.word	0x08008327
 8008238:	40003800 	.word	0x40003800
 800823c:	40003c00 	.word	0x40003c00
 8008240:	cccccccd 	.word	0xcccccccd
 8008244:	0800843d 	.word	0x0800843d
 8008248:	40003400 	.word	0x40003400
 800824c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008250:	897a      	ldrh	r2, [r7, #10]
 8008252:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	881a      	ldrh	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	1c9a      	adds	r2, r3, #2
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828e:	b29b      	uxth	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10e      	bne.n	80082c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fb fe7c 	bl	8003fb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	b292      	uxth	r2, r2
 80082dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	1c9a      	adds	r2, r3, #2
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10e      	bne.n	800831e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800830e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7fb fe6f 	bl	8003ffc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b04      	cmp	r3, #4
 8008340:	d13a      	bne.n	80083b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b01      	cmp	r3, #1
 800834a:	d109      	bne.n	8008360 <I2S_IRQHandler+0x3a>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	d102      	bne.n	8008360 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ffb4 	bl	80082c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b40      	cmp	r3, #64	; 0x40
 8008368:	d126      	bne.n	80083b8 <I2S_IRQHandler+0x92>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b20      	cmp	r3, #32
 8008376:	d11f      	bne.n	80083b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008386:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	f043 0202 	orr.w	r2, r3, #2
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7fb fe0a 	bl	8003fcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d136      	bne.n	8008432 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d109      	bne.n	80083e2 <I2S_IRQHandler+0xbc>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d8:	2b80      	cmp	r3, #128	; 0x80
 80083da:	d102      	bne.n	80083e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ff45 	bl	800826c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d122      	bne.n	8008432 <I2S_IRQHandler+0x10c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d11b      	bne.n	8008432 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008408:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008424:	f043 0204 	orr.w	r2, r3, #4
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7fb fdcd 	bl	8003fcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008432:	bf00      	nop
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a92      	ldr	r2, [pc, #584]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d101      	bne.n	800845a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008456:	4b92      	ldr	r3, [pc, #584]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008458:	e001      	b.n	800845e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800845a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a8b      	ldr	r2, [pc, #556]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d101      	bne.n	8008478 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008474:	4b8a      	ldr	r3, [pc, #552]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008476:	e001      	b.n	800847c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008488:	d004      	beq.n	8008494 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 8099 	bne.w	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b02      	cmp	r3, #2
 800849c:	d107      	bne.n	80084ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f925 	bl	80086f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d107      	bne.n	80084c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f9c8 	bl	8008858 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d13a      	bne.n	8008548 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d035      	beq.n	8008548 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6e      	ldr	r2, [pc, #440]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80084e6:	4b6e      	ldr	r3, [pc, #440]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80084e8:	e001      	b.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80084ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4969      	ldr	r1, [pc, #420]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80084f6:	428b      	cmp	r3, r1
 80084f8:	d101      	bne.n	80084fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80084fa:	4b69      	ldr	r3, [pc, #420]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80084fc:	e001      	b.n	8008502 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80084fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008502:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008506:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008516:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fb fd42 	bl	8003fcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b08      	cmp	r3, #8
 8008550:	f040 80c3 	bne.w	80086da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80bd 	beq.w	80086da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800856e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a49      	ldr	r2, [pc, #292]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d101      	bne.n	800857e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800857a:	4b49      	ldr	r3, [pc, #292]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800857c:	e001      	b.n	8008582 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800857e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4944      	ldr	r1, [pc, #272]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800858a:	428b      	cmp	r3, r1
 800858c:	d101      	bne.n	8008592 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800858e:	4b44      	ldr	r3, [pc, #272]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008590:	e001      	b.n	8008596 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800859a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800859c:	2300      	movs	r3, #0
 800859e:	60bb      	str	r3, [r7, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	60bb      	str	r3, [r7, #8]
 80085a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	f043 0204 	orr.w	r2, r3, #4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fb fd04 	bl	8003fcc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80085c4:	e089      	b.n	80086da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d107      	bne.n	80085e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8be 	bl	800875c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d107      	bne.n	80085fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f8fd 	bl	80087f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d12f      	bne.n	8008664 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d02a      	beq.n	8008664 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800861c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d101      	bne.n	800862c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008628:	4b1d      	ldr	r3, [pc, #116]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800862a:	e001      	b.n	8008630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800862c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4919      	ldr	r1, [pc, #100]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008638:	428b      	cmp	r3, r1
 800863a:	d101      	bne.n	8008640 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800863c:	4b18      	ldr	r3, [pc, #96]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800863e:	e001      	b.n	8008644 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008648:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	f043 0202 	orr.w	r2, r3, #2
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fb fcb4 	bl	8003fcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d136      	bne.n	80086dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d031      	beq.n	80086dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a07      	ldr	r2, [pc, #28]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d101      	bne.n	8008686 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008684:	e001      	b.n	800868a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4902      	ldr	r1, [pc, #8]	; (800869c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008692:	428b      	cmp	r3, r1
 8008694:	d106      	bne.n	80086a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008696:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008698:	e006      	b.n	80086a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800869a:	bf00      	nop
 800869c:	40003800 	.word	0x40003800
 80086a0:	40003400 	.word	0x40003400
 80086a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80086bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	f043 0204 	orr.w	r2, r3, #4
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7fb fc7a 	bl	8003fcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80086d8:	e000      	b.n	80086dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80086da:	bf00      	nop
}
 80086dc:	bf00      	nop
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	1c99      	adds	r1, r3, #2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6251      	str	r1, [r2, #36]	; 0x24
 800870a:	881a      	ldrh	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d113      	bne.n	8008752 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008738:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800873e:	b29b      	uxth	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ffc9 	bl	80086e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	1c99      	adds	r1, r3, #2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6251      	str	r1, [r2, #36]	; 0x24
 800876e:	8819      	ldrh	r1, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <I2SEx_TxISR_I2SExt+0x90>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d101      	bne.n	800877e <I2SEx_TxISR_I2SExt+0x22>
 800877a:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <I2SEx_TxISR_I2SExt+0x94>)
 800877c:	e001      	b.n	8008782 <I2SEx_TxISR_I2SExt+0x26>
 800877e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008782:	460a      	mov	r2, r1
 8008784:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878a:	b29b      	uxth	r3, r3
 800878c:	3b01      	subs	r3, #1
 800878e:	b29a      	uxth	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008798:	b29b      	uxth	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d121      	bne.n	80087e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a12      	ldr	r2, [pc, #72]	; (80087ec <I2SEx_TxISR_I2SExt+0x90>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d101      	bne.n	80087ac <I2SEx_TxISR_I2SExt+0x50>
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <I2SEx_TxISR_I2SExt+0x94>)
 80087aa:	e001      	b.n	80087b0 <I2SEx_TxISR_I2SExt+0x54>
 80087ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	490d      	ldr	r1, [pc, #52]	; (80087ec <I2SEx_TxISR_I2SExt+0x90>)
 80087b8:	428b      	cmp	r3, r1
 80087ba:	d101      	bne.n	80087c0 <I2SEx_TxISR_I2SExt+0x64>
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <I2SEx_TxISR_I2SExt+0x94>)
 80087be:	e001      	b.n	80087c4 <I2SEx_TxISR_I2SExt+0x68>
 80087c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ff81 	bl	80086e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40003800 	.word	0x40003800
 80087f0:	40003400 	.word	0x40003400

080087f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68d8      	ldr	r0, [r3, #12]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	1c99      	adds	r1, r3, #2
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800880c:	b282      	uxth	r2, r0
 800880e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d113      	bne.n	8008850 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008836:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff4a 	bl	80086e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a20      	ldr	r2, [pc, #128]	; (80088e8 <I2SEx_RxISR_I2SExt+0x90>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d101      	bne.n	800886e <I2SEx_RxISR_I2SExt+0x16>
 800886a:	4b20      	ldr	r3, [pc, #128]	; (80088ec <I2SEx_RxISR_I2SExt+0x94>)
 800886c:	e001      	b.n	8008872 <I2SEx_RxISR_I2SExt+0x1a>
 800886e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008872:	68d8      	ldr	r0, [r3, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	1c99      	adds	r1, r3, #2
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800887e:	b282      	uxth	r2, r0
 8008880:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d121      	bne.n	80088de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a12      	ldr	r2, [pc, #72]	; (80088e8 <I2SEx_RxISR_I2SExt+0x90>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d101      	bne.n	80088a8 <I2SEx_RxISR_I2SExt+0x50>
 80088a4:	4b11      	ldr	r3, [pc, #68]	; (80088ec <I2SEx_RxISR_I2SExt+0x94>)
 80088a6:	e001      	b.n	80088ac <I2SEx_RxISR_I2SExt+0x54>
 80088a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	490d      	ldr	r1, [pc, #52]	; (80088e8 <I2SEx_RxISR_I2SExt+0x90>)
 80088b4:	428b      	cmp	r3, r1
 80088b6:	d101      	bne.n	80088bc <I2SEx_RxISR_I2SExt+0x64>
 80088b8:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <I2SEx_RxISR_I2SExt+0x94>)
 80088ba:	e001      	b.n	80088c0 <I2SEx_RxISR_I2SExt+0x68>
 80088bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80088c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d106      	bne.n	80088de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ff03 	bl	80086e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40003800 	.word	0x40003800
 80088ec:	40003400 	.word	0x40003400

080088f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80088f8:	f7fb fec8 	bl	800468c <HAL_GetTick>
 80088fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e069      	b.n	80089dc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fa fa07 	bl	8002d30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008922:	f241 3188 	movw	r1, #5000	; 0x1388
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f85e 	bl	80089e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	3b01      	subs	r3, #1
 800893c:	021a      	lsls	r2, r3, #8
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	2120      	movs	r1, #32
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f856 	bl	8008a04 <QSPI_WaitFlagStateUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d137      	bne.n	80089d2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800896c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6852      	ldr	r2, [r2, #4]
 8008974:	0611      	lsls	r1, r2, #24
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	68d2      	ldr	r2, [r2, #12]
 800897a:	4311      	orrs	r1, r2
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	69d2      	ldr	r2, [r2, #28]
 8008980:	4311      	orrs	r1, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6a12      	ldr	r2, [r2, #32]
 8008986:	4311      	orrs	r1, r2
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	430b      	orrs	r3, r1
 800898e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <HAL_QSPI_Init+0xf4>)
 8008998:	4013      	ands	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6912      	ldr	r2, [r2, #16]
 800899e:	0411      	lsls	r1, r2, #16
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6952      	ldr	r2, [r2, #20]
 80089a4:	4311      	orrs	r1, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6992      	ldr	r2, [r2, #24]
 80089aa:	4311      	orrs	r1, r2
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6812      	ldr	r2, [r2, #0]
 80089b0:	430b      	orrs	r3, r1
 80089b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80089da:	7afb      	ldrb	r3, [r7, #11]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	ffe0f8fe 	.word	0xffe0f8fe

080089e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	4613      	mov	r3, r2
 8008a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a14:	e01a      	b.n	8008a4c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d016      	beq.n	8008a4c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1e:	f7fb fe35 	bl	800468c <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2204      	movs	r2, #4
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	f043 0201 	orr.w	r2, r3, #1
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e00e      	b.n	8008a6a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4013      	ands	r3, r2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d1d6      	bne.n	8008a16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e0cc      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a88:	4b68      	ldr	r3, [pc, #416]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90c      	bls.n	8008ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b65      	ldr	r3, [pc, #404]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9e:	4b63      	ldr	r3, [pc, #396]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0b8      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d020      	beq.n	8008afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ac8:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	4a58      	ldr	r2, [pc, #352]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ae0:	4b53      	ldr	r3, [pc, #332]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	4a52      	ldr	r2, [pc, #328]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aec:	4b50      	ldr	r3, [pc, #320]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	494d      	ldr	r1, [pc, #308]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d044      	beq.n	8008b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d107      	bne.n	8008b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b12:	4b47      	ldr	r3, [pc, #284]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d119      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e07f      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d003      	beq.n	8008b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d107      	bne.n	8008b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b32:	4b3f      	ldr	r3, [pc, #252]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e06f      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b42:	4b3b      	ldr	r3, [pc, #236]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e067      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b52:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f023 0203 	bic.w	r2, r3, #3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	4934      	ldr	r1, [pc, #208]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b64:	f7fb fd92 	bl	800468c <HAL_GetTick>
 8008b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b6a:	e00a      	b.n	8008b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b6c:	f7fb fd8e 	bl	800468c <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e04f      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b82:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 020c 	and.w	r2, r3, #12
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d1eb      	bne.n	8008b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d20c      	bcs.n	8008bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008baa:	4b20      	ldr	r3, [pc, #128]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d001      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e032      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d008      	beq.n	8008bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bc8:	4b19      	ldr	r3, [pc, #100]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	4916      	ldr	r1, [pc, #88]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d009      	beq.n	8008bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	490e      	ldr	r1, [pc, #56]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008bfa:	f000 f821 	bl	8008c40 <HAL_RCC_GetSysClockFreq>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	091b      	lsrs	r3, r3, #4
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	490a      	ldr	r1, [pc, #40]	; (8008c34 <HAL_RCC_ClockConfig+0x1c0>)
 8008c0c:	5ccb      	ldrb	r3, [r1, r3]
 8008c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <HAL_RCC_ClockConfig+0x1c4>)
 8008c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <HAL_RCC_ClockConfig+0x1c8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fa fb4c 	bl	80032b8 <HAL_InitTick>

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	40023c00 	.word	0x40023c00
 8008c30:	40023800 	.word	0x40023800
 8008c34:	080143d0 	.word	0x080143d0
 8008c38:	20000010 	.word	0x20000010
 8008c3c:	20000068 	.word	0x20000068

08008c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c44:	b094      	sub	sp, #80	; 0x50
 8008c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c58:	4b79      	ldr	r3, [pc, #484]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 030c 	and.w	r3, r3, #12
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d00d      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0x40>
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	f200 80e1 	bhi.w	8008e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <HAL_RCC_GetSysClockFreq+0x34>
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d003      	beq.n	8008c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8008c72:	e0db      	b.n	8008e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c74:	4b73      	ldr	r3, [pc, #460]	; (8008e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c78:	e0db      	b.n	8008e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c7a:	4b73      	ldr	r3, [pc, #460]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8008c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c7e:	e0d8      	b.n	8008e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c80:	4b6f      	ldr	r3, [pc, #444]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c8a:	4b6d      	ldr	r3, [pc, #436]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d063      	beq.n	8008d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c96:	4b6a      	ldr	r3, [pc, #424]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	099b      	lsrs	r3, r3, #6
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8008caa:	2300      	movs	r3, #0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	f04f 0000 	mov.w	r0, #0
 8008cba:	f04f 0100 	mov.w	r1, #0
 8008cbe:	0159      	lsls	r1, r3, #5
 8008cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cc4:	0150      	lsls	r0, r2, #5
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4621      	mov	r1, r4
 8008ccc:	1a51      	subs	r1, r2, r1
 8008cce:	6139      	str	r1, [r7, #16]
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	018b      	lsls	r3, r1, #6
 8008ce8:	4651      	mov	r1, sl
 8008cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cee:	4651      	mov	r1, sl
 8008cf0:	018a      	lsls	r2, r1, #6
 8008cf2:	4651      	mov	r1, sl
 8008cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8008cf8:	4659      	mov	r1, fp
 8008cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8008cfe:	f04f 0200 	mov.w	r2, #0
 8008d02:	f04f 0300 	mov.w	r3, #0
 8008d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d12:	4690      	mov	r8, r2
 8008d14:	4699      	mov	r9, r3
 8008d16:	4623      	mov	r3, r4
 8008d18:	eb18 0303 	adds.w	r3, r8, r3
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	462b      	mov	r3, r5
 8008d20:	eb49 0303 	adc.w	r3, r9, r3
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d32:	4629      	mov	r1, r5
 8008d34:	024b      	lsls	r3, r1, #9
 8008d36:	4621      	mov	r1, r4
 8008d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	024a      	lsls	r2, r1, #9
 8008d40:	4610      	mov	r0, r2
 8008d42:	4619      	mov	r1, r3
 8008d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d46:	2200      	movs	r2, #0
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d50:	f7f7 fed4 	bl	8000afc <__aeabi_uldivmod>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4613      	mov	r3, r2
 8008d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d5c:	e058      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d5e:	4b38      	ldr	r3, [pc, #224]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	099b      	lsrs	r3, r3, #6
 8008d64:	2200      	movs	r2, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	4611      	mov	r1, r2
 8008d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d6e:	623b      	str	r3, [r7, #32]
 8008d70:	2300      	movs	r3, #0
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
 8008d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d78:	4642      	mov	r2, r8
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	f04f 0000 	mov.w	r0, #0
 8008d80:	f04f 0100 	mov.w	r1, #0
 8008d84:	0159      	lsls	r1, r3, #5
 8008d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d8a:	0150      	lsls	r0, r2, #5
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4641      	mov	r1, r8
 8008d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d96:	4649      	mov	r1, r9
 8008d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d9c:	f04f 0200 	mov.w	r2, #0
 8008da0:	f04f 0300 	mov.w	r3, #0
 8008da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008db0:	ebb2 040a 	subs.w	r4, r2, sl
 8008db4:	eb63 050b 	sbc.w	r5, r3, fp
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	00eb      	lsls	r3, r5, #3
 8008dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dc6:	00e2      	lsls	r2, r4, #3
 8008dc8:	4614      	mov	r4, r2
 8008dca:	461d      	mov	r5, r3
 8008dcc:	4643      	mov	r3, r8
 8008dce:	18e3      	adds	r3, r4, r3
 8008dd0:	603b      	str	r3, [r7, #0]
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	eb45 0303 	adc.w	r3, r5, r3
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008de6:	4629      	mov	r1, r5
 8008de8:	028b      	lsls	r3, r1, #10
 8008dea:	4621      	mov	r1, r4
 8008dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008df0:	4621      	mov	r1, r4
 8008df2:	028a      	lsls	r2, r1, #10
 8008df4:	4610      	mov	r0, r2
 8008df6:	4619      	mov	r1, r3
 8008df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	61fa      	str	r2, [r7, #28]
 8008e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e04:	f7f7 fe7a 	bl	8000afc <__aeabi_uldivmod>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008e10:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e2a:	e002      	b.n	8008e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3750      	adds	r7, #80	; 0x50
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e3e:	bf00      	nop
 8008e40:	40023800 	.word	0x40023800
 8008e44:	00f42400 	.word	0x00f42400
 8008e48:	007a1200 	.word	0x007a1200

08008e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e50:	4b03      	ldr	r3, [pc, #12]	; (8008e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e52:	681b      	ldr	r3, [r3, #0]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20000010 	.word	0x20000010

08008e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e68:	f7ff fff0 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	0a9b      	lsrs	r3, r3, #10
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	4903      	ldr	r1, [pc, #12]	; (8008e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e7a:	5ccb      	ldrb	r3, [r1, r3]
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40023800 	.word	0x40023800
 8008e88:	080143e0 	.word	0x080143e0

08008e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e90:	f7ff ffdc 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008e94:	4602      	mov	r2, r0
 8008e96:	4b05      	ldr	r3, [pc, #20]	; (8008eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	0b5b      	lsrs	r3, r3, #13
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	4903      	ldr	r1, [pc, #12]	; (8008eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ea2:	5ccb      	ldrb	r3, [r1, r3]
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40023800 	.word	0x40023800
 8008eb0:	080143e0 	.word	0x080143e0

08008eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	220f      	movs	r2, #15
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ec4:	4b12      	ldr	r3, [pc, #72]	; (8008f10 <HAL_RCC_GetClockConfig+0x5c>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f003 0203 	and.w	r2, r3, #3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <HAL_RCC_GetClockConfig+0x5c>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <HAL_RCC_GetClockConfig+0x5c>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ee8:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <HAL_RCC_GetClockConfig+0x5c>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	08db      	lsrs	r3, r3, #3
 8008eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ef6:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <HAL_RCC_GetClockConfig+0x60>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0207 	and.w	r2, r3, #7
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	601a      	str	r2, [r3, #0]
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	40023800 	.word	0x40023800
 8008f14:	40023c00 	.word	0x40023c00

08008f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d010      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008f3c:	4b7a      	ldr	r3, [pc, #488]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f42:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	4977      	ldr	r1, [pc, #476]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d010      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008f6a:	4b6f      	ldr	r3, [pc, #444]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f70:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	496b      	ldr	r1, [pc, #428]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d022      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8008f98:	4b63      	ldr	r3, [pc, #396]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fa6:	4960      	ldr	r1, [pc, #384]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc2:	d10c      	bne.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8008fc4:	4b58      	ldr	r3, [pc, #352]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	4954      	ldr	r1, [pc, #336]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d022      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8008fea:	4b4f      	ldr	r3, [pc, #316]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff8:	494b      	ldr	r1, [pc, #300]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009008:	2301      	movs	r3, #1
 800900a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009014:	d10c      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8009016:	4b44      	ldr	r3, [pc, #272]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	3b01      	subs	r3, #1
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	493f      	ldr	r1, [pc, #252]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800902a:	4313      	orrs	r3, r2
 800902c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 808a 	beq.w	8009152 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	4b39      	ldr	r3, [pc, #228]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	4a38      	ldr	r2, [pc, #224]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800904c:	6413      	str	r3, [r2, #64]	; 0x40
 800904e:	4b36      	ldr	r3, [pc, #216]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800905a:	4b34      	ldr	r3, [pc, #208]	; (800912c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a33      	ldr	r2, [pc, #204]	; (800912c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8009060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009064:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009066:	f7fb fb11 	bl	800468c <HAL_GetTick>
 800906a:	61b8      	str	r0, [r7, #24]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800906c:	e008      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800906e:	f7fb fb0d 	bl	800468c <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d901      	bls.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e1d1      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009080:	4b2a      	ldr	r3, [pc, #168]	; (800912c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0f0      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800908c:	4b26      	ldr	r3, [pc, #152]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800908e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009094:	617b      	str	r3, [r7, #20]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d02f      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d028      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090aa:	4b1f      	ldr	r3, [pc, #124]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090b4:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80090b6:	2201      	movs	r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090ba:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80090c0:	4a19      	ldr	r2, [pc, #100]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80090c6:	4b18      	ldr	r3, [pc, #96]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80090c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d114      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80090d2:	f7fb fadb 	bl	800468c <HAL_GetTick>
 80090d6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090d8:	e00a      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090da:	f7fb fad7 	bl	800468c <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e199      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090f0:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80090f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0ee      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009108:	d114      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800911a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800911e:	4902      	ldr	r1, [pc, #8]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009120:	4313      	orrs	r3, r2
 8009122:	608b      	str	r3, [r1, #8]
 8009124:	e00c      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009126:	bf00      	nop
 8009128:	40023800 	.word	0x40023800
 800912c:	40007000 	.word	0x40007000
 8009130:	42470e40 	.word	0x42470e40
 8009134:	4b89      	ldr	r3, [pc, #548]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	4a88      	ldr	r2, [pc, #544]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800913a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800913e:	6093      	str	r3, [r2, #8]
 8009140:	4b86      	ldr	r3, [pc, #536]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800914c:	4983      	ldr	r1, [pc, #524]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800914e:	4313      	orrs	r3, r2
 8009150:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0304 	and.w	r3, r3, #4
 800915a:	2b00      	cmp	r3, #0
 800915c:	d004      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009164:	4b7e      	ldr	r3, [pc, #504]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8009166:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0310 	and.w	r3, r3, #16
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00a      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009174:	4b79      	ldr	r3, [pc, #484]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800917a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009182:	4976      	ldr	r1, [pc, #472]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009184:	4313      	orrs	r3, r2
 8009186:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d011      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009196:	4b71      	ldr	r3, [pc, #452]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800919c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a4:	496d      	ldr	r1, [pc, #436]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091b4:	d101      	bne.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80091b6:	2301      	movs	r3, #1
 80091b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80091c6:	4b65      	ldr	r3, [pc, #404]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80091c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d4:	4961      	ldr	r1, [pc, #388]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d004      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b80      	cmp	r3, #128	; 0x80
 80091e8:	f040 80c6 	bne.w	8009378 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091ec:	4b5d      	ldr	r3, [pc, #372]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091f2:	f7fb fa4b 	bl	800468c <HAL_GetTick>
 80091f6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091f8:	e008      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091fa:	f7fb fa47 	bl	800468c <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b02      	cmp	r3, #2
 8009206:	d901      	bls.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e10b      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800920c:	4b53      	ldr	r3, [pc, #332]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1f0      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8009218:	4a53      	ldr	r2, [pc, #332]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x31c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d023      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d019      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x346>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800925c:	d00e      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0340 	and.w	r3, r3, #64	; 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009266:	2b00      	cmp	r3, #0
 8009268:	d019      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x386>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d115      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800927a:	d110      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	019b      	lsls	r3, r3, #6
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	061b      	lsls	r3, r3, #24
 800928e:	431a      	orrs	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	071b      	lsls	r3, r3, #28
 8009296:	4931      	ldr	r1, [pc, #196]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009298:	4313      	orrs	r3, r2
 800929a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d009      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d026      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d122      	bne.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092c6:	4b25      	ldr	r3, [pc, #148]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80092c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092cc:	0e1b      	lsrs	r3, r3, #24
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq,
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	019b      	lsls	r3, r3, #6
 80092de:	431a      	orrs	r2, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	061b      	lsls	r3, r3, #24
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	071b      	lsls	r3, r3, #28
 80092ec:	491b      	ldr	r1, [pc, #108]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80092f4:	4b19      	ldr	r3, [pc, #100]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80092f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092fa:	f023 021f 	bic.w	r2, r3, #31
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	3b01      	subs	r3, #1
 8009304:	4915      	ldr	r1, [pc, #84]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009306:	4313      	orrs	r3, r2
 8009308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009314:	2b00      	cmp	r3, #0
 8009316:	d010      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	019b      	lsls	r3, r3, #6
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	061b      	lsls	r3, r3, #24
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	071b      	lsls	r3, r3, #28
 8009332:	490a      	ldr	r1, [pc, #40]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009334:	4313      	orrs	r3, r2
 8009336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800933c:	2201      	movs	r2, #1
 800933e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009340:	f7fb f9a4 	bl	800468c <HAL_GetTick>
 8009344:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009346:	e011      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009348:	f7fb f9a0 	bl	800468c <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d90a      	bls.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e064      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	424711e0 	.word	0x424711e0
 8009364:	42470068 	.word	0x42470068
 8009368:	424710d8 	.word	0x424710d8
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800936c:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0e7      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009384:	4b29      	ldr	r3, [pc, #164]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	4926      	ldr	r1, [pc, #152]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009394:	4313      	orrs	r3, r2
 8009396:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80093a6:	4b21      	ldr	r3, [pc, #132]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80093a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b4:	491d      	ldr	r1, [pc, #116]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80093c8:	4b18      	ldr	r3, [pc, #96]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80093ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	4915      	ldr	r1, [pc, #84]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80093ea:	4b10      	ldr	r3, [pc, #64]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80093ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	490c      	ldr	r1, [pc, #48]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800940e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009412:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941a:	4904      	ldr	r1, [pc, #16]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800941c:	4313      	orrs	r3, r2
 800941e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	40023800 	.word	0x40023800

08009430 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d004      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b02      	cmp	r3, #2
 8009452:	f000 80a1 	beq.w	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      }
      break;
    }
    default:
    {
      break;
 8009456:	e13f      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8009458:	4ba3      	ldr	r3, [pc, #652]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800945a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800946a:	f000 8084 	beq.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009474:	f200 808c 	bhi.w	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800947e:	d04f      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009486:	f200 8083 	bhi.w	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d006      	beq.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009496:	d17b      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009498:	4b94      	ldr	r3, [pc, #592]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800949a:	617b      	str	r3, [r7, #20]
          break;
 800949c:	e07b      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          if ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800949e:	4b92      	ldr	r3, [pc, #584]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ac:	d109      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80094ae:	4b8e      	ldr	r3, [pc, #568]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b8:	4a8c      	ldr	r2, [pc, #560]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80094ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	e019      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80094c2:	4b89      	ldr	r3, [pc, #548]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ce:	d109      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80094d0:	4b85      	ldr	r3, [pc, #532]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094da:	4a85      	ldr	r2, [pc, #532]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80094dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e0:	613b      	str	r3, [r7, #16]
 80094e2:	e008      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80094e4:	4b80      	ldr	r3, [pc, #512]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ee:	4a81      	ldr	r2, [pc, #516]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80094f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f4:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80094f6:	4b7c      	ldr	r3, [pc, #496]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fc:	099b      	lsrs	r3, r3, #6
 80094fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	fb02 f303 	mul.w	r3, r2, r3
 8009508:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800950a:	4b77      	ldr	r3, [pc, #476]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800950c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009510:	0f1b      	lsrs	r3, r3, #28
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	617b      	str	r3, [r7, #20]
          break;
 800951e:	e03a      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009520:	4b71      	ldr	r3, [pc, #452]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800952c:	d108      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800952e:	4b6e      	ldr	r3, [pc, #440]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009536:	4a6e      	ldr	r2, [pc, #440]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009538:	fbb2 f3f3 	udiv	r3, r2, r3
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e007      	b.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009540:	4b69      	ldr	r3, [pc, #420]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009548:	4a6a      	ldr	r2, [pc, #424]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800954a:	fbb2 f3f3 	udiv	r3, r2, r3
 800954e:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009550:	4b65      	ldr	r3, [pc, #404]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	099b      	lsrs	r3, r3, #6
 8009556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	fb02 f303 	mul.w	r3, r2, r3
 8009560:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009562:	4b61      	ldr	r3, [pc, #388]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	0f1b      	lsrs	r3, r3, #28
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009572:	617b      	str	r3, [r7, #20]
          break;
 8009574:	e00f      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009576:	4b5c      	ldr	r3, [pc, #368]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800957e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009582:	d102      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 8009584:	4b5a      	ldr	r3, [pc, #360]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009586:	617b      	str	r3, [r7, #20]
          break;
 8009588:	e005      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 800958a:	4b5a      	ldr	r3, [pc, #360]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800958c:	617b      	str	r3, [r7, #20]
          break;
 800958e:	e002      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          frequency = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
          break;
 8009594:	bf00      	nop
      break;
 8009596:	e09f      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8009598:	4b53      	ldr	r3, [pc, #332]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800959a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800959e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80095aa:	f000 8084 	beq.w	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80095b4:	f200 808c 	bhi.w	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095be:	d04f      	beq.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095c6:	f200 8083 	bhi.w	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d006      	beq.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d6:	d17b      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          frequency = EXTERNAL_CLOCK_VALUE;
 80095d8:	4b44      	ldr	r3, [pc, #272]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80095da:	617b      	str	r3, [r7, #20]
          break;
 80095dc:	e07b      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          if ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80095de:	4b42      	ldr	r3, [pc, #264]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80095e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ec:	d109      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80095ee:	4b3e      	ldr	r3, [pc, #248]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80095f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095f8:	4a3c      	ldr	r2, [pc, #240]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80095fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fe:	613b      	str	r3, [r7, #16]
 8009600:	e019      	b.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009602:	4b39      	ldr	r3, [pc, #228]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800960a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800960e:	d109      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009610:	4b35      	ldr	r3, [pc, #212]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800961a:	4a35      	ldr	r2, [pc, #212]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800961c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009620:	613b      	str	r3, [r7, #16]
 8009622:	e008      	b.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009624:	4b30      	ldr	r3, [pc, #192]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800962e:	4a31      	ldr	r2, [pc, #196]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009630:	fbb2 f3f3 	udiv	r3, r2, r3
 8009634:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009636:	4b2c      	ldr	r3, [pc, #176]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963c:	099b      	lsrs	r3, r3, #6
 800963e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	fb02 f303 	mul.w	r3, r2, r3
 8009648:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800964a:	4b27      	ldr	r3, [pc, #156]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800964c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009650:	0f1b      	lsrs	r3, r3, #28
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	fbb2 f3f3 	udiv	r3, r2, r3
 800965c:	617b      	str	r3, [r7, #20]
          break;
 800965e:	e03a      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009660:	4b21      	ldr	r3, [pc, #132]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800966c:	d108      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800966e:	4b1e      	ldr	r3, [pc, #120]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009676:	4a1e      	ldr	r2, [pc, #120]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009678:	fbb2 f3f3 	udiv	r3, r2, r3
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	e007      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009680:	4b19      	ldr	r3, [pc, #100]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009688:	4a1a      	ldr	r2, [pc, #104]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800968a:	fbb2 f3f3 	udiv	r3, r2, r3
 800968e:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009690:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	099b      	lsrs	r3, r3, #6
 8009696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	fb02 f303 	mul.w	r3, r2, r3
 80096a0:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80096a2:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	0f1b      	lsrs	r3, r3, #28
 80096a8:	f003 0307 	and.w	r3, r3, #7
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b2:	617b      	str	r3, [r7, #20]
          break;
 80096b4:	e00f      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80096b6:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096c2:	d102      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
            frequency = HSE_VALUE;
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80096c6:	617b      	str	r3, [r7, #20]
          break;
 80096c8:	e005      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 80096ca:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80096cc:	617b      	str	r3, [r7, #20]
          break;
 80096ce:	e002      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          frequency = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
          break;
 80096d4:	bf00      	nop
      break;
 80096d6:	bf00      	nop
    }
  }
  return frequency;
 80096d8:	697b      	ldr	r3, [r7, #20]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40023800 	.word	0x40023800
 80096ec:	00bb8000 	.word	0x00bb8000
 80096f0:	007a1200 	.word	0x007a1200
 80096f4:	00f42400 	.word	0x00f42400

080096f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e273      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d075      	beq.n	8009802 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009716:	4b88      	ldr	r3, [pc, #544]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 030c 	and.w	r3, r3, #12
 800971e:	2b04      	cmp	r3, #4
 8009720:	d00c      	beq.n	800973c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009722:	4b85      	ldr	r3, [pc, #532]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 030c 	and.w	r3, r3, #12
        || \
 800972a:	2b08      	cmp	r3, #8
 800972c:	d112      	bne.n	8009754 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800972e:	4b82      	ldr	r3, [pc, #520]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800973a:	d10b      	bne.n	8009754 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800973c:	4b7e      	ldr	r3, [pc, #504]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d05b      	beq.n	8009800 <HAL_RCC_OscConfig+0x108>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d157      	bne.n	8009800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e24e      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800975c:	d106      	bne.n	800976c <HAL_RCC_OscConfig+0x74>
 800975e:	4b76      	ldr	r3, [pc, #472]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a75      	ldr	r2, [pc, #468]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	e01d      	b.n	80097a8 <HAL_RCC_OscConfig+0xb0>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009774:	d10c      	bne.n	8009790 <HAL_RCC_OscConfig+0x98>
 8009776:	4b70      	ldr	r3, [pc, #448]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a6f      	ldr	r2, [pc, #444]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800977c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	4b6d      	ldr	r3, [pc, #436]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a6c      	ldr	r2, [pc, #432]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	e00b      	b.n	80097a8 <HAL_RCC_OscConfig+0xb0>
 8009790:	4b69      	ldr	r3, [pc, #420]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a68      	ldr	r2, [pc, #416]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	4b66      	ldr	r3, [pc, #408]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a65      	ldr	r2, [pc, #404]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 80097a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d013      	beq.n	80097d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b0:	f7fa ff6c 	bl	800468c <HAL_GetTick>
 80097b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097b6:	e008      	b.n	80097ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097b8:	f7fa ff68 	bl	800468c <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b64      	cmp	r3, #100	; 0x64
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e213      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ca:	4b5b      	ldr	r3, [pc, #364]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0f0      	beq.n	80097b8 <HAL_RCC_OscConfig+0xc0>
 80097d6:	e014      	b.n	8009802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d8:	f7fa ff58 	bl	800468c <HAL_GetTick>
 80097dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097e0:	f7fa ff54 	bl	800468c <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b64      	cmp	r3, #100	; 0x64
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e1ff      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097f2:	4b51      	ldr	r3, [pc, #324]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f0      	bne.n	80097e0 <HAL_RCC_OscConfig+0xe8>
 80097fe:	e000      	b.n	8009802 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d063      	beq.n	80098d6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800980e:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 030c 	and.w	r3, r3, #12
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00b      	beq.n	8009832 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800981a:	4b47      	ldr	r3, [pc, #284]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 030c 	and.w	r3, r3, #12
        || \
 8009822:	2b08      	cmp	r3, #8
 8009824:	d11c      	bne.n	8009860 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009826:	4b44      	ldr	r3, [pc, #272]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d116      	bne.n	8009860 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009832:	4b41      	ldr	r3, [pc, #260]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <HAL_RCC_OscConfig+0x152>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d001      	beq.n	800984a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e1d3      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800984a:	4b3b      	ldr	r3, [pc, #236]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	4937      	ldr	r1, [pc, #220]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800985a:	4313      	orrs	r3, r2
 800985c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800985e:	e03a      	b.n	80098d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d020      	beq.n	80098aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009868:	4b34      	ldr	r3, [pc, #208]	; (800993c <HAL_RCC_OscConfig+0x244>)
 800986a:	2201      	movs	r2, #1
 800986c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800986e:	f7fa ff0d 	bl	800468c <HAL_GetTick>
 8009872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009874:	e008      	b.n	8009888 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009876:	f7fa ff09 	bl	800468c <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d901      	bls.n	8009888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e1b4      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009888:	4b2b      	ldr	r3, [pc, #172]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0f0      	beq.n	8009876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009894:	4b28      	ldr	r3, [pc, #160]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	4925      	ldr	r1, [pc, #148]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	600b      	str	r3, [r1, #0]
 80098a8:	e015      	b.n	80098d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <HAL_RCC_OscConfig+0x244>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b0:	f7fa feec 	bl	800468c <HAL_GetTick>
 80098b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098b6:	e008      	b.n	80098ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098b8:	f7fa fee8 	bl	800468c <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d901      	bls.n	80098ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e193      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098ca:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1f0      	bne.n	80098b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d036      	beq.n	8009950 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d016      	beq.n	8009918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098ea:	4b15      	ldr	r3, [pc, #84]	; (8009940 <HAL_RCC_OscConfig+0x248>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f0:	f7fa fecc 	bl	800468c <HAL_GetTick>
 80098f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098f8:	f7fa fec8 	bl	800468c <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e173      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800990a:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <HAL_RCC_OscConfig+0x240>)
 800990c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f0      	beq.n	80098f8 <HAL_RCC_OscConfig+0x200>
 8009916:	e01b      	b.n	8009950 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009918:	4b09      	ldr	r3, [pc, #36]	; (8009940 <HAL_RCC_OscConfig+0x248>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800991e:	f7fa feb5 	bl	800468c <HAL_GetTick>
 8009922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009924:	e00e      	b.n	8009944 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009926:	f7fa feb1 	bl	800468c <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d907      	bls.n	8009944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e15c      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
 8009938:	40023800 	.word	0x40023800
 800993c:	42470000 	.word	0x42470000
 8009940:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009944:	4b8a      	ldr	r3, [pc, #552]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1ea      	bne.n	8009926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 8097 	beq.w	8009a8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009962:	4b83      	ldr	r3, [pc, #524]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10f      	bne.n	800998e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	4b7f      	ldr	r3, [pc, #508]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	4a7e      	ldr	r2, [pc, #504]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800997c:	6413      	str	r3, [r2, #64]	; 0x40
 800997e:	4b7c      	ldr	r3, [pc, #496]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009986:	60bb      	str	r3, [r7, #8]
 8009988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800998a:	2301      	movs	r3, #1
 800998c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800998e:	4b79      	ldr	r3, [pc, #484]	; (8009b74 <HAL_RCC_OscConfig+0x47c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009996:	2b00      	cmp	r3, #0
 8009998:	d118      	bne.n	80099cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800999a:	4b76      	ldr	r3, [pc, #472]	; (8009b74 <HAL_RCC_OscConfig+0x47c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a75      	ldr	r2, [pc, #468]	; (8009b74 <HAL_RCC_OscConfig+0x47c>)
 80099a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099a6:	f7fa fe71 	bl	800468c <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099ae:	f7fa fe6d 	bl	800468c <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e118      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c0:	4b6c      	ldr	r3, [pc, #432]	; (8009b74 <HAL_RCC_OscConfig+0x47c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d106      	bne.n	80099e2 <HAL_RCC_OscConfig+0x2ea>
 80099d4:	4b66      	ldr	r3, [pc, #408]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 80099d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d8:	4a65      	ldr	r2, [pc, #404]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 80099da:	f043 0301 	orr.w	r3, r3, #1
 80099de:	6713      	str	r3, [r2, #112]	; 0x70
 80099e0:	e01c      	b.n	8009a1c <HAL_RCC_OscConfig+0x324>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	2b05      	cmp	r3, #5
 80099e8:	d10c      	bne.n	8009a04 <HAL_RCC_OscConfig+0x30c>
 80099ea:	4b61      	ldr	r3, [pc, #388]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 80099ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ee:	4a60      	ldr	r2, [pc, #384]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 80099f0:	f043 0304 	orr.w	r3, r3, #4
 80099f4:	6713      	str	r3, [r2, #112]	; 0x70
 80099f6:	4b5e      	ldr	r3, [pc, #376]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	4a5d      	ldr	r2, [pc, #372]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 80099fc:	f043 0301 	orr.w	r3, r3, #1
 8009a00:	6713      	str	r3, [r2, #112]	; 0x70
 8009a02:	e00b      	b.n	8009a1c <HAL_RCC_OscConfig+0x324>
 8009a04:	4b5a      	ldr	r3, [pc, #360]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a08:	4a59      	ldr	r2, [pc, #356]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a0a:	f023 0301 	bic.w	r3, r3, #1
 8009a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009a10:	4b57      	ldr	r3, [pc, #348]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a14:	4a56      	ldr	r2, [pc, #344]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a16:	f023 0304 	bic.w	r3, r3, #4
 8009a1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d015      	beq.n	8009a50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a24:	f7fa fe32 	bl	800468c <HAL_GetTick>
 8009a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a2a:	e00a      	b.n	8009a42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a2c:	f7fa fe2e 	bl	800468c <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e0d7      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a42:	4b4b      	ldr	r3, [pc, #300]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0ee      	beq.n	8009a2c <HAL_RCC_OscConfig+0x334>
 8009a4e:	e014      	b.n	8009a7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a50:	f7fa fe1c 	bl	800468c <HAL_GetTick>
 8009a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a56:	e00a      	b.n	8009a6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a58:	f7fa fe18 	bl	800468c <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e0c1      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a6e:	4b40      	ldr	r3, [pc, #256]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1ee      	bne.n	8009a58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d105      	bne.n	8009a8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a80:	4b3b      	ldr	r3, [pc, #236]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a84:	4a3a      	ldr	r2, [pc, #232]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80ad 	beq.w	8009bf0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a96:	4b36      	ldr	r3, [pc, #216]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 030c 	and.w	r3, r3, #12
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d060      	beq.n	8009b64 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d145      	bne.n	8009b36 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aaa:	4b33      	ldr	r3, [pc, #204]	; (8009b78 <HAL_RCC_OscConfig+0x480>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab0:	f7fa fdec 	bl	800468c <HAL_GetTick>
 8009ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ab6:	e008      	b.n	8009aca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ab8:	f7fa fde8 	bl	800468c <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e093      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aca:	4b29      	ldr	r3, [pc, #164]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1f0      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	69da      	ldr	r2, [r3, #28]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	019b      	lsls	r3, r3, #6
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aec:	085b      	lsrs	r3, r3, #1
 8009aee:	3b01      	subs	r3, #1
 8009af0:	041b      	lsls	r3, r3, #16
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	061b      	lsls	r3, r3, #24
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	071b      	lsls	r3, r3, #28
 8009b02:	491b      	ldr	r1, [pc, #108]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b08:	4b1b      	ldr	r3, [pc, #108]	; (8009b78 <HAL_RCC_OscConfig+0x480>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0e:	f7fa fdbd 	bl	800468c <HAL_GetTick>
 8009b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b14:	e008      	b.n	8009b28 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b16:	f7fa fdb9 	bl	800468c <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e064      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b28:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0f0      	beq.n	8009b16 <HAL_RCC_OscConfig+0x41e>
 8009b34:	e05c      	b.n	8009bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <HAL_RCC_OscConfig+0x480>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fa fda6 	bl	800468c <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b44:	f7fa fda2 	bl	800468c <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e04d      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b56:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <HAL_RCC_OscConfig+0x478>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x44c>
 8009b62:	e045      	b.n	8009bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d107      	bne.n	8009b7c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e040      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
 8009b70:	40023800 	.word	0x40023800
 8009b74:	40007000 	.word	0x40007000
 8009b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b7c:	4b1f      	ldr	r3, [pc, #124]	; (8009bfc <HAL_RCC_OscConfig+0x504>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d030      	beq.n	8009bec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d129      	bne.n	8009bec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d122      	bne.n	8009bec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bac:	4013      	ands	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d119      	bne.n	8009bec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d10f      	bne.n	8009bec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d107      	bne.n	8009bec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d001      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e000      	b.n	8009bf2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40023800 	.word	0x40023800

08009c00 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e038      	b.n	8009c88 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d106      	bne.n	8009c30 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7f9 fb3a 	bl	80032a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3308      	adds	r3, #8
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f002 f8be 	bl	800bdbc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	f002 f946 	bl	800bedc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6858      	ldr	r0, [r3, #4]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	f002 f98d 	bl	800bf7c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	6892      	ldr	r2, [r2, #8]
 8009c6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	6892      	ldr	r2, [r2, #8]
 8009c76:	f041 0101 	orr.w	r1, r1, #1
 8009c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e041      	b.n	8009d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7f9 f904 	bl	8002ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f000 fc62 	bl	800a598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d001      	beq.n	8009d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e04e      	b.n	8009de6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0201 	orr.w	r2, r2, #1
 8009d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a23      	ldr	r2, [pc, #140]	; (8009df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d022      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d72:	d01d      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a1f      	ldr	r2, [pc, #124]	; (8009df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d018      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a1e      	ldr	r2, [pc, #120]	; (8009dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d013      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a1c      	ldr	r2, [pc, #112]	; (8009e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00e      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a1b      	ldr	r2, [pc, #108]	; (8009e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d009      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a19      	ldr	r2, [pc, #100]	; (8009e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d004      	beq.n	8009db0 <HAL_TIM_Base_Start_IT+0x80>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a18      	ldr	r2, [pc, #96]	; (8009e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d111      	bne.n	8009dd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b06      	cmp	r3, #6
 8009dc0:	d010      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0201 	orr.w	r2, r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd2:	e007      	b.n	8009de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40000400 	.word	0x40000400
 8009dfc:	40000800 	.word	0x40000800
 8009e00:	40000c00 	.word	0x40000c00
 8009e04:	40010400 	.word	0x40010400
 8009e08:	40014000 	.word	0x40014000
 8009e0c:	40001800 	.word	0x40001800

08009e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e041      	b.n	8009ea6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f839 	bl	8009eae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f000 fba2 	bl	800a598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
	...

08009ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d109      	bne.n	8009ee8 <HAL_TIM_PWM_Start+0x24>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	bf14      	ite	ne
 8009ee0:	2301      	movne	r3, #1
 8009ee2:	2300      	moveq	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e022      	b.n	8009f2e <HAL_TIM_PWM_Start+0x6a>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d109      	bne.n	8009f02 <HAL_TIM_PWM_Start+0x3e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	bf14      	ite	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	2300      	moveq	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	e015      	b.n	8009f2e <HAL_TIM_PWM_Start+0x6a>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d109      	bne.n	8009f1c <HAL_TIM_PWM_Start+0x58>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	bf14      	ite	ne
 8009f14:	2301      	movne	r3, #1
 8009f16:	2300      	moveq	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	e008      	b.n	8009f2e <HAL_TIM_PWM_Start+0x6a>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	bf14      	ite	ne
 8009f28:	2301      	movne	r3, #1
 8009f2a:	2300      	moveq	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e07c      	b.n	800a030 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d104      	bne.n	8009f46 <HAL_TIM_PWM_Start+0x82>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f44:	e013      	b.n	8009f6e <HAL_TIM_PWM_Start+0xaa>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d104      	bne.n	8009f56 <HAL_TIM_PWM_Start+0x92>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f54:	e00b      	b.n	8009f6e <HAL_TIM_PWM_Start+0xaa>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d104      	bne.n	8009f66 <HAL_TIM_PWM_Start+0xa2>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f64:	e003      	b.n	8009f6e <HAL_TIM_PWM_Start+0xaa>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2201      	movs	r2, #1
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fe04 	bl	800ab84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a2d      	ldr	r2, [pc, #180]	; (800a038 <HAL_TIM_PWM_Start+0x174>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d004      	beq.n	8009f90 <HAL_TIM_PWM_Start+0xcc>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a2c      	ldr	r2, [pc, #176]	; (800a03c <HAL_TIM_PWM_Start+0x178>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d101      	bne.n	8009f94 <HAL_TIM_PWM_Start+0xd0>
 8009f90:	2301      	movs	r3, #1
 8009f92:	e000      	b.n	8009f96 <HAL_TIM_PWM_Start+0xd2>
 8009f94:	2300      	movs	r3, #0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a22      	ldr	r2, [pc, #136]	; (800a038 <HAL_TIM_PWM_Start+0x174>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d022      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fbc:	d01d      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <HAL_TIM_PWM_Start+0x17c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d018      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <HAL_TIM_PWM_Start+0x180>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d013      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1c      	ldr	r2, [pc, #112]	; (800a048 <HAL_TIM_PWM_Start+0x184>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00e      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a16      	ldr	r2, [pc, #88]	; (800a03c <HAL_TIM_PWM_Start+0x178>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d009      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a18      	ldr	r2, [pc, #96]	; (800a04c <HAL_TIM_PWM_Start+0x188>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d004      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x136>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a16      	ldr	r2, [pc, #88]	; (800a050 <HAL_TIM_PWM_Start+0x18c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d111      	bne.n	800a01e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b06      	cmp	r3, #6
 800a00a:	d010      	beq.n	800a02e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0201 	orr.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01c:	e007      	b.n	800a02e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0201 	orr.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40010000 	.word	0x40010000
 800a03c:	40010400 	.word	0x40010400
 800a040:	40000400 	.word	0x40000400
 800a044:	40000800 	.word	0x40000800
 800a048:	40000c00 	.word	0x40000c00
 800a04c:	40014000 	.word	0x40014000
 800a050:	40001800 	.word	0x40001800

0800a054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d020      	beq.n	800a0b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01b      	beq.n	800a0b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0202 	mvn.w	r2, #2
 800a088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	f003 0303 	and.w	r3, r3, #3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa5b 	bl	800a55a <HAL_TIM_IC_CaptureCallback>
 800a0a4:	e005      	b.n	800a0b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa4d 	bl	800a546 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fa5e 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d020      	beq.n	800a104 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d01b      	beq.n	800a104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f06f 0204 	mvn.w	r2, #4
 800a0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2202      	movs	r2, #2
 800a0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa35 	bl	800a55a <HAL_TIM_IC_CaptureCallback>
 800a0f0:	e005      	b.n	800a0fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa27 	bl	800a546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fa38 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d020      	beq.n	800a150 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f003 0308 	and.w	r3, r3, #8
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01b      	beq.n	800a150 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f06f 0208 	mvn.w	r2, #8
 800a120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2204      	movs	r2, #4
 800a126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa0f 	bl	800a55a <HAL_TIM_IC_CaptureCallback>
 800a13c:	e005      	b.n	800a14a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa01 	bl	800a546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa12 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f003 0310 	and.w	r3, r3, #16
 800a156:	2b00      	cmp	r3, #0
 800a158:	d020      	beq.n	800a19c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f003 0310 	and.w	r3, r3, #16
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01b      	beq.n	800a19c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f06f 0210 	mvn.w	r2, #16
 800a16c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2208      	movs	r2, #8
 800a172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f9e9 	bl	800a55a <HAL_TIM_IC_CaptureCallback>
 800a188:	e005      	b.n	800a196 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f9db 	bl	800a546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f9ec 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00c      	beq.n	800a1c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d007      	beq.n	800a1c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f06f 0201 	mvn.w	r2, #1
 800a1b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7f8 f87c 	bl	80022b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fd7c 	bl	800acdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00c      	beq.n	800a208 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f9bd 	bl	800a582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00c      	beq.n	800a22c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f003 0320 	and.w	r3, r3, #32
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f06f 0220 	mvn.w	r2, #32
 800a224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fd4e 	bl	800acc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a22c:	bf00      	nop
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a24e:	2302      	movs	r3, #2
 800a250:	e0ae      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b0c      	cmp	r3, #12
 800a25e:	f200 809f 	bhi.w	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a29d 	.word	0x0800a29d
 800a26c:	0800a3a1 	.word	0x0800a3a1
 800a270:	0800a3a1 	.word	0x0800a3a1
 800a274:	0800a3a1 	.word	0x0800a3a1
 800a278:	0800a2dd 	.word	0x0800a2dd
 800a27c:	0800a3a1 	.word	0x0800a3a1
 800a280:	0800a3a1 	.word	0x0800a3a1
 800a284:	0800a3a1 	.word	0x0800a3a1
 800a288:	0800a31f 	.word	0x0800a31f
 800a28c:	0800a3a1 	.word	0x0800a3a1
 800a290:	0800a3a1 	.word	0x0800a3a1
 800a294:	0800a3a1 	.word	0x0800a3a1
 800a298:	0800a35f 	.word	0x0800a35f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fa24 	bl	800a6f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0208 	orr.w	r2, r2, #8
 800a2b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0204 	bic.w	r2, r2, #4
 800a2c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6999      	ldr	r1, [r3, #24]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	619a      	str	r2, [r3, #24]
      break;
 800a2da:	e064      	b.n	800a3a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 fa74 	bl	800a7d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	699a      	ldr	r2, [r3, #24]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6999      	ldr	r1, [r3, #24]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	021a      	lsls	r2, r3, #8
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	619a      	str	r2, [r3, #24]
      break;
 800a31c:	e043      	b.n	800a3a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fac9 	bl	800a8bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69da      	ldr	r2, [r3, #28]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0208 	orr.w	r2, r2, #8
 800a338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69da      	ldr	r2, [r3, #28]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0204 	bic.w	r2, r2, #4
 800a348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69d9      	ldr	r1, [r3, #28]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691a      	ldr	r2, [r3, #16]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	61da      	str	r2, [r3, #28]
      break;
 800a35c:	e023      	b.n	800a3a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fb1d 	bl	800a9a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69da      	ldr	r2, [r3, #28]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69d9      	ldr	r1, [r3, #28]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	021a      	lsls	r2, r3, #8
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	61da      	str	r2, [r3, #28]
      break;
 800a39e:	e002      	b.n	800a3a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_TIM_ConfigClockSource+0x1c>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e0b4      	b.n	800a53e <HAL_TIM_ConfigClockSource+0x186>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a40c:	d03e      	beq.n	800a48c <HAL_TIM_ConfigClockSource+0xd4>
 800a40e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a412:	f200 8087 	bhi.w	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41a:	f000 8086 	beq.w	800a52a <HAL_TIM_ConfigClockSource+0x172>
 800a41e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a422:	d87f      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a424:	2b70      	cmp	r3, #112	; 0x70
 800a426:	d01a      	beq.n	800a45e <HAL_TIM_ConfigClockSource+0xa6>
 800a428:	2b70      	cmp	r3, #112	; 0x70
 800a42a:	d87b      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a42c:	2b60      	cmp	r3, #96	; 0x60
 800a42e:	d050      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x11a>
 800a430:	2b60      	cmp	r3, #96	; 0x60
 800a432:	d877      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a434:	2b50      	cmp	r3, #80	; 0x50
 800a436:	d03c      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0xfa>
 800a438:	2b50      	cmp	r3, #80	; 0x50
 800a43a:	d873      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a43c:	2b40      	cmp	r3, #64	; 0x40
 800a43e:	d058      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x13a>
 800a440:	2b40      	cmp	r3, #64	; 0x40
 800a442:	d86f      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a444:	2b30      	cmp	r3, #48	; 0x30
 800a446:	d064      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x15a>
 800a448:	2b30      	cmp	r3, #48	; 0x30
 800a44a:	d86b      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a44c:	2b20      	cmp	r3, #32
 800a44e:	d060      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x15a>
 800a450:	2b20      	cmp	r3, #32
 800a452:	d867      	bhi.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d05c      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x15a>
 800a458:	2b10      	cmp	r3, #16
 800a45a:	d05a      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x15a>
 800a45c:	e062      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a46e:	f000 fb69 	bl	800ab44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	609a      	str	r2, [r3, #8]
      break;
 800a48a:	e04f      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a49c:	f000 fb52 	bl	800ab44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4ae:	609a      	str	r2, [r3, #8]
      break;
 800a4b0:	e03c      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f000 fac6 	bl	800aa50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2150      	movs	r1, #80	; 0x50
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fb1f 	bl	800ab0e <TIM_ITRx_SetConfig>
      break;
 800a4d0:	e02c      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f000 fae5 	bl	800aaae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2160      	movs	r1, #96	; 0x60
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fb0f 	bl	800ab0e <TIM_ITRx_SetConfig>
      break;
 800a4f0:	e01c      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4fe:	461a      	mov	r2, r3
 800a500:	f000 faa6 	bl	800aa50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2140      	movs	r1, #64	; 0x40
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 faff 	bl	800ab0e <TIM_ITRx_SetConfig>
      break;
 800a510:	e00c      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f000 faf6 	bl	800ab0e <TIM_ITRx_SetConfig>
      break;
 800a522:	e003      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
      break;
 800a528:	e000      	b.n	800a52c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a52a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a54e:	bf00      	nop
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a58a:	bf00      	nop
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a46      	ldr	r2, [pc, #280]	; (800a6c4 <TIM_Base_SetConfig+0x12c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d013      	beq.n	800a5d8 <TIM_Base_SetConfig+0x40>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b6:	d00f      	beq.n	800a5d8 <TIM_Base_SetConfig+0x40>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a43      	ldr	r2, [pc, #268]	; (800a6c8 <TIM_Base_SetConfig+0x130>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00b      	beq.n	800a5d8 <TIM_Base_SetConfig+0x40>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a42      	ldr	r2, [pc, #264]	; (800a6cc <TIM_Base_SetConfig+0x134>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d007      	beq.n	800a5d8 <TIM_Base_SetConfig+0x40>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a41      	ldr	r2, [pc, #260]	; (800a6d0 <TIM_Base_SetConfig+0x138>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d003      	beq.n	800a5d8 <TIM_Base_SetConfig+0x40>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a40      	ldr	r2, [pc, #256]	; (800a6d4 <TIM_Base_SetConfig+0x13c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d108      	bne.n	800a5ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a35      	ldr	r2, [pc, #212]	; (800a6c4 <TIM_Base_SetConfig+0x12c>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d02b      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5f8:	d027      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a32      	ldr	r2, [pc, #200]	; (800a6c8 <TIM_Base_SetConfig+0x130>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d023      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a31      	ldr	r2, [pc, #196]	; (800a6cc <TIM_Base_SetConfig+0x134>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d01f      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a30      	ldr	r2, [pc, #192]	; (800a6d0 <TIM_Base_SetConfig+0x138>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d01b      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a2f      	ldr	r2, [pc, #188]	; (800a6d4 <TIM_Base_SetConfig+0x13c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d017      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a2e      	ldr	r2, [pc, #184]	; (800a6d8 <TIM_Base_SetConfig+0x140>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d013      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a2d      	ldr	r2, [pc, #180]	; (800a6dc <TIM_Base_SetConfig+0x144>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00f      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a2c      	ldr	r2, [pc, #176]	; (800a6e0 <TIM_Base_SetConfig+0x148>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00b      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a2b      	ldr	r2, [pc, #172]	; (800a6e4 <TIM_Base_SetConfig+0x14c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d007      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a2a      	ldr	r2, [pc, #168]	; (800a6e8 <TIM_Base_SetConfig+0x150>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d003      	beq.n	800a64a <TIM_Base_SetConfig+0xb2>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a29      	ldr	r2, [pc, #164]	; (800a6ec <TIM_Base_SetConfig+0x154>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d108      	bne.n	800a65c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4313      	orrs	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a10      	ldr	r2, [pc, #64]	; (800a6c4 <TIM_Base_SetConfig+0x12c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d003      	beq.n	800a690 <TIM_Base_SetConfig+0xf8>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a12      	ldr	r2, [pc, #72]	; (800a6d4 <TIM_Base_SetConfig+0x13c>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d103      	bne.n	800a698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d105      	bne.n	800a6b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f023 0201 	bic.w	r2, r3, #1
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	611a      	str	r2, [r3, #16]
  }
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	40010000 	.word	0x40010000
 800a6c8:	40000400 	.word	0x40000400
 800a6cc:	40000800 	.word	0x40000800
 800a6d0:	40000c00 	.word	0x40000c00
 800a6d4:	40010400 	.word	0x40010400
 800a6d8:	40014000 	.word	0x40014000
 800a6dc:	40014400 	.word	0x40014400
 800a6e0:	40014800 	.word	0x40014800
 800a6e4:	40001800 	.word	0x40001800
 800a6e8:	40001c00 	.word	0x40001c00
 800a6ec:	40002000 	.word	0x40002000

0800a6f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	f023 0201 	bic.w	r2, r3, #1
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 0302 	bic.w	r3, r3, #2
 800a738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4313      	orrs	r3, r2
 800a742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a20      	ldr	r2, [pc, #128]	; (800a7c8 <TIM_OC1_SetConfig+0xd8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d003      	beq.n	800a754 <TIM_OC1_SetConfig+0x64>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a1f      	ldr	r2, [pc, #124]	; (800a7cc <TIM_OC1_SetConfig+0xdc>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d10c      	bne.n	800a76e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f023 0308 	bic.w	r3, r3, #8
 800a75a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	4313      	orrs	r3, r2
 800a764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f023 0304 	bic.w	r3, r3, #4
 800a76c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <TIM_OC1_SetConfig+0xd8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d003      	beq.n	800a77e <TIM_OC1_SetConfig+0x8e>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a14      	ldr	r2, [pc, #80]	; (800a7cc <TIM_OC1_SetConfig+0xdc>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d111      	bne.n	800a7a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a78c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	4313      	orrs	r3, r2
 800a796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	621a      	str	r2, [r3, #32]
}
 800a7bc:	bf00      	nop
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	40010000 	.word	0x40010000
 800a7cc:	40010400 	.word	0x40010400

0800a7d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	f023 0210 	bic.w	r2, r3, #16
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	021b      	lsls	r3, r3, #8
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4313      	orrs	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f023 0320 	bic.w	r3, r3, #32
 800a81a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a22      	ldr	r2, [pc, #136]	; (800a8b4 <TIM_OC2_SetConfig+0xe4>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d003      	beq.n	800a838 <TIM_OC2_SetConfig+0x68>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <TIM_OC2_SetConfig+0xe8>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d10d      	bne.n	800a854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a83e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a852:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a17      	ldr	r2, [pc, #92]	; (800a8b4 <TIM_OC2_SetConfig+0xe4>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC2_SetConfig+0x94>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a16      	ldr	r2, [pc, #88]	; (800a8b8 <TIM_OC2_SetConfig+0xe8>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d113      	bne.n	800a88c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a86a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	621a      	str	r2, [r3, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40010400 	.word	0x40010400

0800a8bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	69db      	ldr	r3, [r3, #28]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0303 	bic.w	r3, r3, #3
 800a8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	021b      	lsls	r3, r3, #8
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a21      	ldr	r2, [pc, #132]	; (800a99c <TIM_OC3_SetConfig+0xe0>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d003      	beq.n	800a922 <TIM_OC3_SetConfig+0x66>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a20      	ldr	r2, [pc, #128]	; (800a9a0 <TIM_OC3_SetConfig+0xe4>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d10d      	bne.n	800a93e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	4313      	orrs	r3, r2
 800a934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a16      	ldr	r2, [pc, #88]	; (800a99c <TIM_OC3_SetConfig+0xe0>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d003      	beq.n	800a94e <TIM_OC3_SetConfig+0x92>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a15      	ldr	r2, [pc, #84]	; (800a9a0 <TIM_OC3_SetConfig+0xe4>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d113      	bne.n	800a976 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4313      	orrs	r3, r2
 800a968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	621a      	str	r2, [r3, #32]
}
 800a990:	bf00      	nop
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40010400 	.word	0x40010400

0800a9a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	021b      	lsls	r3, r3, #8
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	031b      	lsls	r3, r3, #12
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a12      	ldr	r2, [pc, #72]	; (800aa48 <TIM_OC4_SetConfig+0xa4>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d003      	beq.n	800aa0c <TIM_OC4_SetConfig+0x68>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a11      	ldr	r2, [pc, #68]	; (800aa4c <TIM_OC4_SetConfig+0xa8>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d109      	bne.n	800aa20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	019b      	lsls	r3, r3, #6
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	621a      	str	r2, [r3, #32]
}
 800aa3a:	bf00      	nop
 800aa3c:	371c      	adds	r7, #28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	40010000 	.word	0x40010000
 800aa4c:	40010400 	.word	0x40010400

0800aa50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f023 0201 	bic.w	r2, r3, #1
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f023 030a 	bic.w	r3, r3, #10
 800aa8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	621a      	str	r2, [r3, #32]
}
 800aaa2:	bf00      	nop
 800aaa4:	371c      	adds	r7, #28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b087      	sub	sp, #28
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	f023 0210 	bic.w	r2, r3, #16
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	031b      	lsls	r3, r3, #12
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	621a      	str	r2, [r3, #32]
}
 800ab02:	bf00      	nop
 800ab04:	371c      	adds	r7, #28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b085      	sub	sp, #20
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	f043 0307 	orr.w	r3, r3, #7
 800ab30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	609a      	str	r2, [r3, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	021a      	lsls	r2, r3, #8
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	609a      	str	r2, [r3, #8]
}
 800ab78:	bf00      	nop
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f003 031f 	and.w	r3, r3, #31
 800ab96:	2201      	movs	r2, #1
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6a1a      	ldr	r2, [r3, #32]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	43db      	mvns	r3, r3
 800aba6:	401a      	ands	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f003 031f 	and.w	r3, r3, #31
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	fa01 f303 	lsl.w	r3, r1, r3
 800abbc:	431a      	orrs	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abe4:	2302      	movs	r3, #2
 800abe6:	e05a      	b.n	800ac9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a21      	ldr	r2, [pc, #132]	; (800acac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d022      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac34:	d01d      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a1d      	ldr	r2, [pc, #116]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d018      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a1b      	ldr	r2, [pc, #108]	; (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d013      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a1a      	ldr	r2, [pc, #104]	; (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d00e      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a18      	ldr	r2, [pc, #96]	; (800acbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d009      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d004      	beq.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a15      	ldr	r2, [pc, #84]	; (800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d10c      	bne.n	800ac8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	40010000 	.word	0x40010000
 800acb0:	40000400 	.word	0x40000400
 800acb4:	40000800 	.word	0x40000800
 800acb8:	40000c00 	.word	0x40000c00
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40001800 	.word	0x40001800

0800acc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e042      	b.n	800ad88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7f8 f9ce 	bl	80030b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2224      	movs	r2, #36	; 0x24
 800ad20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68da      	ldr	r2, [r3, #12]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fdbd 	bl	800b8b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	691a      	ldr	r2, [r3, #16]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	695a      	ldr	r2, [r3, #20]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2220      	movs	r2, #32
 800ad74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08a      	sub	sp, #40	; 0x28
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	603b      	str	r3, [r7, #0]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b20      	cmp	r3, #32
 800adae:	d175      	bne.n	800ae9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_UART_Transmit+0x2c>
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e06e      	b.n	800ae9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2221      	movs	r2, #33	; 0x21
 800adca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adce:	f7f9 fc5d 	bl	800468c <HAL_GetTick>
 800add2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	88fa      	ldrh	r2, [r7, #6]
 800add8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	88fa      	ldrh	r2, [r7, #6]
 800adde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ade8:	d108      	bne.n	800adfc <HAL_UART_Transmit+0x6c>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	61bb      	str	r3, [r7, #24]
 800adfa:	e003      	b.n	800ae04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae04:	e02e      	b.n	800ae64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2180      	movs	r1, #128	; 0x80
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 fb1f 	bl	800b454 <UART_WaitOnFlagUntilTimeout>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e03a      	b.n	800ae9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10b      	bne.n	800ae46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	3302      	adds	r3, #2
 800ae42:	61bb      	str	r3, [r7, #24]
 800ae44:	e007      	b.n	800ae56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	3301      	adds	r3, #1
 800ae54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1cb      	bne.n	800ae06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2200      	movs	r2, #0
 800ae76:	2140      	movs	r1, #64	; 0x40
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 faeb 	bl	800b454 <UART_WaitOnFlagUntilTimeout>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e006      	b.n	800ae9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e000      	b.n	800ae9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ae9c:	2302      	movs	r3, #2
  }
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d112      	bne.n	800aee6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d002      	beq.n	800aecc <HAL_UART_Receive_IT+0x26>
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e00b      	b.n	800aee8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aed6:	88fb      	ldrh	r3, [r7, #6]
 800aed8:	461a      	mov	r2, r3
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 fb12 	bl	800b506 <UART_Start_Receive_IT>
 800aee2:	4603      	mov	r3, r0
 800aee4:	e000      	b.n	800aee8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800aee6:	2302      	movs	r3, #2
  }
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b0ba      	sub	sp, #232	; 0xe8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af16:	2300      	movs	r3, #0
 800af18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800af2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10f      	bne.n	800af56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af3a:	f003 0320 	and.w	r3, r3, #32
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <HAL_UART_IRQHandler+0x66>
 800af42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af46:	f003 0320 	and.w	r3, r3, #32
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fbf2 	bl	800b738 <UART_Receive_IT>
      return;
 800af54:	e25b      	b.n	800b40e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800af56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 80de 	beq.w	800b11c <HAL_UART_IRQHandler+0x22c>
 800af60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800af6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 80d1 	beq.w	800b11c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800af7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00b      	beq.n	800af9e <HAL_UART_IRQHandler+0xae>
 800af86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af96:	f043 0201 	orr.w	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa2:	f003 0304 	and.w	r3, r3, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00b      	beq.n	800afc2 <HAL_UART_IRQHandler+0xd2>
 800afaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d005      	beq.n	800afc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afba:	f043 0202 	orr.w	r2, r3, #2
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00b      	beq.n	800afe6 <HAL_UART_IRQHandler+0xf6>
 800afce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afde:	f043 0204 	orr.w	r2, r3, #4
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800afe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afea:	f003 0308 	and.w	r3, r3, #8
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d011      	beq.n	800b016 <HAL_UART_IRQHandler+0x126>
 800aff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b00      	cmp	r3, #0
 800affc:	d105      	bne.n	800b00a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800affe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00e:	f043 0208 	orr.w	r2, r3, #8
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 81f2 	beq.w	800b404 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d008      	beq.n	800b03e <HAL_UART_IRQHandler+0x14e>
 800b02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b030:	f003 0320 	and.w	r3, r3, #32
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb7d 	bl	800b738 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b048:	2b40      	cmp	r3, #64	; 0x40
 800b04a:	bf0c      	ite	eq
 800b04c:	2301      	moveq	r3, #1
 800b04e:	2300      	movne	r3, #0
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05a:	f003 0308 	and.w	r3, r3, #8
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d103      	bne.n	800b06a <HAL_UART_IRQHandler+0x17a>
 800b062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b066:	2b00      	cmp	r3, #0
 800b068:	d04f      	beq.n	800b10a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa85 	bl	800b57a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07a:	2b40      	cmp	r3, #64	; 0x40
 800b07c:	d141      	bne.n	800b102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3314      	adds	r3, #20
 800b084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b09c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3314      	adds	r3, #20
 800b0a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b0aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b0ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b0b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0ba:	e841 2300 	strex	r3, r2, [r1]
 800b0be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b0c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1d9      	bne.n	800b07e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d013      	beq.n	800b0fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d6:	4a7e      	ldr	r2, [pc, #504]	; (800b2d0 <HAL_UART_IRQHandler+0x3e0>)
 800b0d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fa fa34 	bl	800554c <HAL_DMA_Abort_IT>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d016      	beq.n	800b118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f8:	e00e      	b.n	800b118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f994 	bl	800b428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b100:	e00a      	b.n	800b118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f990 	bl	800b428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b108:	e006      	b.n	800b118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f98c 	bl	800b428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b116:	e175      	b.n	800b404 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b118:	bf00      	nop
    return;
 800b11a:	e173      	b.n	800b404 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b120:	2b01      	cmp	r3, #1
 800b122:	f040 814f 	bne.w	800b3c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 8148 	beq.w	800b3c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 8141 	beq.w	800b3c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b142:	2300      	movs	r3, #0
 800b144:	60bb      	str	r3, [r7, #8]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	60bb      	str	r3, [r7, #8]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	60bb      	str	r3, [r7, #8]
 800b156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b162:	2b40      	cmp	r3, #64	; 0x40
 800b164:	f040 80b6 	bne.w	800b2d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 8145 	beq.w	800b408 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b186:	429a      	cmp	r2, r3
 800b188:	f080 813e 	bcs.w	800b408 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b192:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b19e:	f000 8088 	beq.w	800b2b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	330c      	adds	r3, #12
 800b1a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b1b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b1ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b1d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b1da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1de:	e841 2300 	strex	r3, r2, [r1]
 800b1e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b1e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1d9      	bne.n	800b1a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3314      	adds	r3, #20
 800b1f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b1fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b200:	f023 0301 	bic.w	r3, r3, #1
 800b204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3314      	adds	r3, #20
 800b20e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b212:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b216:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b218:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b21a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b21e:	e841 2300 	strex	r3, r2, [r1]
 800b222:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e1      	bne.n	800b1ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3314      	adds	r3, #20
 800b230:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b234:	e853 3f00 	ldrex	r3, [r3]
 800b238:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b23a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3314      	adds	r3, #20
 800b24a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b24e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b250:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b254:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b25c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e3      	bne.n	800b22a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	330c      	adds	r3, #12
 800b276:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27a:	e853 3f00 	ldrex	r3, [r3]
 800b27e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b282:	f023 0310 	bic.w	r3, r3, #16
 800b286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	330c      	adds	r3, #12
 800b290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b294:	65ba      	str	r2, [r7, #88]	; 0x58
 800b296:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b29a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e3      	bne.n	800b270 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fa f8dd 	bl	800546c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f8b7 	bl	800b43c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2ce:	e09b      	b.n	800b408 <HAL_UART_IRQHandler+0x518>
 800b2d0:	0800b641 	.word	0x0800b641
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 808e 	beq.w	800b40c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b2f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 8089 	beq.w	800b40c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	330c      	adds	r3, #12
 800b300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	e853 3f00 	ldrex	r3, [r3]
 800b308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	330c      	adds	r3, #12
 800b31a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b31e:	647a      	str	r2, [r7, #68]	; 0x44
 800b320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b326:	e841 2300 	strex	r3, r2, [r1]
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1e3      	bne.n	800b2fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3314      	adds	r3, #20
 800b338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	623b      	str	r3, [r7, #32]
   return(result);
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	f023 0301 	bic.w	r3, r3, #1
 800b348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3314      	adds	r3, #20
 800b352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b356:	633a      	str	r2, [r7, #48]	; 0x30
 800b358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35e:	e841 2300 	strex	r3, r2, [r1]
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e3      	bne.n	800b332 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	330c      	adds	r3, #12
 800b37e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	60fb      	str	r3, [r7, #12]
   return(result);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f023 0310 	bic.w	r3, r3, #16
 800b38e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	330c      	adds	r3, #12
 800b398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b39c:	61fa      	str	r2, [r7, #28]
 800b39e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a0:	69b9      	ldr	r1, [r7, #24]
 800b3a2:	69fa      	ldr	r2, [r7, #28]
 800b3a4:	e841 2300 	strex	r3, r2, [r1]
 800b3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1e3      	bne.n	800b378 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f83d 	bl	800b43c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3c2:	e023      	b.n	800b40c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d009      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x4f4>
 800b3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f943 	bl	800b668 <UART_Transmit_IT>
    return;
 800b3e2:	e014      	b.n	800b40e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00e      	beq.n	800b40e <HAL_UART_IRQHandler+0x51e>
 800b3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d008      	beq.n	800b40e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f983 	bl	800b708 <UART_EndTransmit_IT>
    return;
 800b402:	e004      	b.n	800b40e <HAL_UART_IRQHandler+0x51e>
    return;
 800b404:	bf00      	nop
 800b406:	e002      	b.n	800b40e <HAL_UART_IRQHandler+0x51e>
      return;
 800b408:	bf00      	nop
 800b40a:	e000      	b.n	800b40e <HAL_UART_IRQHandler+0x51e>
      return;
 800b40c:	bf00      	nop
  }
}
 800b40e:	37e8      	adds	r7, #232	; 0xe8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	4613      	mov	r3, r2
 800b462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b464:	e03b      	b.n	800b4de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b466:	6a3b      	ldr	r3, [r7, #32]
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46c:	d037      	beq.n	800b4de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b46e:	f7f9 f90d 	bl	800468c <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	6a3a      	ldr	r2, [r7, #32]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d302      	bcc.n	800b484 <UART_WaitOnFlagUntilTimeout+0x30>
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e03a      	b.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	d023      	beq.n	800b4de <UART_WaitOnFlagUntilTimeout+0x8a>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b80      	cmp	r3, #128	; 0x80
 800b49a:	d020      	beq.n	800b4de <UART_WaitOnFlagUntilTimeout+0x8a>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b40      	cmp	r3, #64	; 0x40
 800b4a0:	d01d      	beq.n	800b4de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d116      	bne.n	800b4de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	617b      	str	r3, [r7, #20]
 800b4c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 f857 	bl	800b57a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e00f      	b.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	bf0c      	ite	eq
 800b4ee:	2301      	moveq	r3, #1
 800b4f0:	2300      	movne	r3, #0
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d0b4      	beq.n	800b466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	4613      	mov	r3, r2
 800b512:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	88fa      	ldrh	r2, [r7, #6]
 800b51e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	88fa      	ldrh	r2, [r7, #6]
 800b524:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2222      	movs	r2, #34	; 0x22
 800b530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68da      	ldr	r2, [r3, #12]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b54a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	695a      	ldr	r2, [r3, #20]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f042 0201 	orr.w	r2, r2, #1
 800b55a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68da      	ldr	r2, [r3, #12]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f042 0220 	orr.w	r2, r2, #32
 800b56a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b095      	sub	sp, #84	; 0x54
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	330c      	adds	r3, #12
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	330c      	adds	r3, #12
 800b5a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5a2:	643a      	str	r2, [r7, #64]	; 0x40
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e5      	bne.n	800b582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	f023 0301 	bic.w	r3, r3, #1
 800b5cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5de:	e841 2300 	strex	r3, r2, [r1]
 800b5e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1e5      	bne.n	800b5b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d119      	bne.n	800b626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	60bb      	str	r3, [r7, #8]
   return(result);
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f023 0310 	bic.w	r3, r3, #16
 800b608:	647b      	str	r3, [r7, #68]	; 0x44
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	330c      	adds	r3, #12
 800b610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b612:	61ba      	str	r2, [r7, #24]
 800b614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6979      	ldr	r1, [r7, #20]
 800b618:	69ba      	ldr	r2, [r7, #24]
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	613b      	str	r3, [r7, #16]
   return(result);
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e5      	bne.n	800b5f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2220      	movs	r2, #32
 800b62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b634:	bf00      	nop
 800b636:	3754      	adds	r7, #84	; 0x54
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fee4 	bl	800b428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b660:	bf00      	nop
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b21      	cmp	r3, #33	; 0x21
 800b67a:	d13e      	bne.n	800b6fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b684:	d114      	bne.n	800b6b0 <UART_Transmit_IT+0x48>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d110      	bne.n	800b6b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	1c9a      	adds	r2, r3, #2
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	621a      	str	r2, [r3, #32]
 800b6ae:	e008      	b.n	800b6c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	1c59      	adds	r1, r3, #1
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	6211      	str	r1, [r2, #32]
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10f      	bne.n	800b6f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68da      	ldr	r2, [r3, #12]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e000      	b.n	800b6fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6fa:	2302      	movs	r3, #2
  }
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b71e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2220      	movs	r2, #32
 800b724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff fe73 	bl	800b414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08c      	sub	sp, #48	; 0x30
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b22      	cmp	r3, #34	; 0x22
 800b74a:	f040 80ae 	bne.w	800b8aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b756:	d117      	bne.n	800b788 <UART_Receive_IT+0x50>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d113      	bne.n	800b788 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b760:	2300      	movs	r3, #0
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	b29b      	uxth	r3, r3
 800b772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b776:	b29a      	uxth	r2, r3
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b780:	1c9a      	adds	r2, r3, #2
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	629a      	str	r2, [r3, #40]	; 0x28
 800b786:	e026      	b.n	800b7d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79a:	d007      	beq.n	800b7ac <UART_Receive_IT+0x74>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10a      	bne.n	800b7ba <UART_Receive_IT+0x82>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	701a      	strb	r2, [r3, #0]
 800b7b8:	e008      	b.n	800b7cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d15d      	bne.n	800b8a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68da      	ldr	r2, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 0220 	bic.w	r2, r2, #32
 800b7f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	695a      	ldr	r2, [r3, #20]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 0201 	bic.w	r2, r2, #1
 800b818:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d135      	bne.n	800b89c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	330c      	adds	r3, #12
 800b83c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	e853 3f00 	ldrex	r3, [r3]
 800b844:	613b      	str	r3, [r7, #16]
   return(result);
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f023 0310 	bic.w	r3, r3, #16
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	330c      	adds	r3, #12
 800b854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b856:	623a      	str	r2, [r7, #32]
 800b858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	69f9      	ldr	r1, [r7, #28]
 800b85c:	6a3a      	ldr	r2, [r7, #32]
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	61bb      	str	r3, [r7, #24]
   return(result);
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1e5      	bne.n	800b836 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b10      	cmp	r3, #16
 800b876:	d10a      	bne.n	800b88e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b878:	2300      	movs	r3, #0
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff fdd1 	bl	800b43c <HAL_UARTEx_RxEventCallback>
 800b89a:	e002      	b.n	800b8a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7f6 fb13 	bl	8001ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e002      	b.n	800b8ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	e000      	b.n	800b8ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b8aa:	2302      	movs	r3, #2
  }
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3730      	adds	r7, #48	; 0x30
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8b8:	b0c0      	sub	sp, #256	; 0x100
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d0:	68d9      	ldr	r1, [r3, #12]
 800b8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	ea40 0301 	orr.w	r3, r0, r1
 800b8dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f8:	69db      	ldr	r3, [r3, #28]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b90c:	f021 010c 	bic.w	r1, r1, #12
 800b910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b91a:	430b      	orrs	r3, r1
 800b91c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b91e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b92e:	6999      	ldr	r1, [r3, #24]
 800b930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	ea40 0301 	orr.w	r3, r0, r1
 800b93a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800b93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b95      	ldr	r3, [pc, #596]	; (800bb98 <UART_SetConfig+0x2e4>)
 800b944:	429a      	cmp	r2, r3
 800b946:	d011      	beq.n	800b96c <UART_SetConfig+0xb8>
 800b948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	4b93      	ldr	r3, [pc, #588]	; (800bb9c <UART_SetConfig+0x2e8>)
 800b950:	429a      	cmp	r2, r3
 800b952:	d00b      	beq.n	800b96c <UART_SetConfig+0xb8>
 800b954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	4b91      	ldr	r3, [pc, #580]	; (800bba0 <UART_SetConfig+0x2ec>)
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d005      	beq.n	800b96c <UART_SetConfig+0xb8>
 800b960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	4b8f      	ldr	r3, [pc, #572]	; (800bba4 <UART_SetConfig+0x2f0>)
 800b968:	429a      	cmp	r2, r3
 800b96a:	d104      	bne.n	800b976 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b96c:	f7fd fa8e 	bl	8008e8c <HAL_RCC_GetPCLK2Freq>
 800b970:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b974:	e003      	b.n	800b97e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b976:	f7fd fa75 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 800b97a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b988:	f040 8110 	bne.w	800bbac <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b98c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b990:	2200      	movs	r2, #0
 800b992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b99a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b99e:	4622      	mov	r2, r4
 800b9a0:	462b      	mov	r3, r5
 800b9a2:	1891      	adds	r1, r2, r2
 800b9a4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b9a6:	415b      	adcs	r3, r3
 800b9a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	eb12 0801 	adds.w	r8, r2, r1
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	eb43 0901 	adc.w	r9, r3, r1
 800b9ba:	f04f 0200 	mov.w	r2, #0
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b9c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b9ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b9ce:	4690      	mov	r8, r2
 800b9d0:	4699      	mov	r9, r3
 800b9d2:	4623      	mov	r3, r4
 800b9d4:	eb18 0303 	adds.w	r3, r8, r3
 800b9d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9dc:	462b      	mov	r3, r5
 800b9de:	eb49 0303 	adc.w	r3, r9, r3
 800b9e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b9f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	18db      	adds	r3, r3, r3
 800b9fe:	653b      	str	r3, [r7, #80]	; 0x50
 800ba00:	4613      	mov	r3, r2
 800ba02:	eb42 0303 	adc.w	r3, r2, r3
 800ba06:	657b      	str	r3, [r7, #84]	; 0x54
 800ba08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ba0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ba10:	f7f5 f874 	bl	8000afc <__aeabi_uldivmod>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4b63      	ldr	r3, [pc, #396]	; (800bba8 <UART_SetConfig+0x2f4>)
 800ba1a:	fba3 2302 	umull	r2, r3, r3, r2
 800ba1e:	095b      	lsrs	r3, r3, #5
 800ba20:	011c      	lsls	r4, r3, #4
 800ba22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ba30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ba34:	4642      	mov	r2, r8
 800ba36:	464b      	mov	r3, r9
 800ba38:	1891      	adds	r1, r2, r2
 800ba3a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ba3c:	415b      	adcs	r3, r3
 800ba3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ba44:	4641      	mov	r1, r8
 800ba46:	eb12 0a01 	adds.w	sl, r2, r1
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	eb43 0b01 	adc.w	fp, r3, r1
 800ba50:	f04f 0200 	mov.w	r2, #0
 800ba54:	f04f 0300 	mov.w	r3, #0
 800ba58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ba60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba64:	4692      	mov	sl, r2
 800ba66:	469b      	mov	fp, r3
 800ba68:	4643      	mov	r3, r8
 800ba6a:	eb1a 0303 	adds.w	r3, sl, r3
 800ba6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba72:	464b      	mov	r3, r9
 800ba74:	eb4b 0303 	adc.w	r3, fp, r3
 800ba78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ba8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba90:	460b      	mov	r3, r1
 800ba92:	18db      	adds	r3, r3, r3
 800ba94:	643b      	str	r3, [r7, #64]	; 0x40
 800ba96:	4613      	mov	r3, r2
 800ba98:	eb42 0303 	adc.w	r3, r2, r3
 800ba9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ba9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800baa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800baa6:	f7f5 f829 	bl	8000afc <__aeabi_uldivmod>
 800baaa:	4602      	mov	r2, r0
 800baac:	460b      	mov	r3, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	4b3d      	ldr	r3, [pc, #244]	; (800bba8 <UART_SetConfig+0x2f4>)
 800bab2:	fba3 2301 	umull	r2, r3, r3, r1
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	2264      	movs	r2, #100	; 0x64
 800baba:	fb02 f303 	mul.w	r3, r2, r3
 800babe:	1acb      	subs	r3, r1, r3
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bac6:	4b38      	ldr	r3, [pc, #224]	; (800bba8 <UART_SetConfig+0x2f4>)
 800bac8:	fba3 2302 	umull	r2, r3, r3, r2
 800bacc:	095b      	lsrs	r3, r3, #5
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bad4:	441c      	add	r4, r3
 800bad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bada:	2200      	movs	r2, #0
 800badc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bae8:	4642      	mov	r2, r8
 800baea:	464b      	mov	r3, r9
 800baec:	1891      	adds	r1, r2, r2
 800baee:	63b9      	str	r1, [r7, #56]	; 0x38
 800baf0:	415b      	adcs	r3, r3
 800baf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800baf8:	4641      	mov	r1, r8
 800bafa:	1851      	adds	r1, r2, r1
 800bafc:	6339      	str	r1, [r7, #48]	; 0x30
 800bafe:	4649      	mov	r1, r9
 800bb00:	414b      	adcs	r3, r1
 800bb02:	637b      	str	r3, [r7, #52]	; 0x34
 800bb04:	f04f 0200 	mov.w	r2, #0
 800bb08:	f04f 0300 	mov.w	r3, #0
 800bb0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bb10:	4659      	mov	r1, fp
 800bb12:	00cb      	lsls	r3, r1, #3
 800bb14:	4651      	mov	r1, sl
 800bb16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb1a:	4651      	mov	r1, sl
 800bb1c:	00ca      	lsls	r2, r1, #3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4619      	mov	r1, r3
 800bb22:	4603      	mov	r3, r0
 800bb24:	4642      	mov	r2, r8
 800bb26:	189b      	adds	r3, r3, r2
 800bb28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	460a      	mov	r2, r1
 800bb30:	eb42 0303 	adc.w	r3, r2, r3
 800bb34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bb48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	18db      	adds	r3, r3, r3
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb52:	4613      	mov	r3, r2
 800bb54:	eb42 0303 	adc.w	r3, r2, r3
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bb62:	f7f4 ffcb 	bl	8000afc <__aeabi_uldivmod>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <UART_SetConfig+0x2f4>)
 800bb6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bb70:	095b      	lsrs	r3, r3, #5
 800bb72:	2164      	movs	r1, #100	; 0x64
 800bb74:	fb01 f303 	mul.w	r3, r1, r3
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	3332      	adds	r3, #50	; 0x32
 800bb7e:	4a0a      	ldr	r2, [pc, #40]	; (800bba8 <UART_SetConfig+0x2f4>)
 800bb80:	fba2 2303 	umull	r2, r3, r2, r3
 800bb84:	095b      	lsrs	r3, r3, #5
 800bb86:	f003 0207 	and.w	r2, r3, #7
 800bb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4422      	add	r2, r4
 800bb92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb94:	e10a      	b.n	800bdac <UART_SetConfig+0x4f8>
 800bb96:	bf00      	nop
 800bb98:	40011000 	.word	0x40011000
 800bb9c:	40011400 	.word	0x40011400
 800bba0:	40011800 	.word	0x40011800
 800bba4:	40011c00 	.word	0x40011c00
 800bba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bbba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bbbe:	4642      	mov	r2, r8
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	1891      	adds	r1, r2, r2
 800bbc4:	6239      	str	r1, [r7, #32]
 800bbc6:	415b      	adcs	r3, r3
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbce:	4641      	mov	r1, r8
 800bbd0:	1854      	adds	r4, r2, r1
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	eb43 0501 	adc.w	r5, r3, r1
 800bbd8:	f04f 0200 	mov.w	r2, #0
 800bbdc:	f04f 0300 	mov.w	r3, #0
 800bbe0:	00eb      	lsls	r3, r5, #3
 800bbe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bbe6:	00e2      	lsls	r2, r4, #3
 800bbe8:	4614      	mov	r4, r2
 800bbea:	461d      	mov	r5, r3
 800bbec:	4643      	mov	r3, r8
 800bbee:	18e3      	adds	r3, r4, r3
 800bbf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	eb45 0303 	adc.w	r3, r5, r3
 800bbfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc0e:	f04f 0200 	mov.w	r2, #0
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	008b      	lsls	r3, r1, #2
 800bc1e:	4621      	mov	r1, r4
 800bc20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc24:	4621      	mov	r1, r4
 800bc26:	008a      	lsls	r2, r1, #2
 800bc28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bc2c:	f7f4 ff66 	bl	8000afc <__aeabi_uldivmod>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4b60      	ldr	r3, [pc, #384]	; (800bdb8 <UART_SetConfig+0x504>)
 800bc36:	fba3 2302 	umull	r2, r3, r3, r2
 800bc3a:	095b      	lsrs	r3, r3, #5
 800bc3c:	011c      	lsls	r4, r3, #4
 800bc3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bc4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bc50:	4642      	mov	r2, r8
 800bc52:	464b      	mov	r3, r9
 800bc54:	1891      	adds	r1, r2, r2
 800bc56:	61b9      	str	r1, [r7, #24]
 800bc58:	415b      	adcs	r3, r3
 800bc5a:	61fb      	str	r3, [r7, #28]
 800bc5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc60:	4641      	mov	r1, r8
 800bc62:	1851      	adds	r1, r2, r1
 800bc64:	6139      	str	r1, [r7, #16]
 800bc66:	4649      	mov	r1, r9
 800bc68:	414b      	adcs	r3, r1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	f04f 0200 	mov.w	r2, #0
 800bc70:	f04f 0300 	mov.w	r3, #0
 800bc74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc78:	4659      	mov	r1, fp
 800bc7a:	00cb      	lsls	r3, r1, #3
 800bc7c:	4651      	mov	r1, sl
 800bc7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc82:	4651      	mov	r1, sl
 800bc84:	00ca      	lsls	r2, r1, #3
 800bc86:	4610      	mov	r0, r2
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	4642      	mov	r2, r8
 800bc8e:	189b      	adds	r3, r3, r2
 800bc90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc94:	464b      	mov	r3, r9
 800bc96:	460a      	mov	r2, r1
 800bc98:	eb42 0303 	adc.w	r3, r2, r3
 800bc9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bcaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	f04f 0300 	mov.w	r3, #0
 800bcb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bcb8:	4649      	mov	r1, r9
 800bcba:	008b      	lsls	r3, r1, #2
 800bcbc:	4641      	mov	r1, r8
 800bcbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	008a      	lsls	r2, r1, #2
 800bcc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bcca:	f7f4 ff17 	bl	8000afc <__aeabi_uldivmod>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4b38      	ldr	r3, [pc, #224]	; (800bdb8 <UART_SetConfig+0x504>)
 800bcd6:	fba3 2301 	umull	r2, r3, r3, r1
 800bcda:	095b      	lsrs	r3, r3, #5
 800bcdc:	2264      	movs	r2, #100	; 0x64
 800bcde:	fb02 f303 	mul.w	r3, r2, r3
 800bce2:	1acb      	subs	r3, r1, r3
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	3332      	adds	r3, #50	; 0x32
 800bce8:	4a33      	ldr	r2, [pc, #204]	; (800bdb8 <UART_SetConfig+0x504>)
 800bcea:	fba2 2303 	umull	r2, r3, r2, r3
 800bcee:	095b      	lsrs	r3, r3, #5
 800bcf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcf4:	441c      	add	r4, r3
 800bcf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	673b      	str	r3, [r7, #112]	; 0x70
 800bcfe:	677a      	str	r2, [r7, #116]	; 0x74
 800bd00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd04:	4642      	mov	r2, r8
 800bd06:	464b      	mov	r3, r9
 800bd08:	1891      	adds	r1, r2, r2
 800bd0a:	60b9      	str	r1, [r7, #8]
 800bd0c:	415b      	adcs	r3, r3
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd14:	4641      	mov	r1, r8
 800bd16:	1851      	adds	r1, r2, r1
 800bd18:	6039      	str	r1, [r7, #0]
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	414b      	adcs	r3, r1
 800bd1e:	607b      	str	r3, [r7, #4]
 800bd20:	f04f 0200 	mov.w	r2, #0
 800bd24:	f04f 0300 	mov.w	r3, #0
 800bd28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd2c:	4659      	mov	r1, fp
 800bd2e:	00cb      	lsls	r3, r1, #3
 800bd30:	4651      	mov	r1, sl
 800bd32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd36:	4651      	mov	r1, sl
 800bd38:	00ca      	lsls	r2, r1, #3
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4603      	mov	r3, r0
 800bd40:	4642      	mov	r2, r8
 800bd42:	189b      	adds	r3, r3, r2
 800bd44:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd46:	464b      	mov	r3, r9
 800bd48:	460a      	mov	r2, r1
 800bd4a:	eb42 0303 	adc.w	r3, r2, r3
 800bd4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	663b      	str	r3, [r7, #96]	; 0x60
 800bd5a:	667a      	str	r2, [r7, #100]	; 0x64
 800bd5c:	f04f 0200 	mov.w	r2, #0
 800bd60:	f04f 0300 	mov.w	r3, #0
 800bd64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bd68:	4649      	mov	r1, r9
 800bd6a:	008b      	lsls	r3, r1, #2
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd72:	4641      	mov	r1, r8
 800bd74:	008a      	lsls	r2, r1, #2
 800bd76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bd7a:	f7f4 febf 	bl	8000afc <__aeabi_uldivmod>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4b0d      	ldr	r3, [pc, #52]	; (800bdb8 <UART_SetConfig+0x504>)
 800bd84:	fba3 1302 	umull	r1, r3, r3, r2
 800bd88:	095b      	lsrs	r3, r3, #5
 800bd8a:	2164      	movs	r1, #100	; 0x64
 800bd8c:	fb01 f303 	mul.w	r3, r1, r3
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	011b      	lsls	r3, r3, #4
 800bd94:	3332      	adds	r3, #50	; 0x32
 800bd96:	4a08      	ldr	r2, [pc, #32]	; (800bdb8 <UART_SetConfig+0x504>)
 800bd98:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9c:	095b      	lsrs	r3, r3, #5
 800bd9e:	f003 020f 	and.w	r2, r3, #15
 800bda2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4422      	add	r2, r4
 800bdaa:	609a      	str	r2, [r3, #8]
}
 800bdac:	bf00      	nop
 800bdae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdb8:	51eb851f 	.word	0x51eb851f

0800bdbc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	6812      	ldr	r2, [r2, #0]
 800bdd4:	f023 0101 	bic.w	r1, r3, #1
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	2b08      	cmp	r3, #8
 800bde4:	d102      	bne.n	800bdec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bde6:	2340      	movs	r3, #64	; 0x40
 800bde8:	617b      	str	r3, [r7, #20]
 800bdea:	e001      	b.n	800bdf0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800bdec:	2300      	movs	r3, #0
 800bdee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800bdfc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800be02:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800be08:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800be0e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800be14:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800be1a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800be20:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800be26:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800be2c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800be32:	4313      	orrs	r3, r2
 800be34:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	4313      	orrs	r3, r2
 800be48:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	4313      	orrs	r3, r2
 800be52:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800be54:	4b20      	ldr	r3, [pc, #128]	; (800bed8 <FSMC_NORSRAM_Init+0x11c>)
 800be56:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be5e:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be66:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800be6e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	43db      	mvns	r3, r3
 800be7e:	ea02 0103 	and.w	r1, r2, r3
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	4319      	orrs	r1, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be98:	d10c      	bne.n	800beb4 <FSMC_NORSRAM_Init+0xf8>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d008      	beq.n	800beb4 <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beae:	431a      	orrs	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d006      	beq.n	800beca <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec4:	431a      	orrs	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	371c      	adds	r7, #28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	0008fb7f 	.word	0x0008fb7f

0800bedc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	431a      	orrs	r2, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	021b      	lsls	r3, r3, #8
 800bf08:	431a      	orrs	r2, r3
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	041b      	lsls	r3, r3, #16
 800bf10:	431a      	orrs	r2, r3
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	051b      	lsls	r3, r3, #20
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	3b02      	subs	r3, #2
 800bf22:	061b      	lsls	r3, r3, #24
 800bf24:	431a      	orrs	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	3201      	adds	r2, #1
 800bf30:	4319      	orrs	r1, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf44:	d113      	bne.n	800bf6e <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf4e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	051b      	lsls	r3, r3, #20
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf90:	d11d      	bne.n	800bfce <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf9a:	4b13      	ldr	r3, [pc, #76]	; (800bfe8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	6811      	ldr	r1, [r2, #0]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	6852      	ldr	r2, [r2, #4]
 800bfa6:	0112      	lsls	r2, r2, #4
 800bfa8:	4311      	orrs	r1, r2
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	6892      	ldr	r2, [r2, #8]
 800bfae:	0212      	lsls	r2, r2, #8
 800bfb0:	4311      	orrs	r1, r2
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	6992      	ldr	r2, [r2, #24]
 800bfb6:	4311      	orrs	r1, r2
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	68d2      	ldr	r2, [r2, #12]
 800bfbc:	0412      	lsls	r2, r2, #16
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	ea43 0102 	orr.w	r1, r3, r2
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bfcc:	e005      	b.n	800bfda <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bfd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	cff00000 	.word	0xcff00000

0800bfec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfec:	b084      	sub	sp, #16
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	f107 001c 	add.w	r0, r7, #28
 800bffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bffe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c002:	2b01      	cmp	r3, #1
 800c004:	d123      	bne.n	800c04e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c01a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c02e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c032:	2b01      	cmp	r3, #1
 800c034:	d105      	bne.n	800c042 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f9dc 	bl	800c400 <USB_CoreReset>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]
 800c04c:	e01b      	b.n	800c086 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f9d0 	bl	800c400 <USB_CoreReset>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c064:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	639a      	str	r2, [r3, #56]	; 0x38
 800c078:	e005      	b.n	800c086 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c086:	7fbb      	ldrb	r3, [r7, #30]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d10b      	bne.n	800c0a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	f043 0206 	orr.w	r2, r3, #6
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f043 0220 	orr.w	r2, r3, #32
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0b0:	b004      	add	sp, #16
 800c0b2:	4770      	bx	lr

0800c0b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f043 0201 	orr.w	r2, r3, #1
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	f023 0201 	bic.w	r2, r3, #1
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d115      	bne.n	800c146 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c126:	200a      	movs	r0, #10
 800c128:	f7f8 fabc 	bl	80046a4 <HAL_Delay>
      ms += 10U;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	330a      	adds	r3, #10
 800c130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f956 	bl	800c3e4 <USB_GetMode>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d01e      	beq.n	800c17c <USB_SetCurrentMode+0x84>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2bc7      	cmp	r3, #199	; 0xc7
 800c142:	d9f0      	bls.n	800c126 <USB_SetCurrentMode+0x2e>
 800c144:	e01a      	b.n	800c17c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c146:	78fb      	ldrb	r3, [r7, #3]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d115      	bne.n	800c178 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c158:	200a      	movs	r0, #10
 800c15a:	f7f8 faa3 	bl	80046a4 <HAL_Delay>
      ms += 10U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	330a      	adds	r3, #10
 800c162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f93d 	bl	800c3e4 <USB_GetMode>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <USB_SetCurrentMode+0x84>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2bc7      	cmp	r3, #199	; 0xc7
 800c174:	d9f0      	bls.n	800c158 <USB_SetCurrentMode+0x60>
 800c176:	e001      	b.n	800c17c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e005      	b.n	800c188 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2bc8      	cmp	r3, #200	; 0xc8
 800c180:	d101      	bne.n	800c186 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e000      	b.n	800c188 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c1aa:	d901      	bls.n	800c1b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e01b      	b.n	800c1e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	daf2      	bge.n	800c19e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	019b      	lsls	r3, r3, #6
 800c1c0:	f043 0220 	orr.w	r2, r3, #32
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c1d4:	d901      	bls.n	800c1da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e006      	b.n	800c1e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	d0f0      	beq.n	800c1c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3301      	adds	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c20c:	d901      	bls.n	800c212 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e018      	b.n	800c244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	daf2      	bge.n	800c200 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2210      	movs	r2, #16
 800c222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3301      	adds	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c230:	d901      	bls.n	800c236 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e006      	b.n	800c244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	f003 0310 	and.w	r3, r3, #16
 800c23e:	2b10      	cmp	r3, #16
 800c240:	d0f0      	beq.n	800c224 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c250:	b480      	push	{r7}
 800c252:	b089      	sub	sp, #36	; 0x24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	4611      	mov	r1, r2
 800c25c:	461a      	mov	r2, r3
 800c25e:	460b      	mov	r3, r1
 800c260:	71fb      	strb	r3, [r7, #7]
 800c262:	4613      	mov	r3, r2
 800c264:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c26e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c272:	2b00      	cmp	r3, #0
 800c274:	d123      	bne.n	800c2be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c276:	88bb      	ldrh	r3, [r7, #4]
 800c278:	3303      	adds	r3, #3
 800c27a:	089b      	lsrs	r3, r3, #2
 800c27c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c27e:	2300      	movs	r3, #0
 800c280:	61bb      	str	r3, [r7, #24]
 800c282:	e018      	b.n	800c2b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	031a      	lsls	r2, r3, #12
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c290:	461a      	mov	r2, r3
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	3301      	adds	r3, #1
 800c29c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d3e2      	bcc.n	800c284 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3724      	adds	r7, #36	; 0x24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b08b      	sub	sp, #44	; 0x2c
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c2e2:	88fb      	ldrh	r3, [r7, #6]
 800c2e4:	089b      	lsrs	r3, r3, #2
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	f003 0303 	and.w	r3, r3, #3
 800c2f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	623b      	str	r3, [r7, #32]
 800c2f6:	e014      	b.n	800c322 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	601a      	str	r2, [r3, #0]
    pDest++;
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	3301      	adds	r3, #1
 800c308:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	3301      	adds	r3, #1
 800c30e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	3301      	adds	r3, #1
 800c314:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	3301      	adds	r3, #1
 800c31a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	3301      	adds	r3, #1
 800c320:	623b      	str	r3, [r7, #32]
 800c322:	6a3a      	ldr	r2, [r7, #32]
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	429a      	cmp	r2, r3
 800c328:	d3e6      	bcc.n	800c2f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c32a:	8bfb      	ldrh	r3, [r7, #30]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01e      	beq.n	800c36e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33a:	461a      	mov	r2, r3
 800c33c:	f107 0310 	add.w	r3, r7, #16
 800c340:	6812      	ldr	r2, [r2, #0]
 800c342:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	6a3b      	ldr	r3, [r7, #32]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	00db      	lsls	r3, r3, #3
 800c34c:	fa22 f303 	lsr.w	r3, r2, r3
 800c350:	b2da      	uxtb	r2, r3
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	701a      	strb	r2, [r3, #0]
      i++;
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	3301      	adds	r3, #1
 800c35a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	3301      	adds	r3, #1
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c362:	8bfb      	ldrh	r3, [r7, #30]
 800c364:	3b01      	subs	r3, #1
 800c366:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c368:	8bfb      	ldrh	r3, [r7, #30]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1ea      	bne.n	800c344 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c370:	4618      	mov	r0, r3
 800c372:	372c      	adds	r7, #44	; 0x2c
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	695b      	ldr	r3, [r3, #20]
 800c388:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	4013      	ands	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c394:	68fb      	ldr	r3, [r7, #12]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b085      	sub	sp, #20
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c3b2:	78fb      	ldrb	r3, [r7, #3]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c3c2:	78fb      	ldrb	r3, [r7, #3]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	f003 0301 	and.w	r3, r3, #1
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c408:	2300      	movs	r3, #0
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	3301      	adds	r3, #1
 800c410:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c418:	d901      	bls.n	800c41e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e01b      	b.n	800c456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	daf2      	bge.n	800c40c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	f043 0201 	orr.w	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3301      	adds	r3, #1
 800c43a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c442:	d901      	bls.n	800c448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c444:	2303      	movs	r3, #3
 800c446:	e006      	b.n	800c456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b01      	cmp	r3, #1
 800c452:	d0f0      	beq.n	800c436 <USB_CoreReset+0x36>

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
	...

0800c464 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c464:	b084      	sub	sp, #16
 800c466:	b580      	push	{r7, lr}
 800c468:	b086      	sub	sp, #24
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c484:	461a      	mov	r2, r3
 800c486:	2300      	movs	r3, #0
 800c488:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	639a      	str	r2, [r3, #56]	; 0x38
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) \
 || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d119      	bne.n	800c4e2 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c4ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d10a      	bne.n	800c4cc <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4c4:	f043 0304 	orr.w	r3, r3, #4
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	e014      	b.n	800c4f6 <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4da:	f023 0304 	bic.w	r3, r3, #4
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	e009      	b.n	800c4f6 <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4f0:	f023 0304 	bic.w	r3, r3, #4
 800c4f4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c4f6:	2110      	movs	r1, #16
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff fe49 	bl	800c190 <USB_FlushTxFifo>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff fe73 	bl	800c1f4 <USB_FlushRxFifo>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c518:	2300      	movs	r3, #0
 800c51a:	613b      	str	r3, [r7, #16]
 800c51c:	e015      	b.n	800c54a <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4413      	add	r3, r2
 800c526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c52a:	461a      	mov	r2, r3
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295
 800c530:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c53e:	461a      	mov	r2, r3
 800c540:	2300      	movs	r3, #0
 800c542:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	3301      	adds	r3, #1
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c54e:	461a      	mov	r2, r3
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	4293      	cmp	r3, r2
 800c554:	d3e3      	bcc.n	800c51e <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2280      	movs	r2, #128	; 0x80
 800c568:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a0e      	ldr	r2, [pc, #56]	; (800c5a8 <USB_HostInit+0x144>)
 800c56e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a0e      	ldr	r2, [pc, #56]	; (800c5ac <USB_HostInit+0x148>)
 800c574:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d105      	bne.n	800c58c <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	f043 0210 	orr.w	r2, r3, #16
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	699a      	ldr	r2, [r3, #24]
 800c590:	4b07      	ldr	r3, [pc, #28]	; (800c5b0 <USB_HostInit+0x14c>)
 800c592:	4313      	orrs	r3, r2
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c598:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5a4:	b004      	add	sp, #16
 800c5a6:	4770      	bx	lr
 800c5a8:	00600080 	.word	0x00600080
 800c5ac:	004000e0 	.word	0x004000e0
 800c5b0:	a3200008 	.word	0xa3200008

0800c5b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5d2:	f023 0303 	bic.w	r3, r3, #3
 800c5d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d107      	bne.n	800c606 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c602:	6053      	str	r3, [r2, #4]
 800c604:	e00c      	b.n	800c620 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c606:	78fb      	ldrb	r3, [r7, #3]
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d107      	bne.n	800c61c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c612:	461a      	mov	r2, r3
 800c614:	f241 7370 	movw	r3, #6000	; 0x1770
 800c618:	6053      	str	r3, [r2, #4]
 800c61a:	e001      	b.n	800c620 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e000      	b.n	800c622 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c63a:	2300      	movs	r3, #0
 800c63c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c64e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c65c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c65e:	2064      	movs	r0, #100	; 0x64
 800c660:	f7f8 f820 	bl	80046a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c66c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c670:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c672:	200a      	movs	r0, #10
 800c674:	f7f8 f816 	bl	80046a4 <HAL_Delay>

  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c682:	b480      	push	{r7}
 800c684:	b085      	sub	sp, #20
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	460b      	mov	r3, r1
 800c68c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c692:	2300      	movs	r3, #0
 800c694:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c6a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d109      	bne.n	800c6c6 <USB_DriveVbus+0x44>
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d106      	bne.n	800c6c6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c6c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c6c4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d0:	d109      	bne.n	800c6e6 <USB_DriveVbus+0x64>
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d106      	bne.n	800c6e6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c6e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6e4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	0c5b      	lsrs	r3, r3, #17
 800c712:	f003 0303 	and.w	r3, r3, #3
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c722:	b480      	push	{r7}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	b29b      	uxth	r3, r3
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3714      	adds	r7, #20
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b088      	sub	sp, #32
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	4608      	mov	r0, r1
 800c74e:	4611      	mov	r1, r2
 800c750:	461a      	mov	r2, r3
 800c752:	4603      	mov	r3, r0
 800c754:	70fb      	strb	r3, [r7, #3]
 800c756:	460b      	mov	r3, r1
 800c758:	70bb      	strb	r3, [r7, #2]
 800c75a:	4613      	mov	r3, r2
 800c75c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c766:	78fb      	ldrb	r3, [r7, #3]
 800c768:	015a      	lsls	r2, r3, #5
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	4413      	add	r3, r2
 800c76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c772:	461a      	mov	r2, r3
 800c774:	f04f 33ff 	mov.w	r3, #4294967295
 800c778:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c77a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d867      	bhi.n	800c852 <USB_HC_Init+0x10e>
 800c782:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <USB_HC_Init+0x44>)
 800c784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c788:	0800c799 	.word	0x0800c799
 800c78c:	0800c815 	.word	0x0800c815
 800c790:	0800c799 	.word	0x0800c799
 800c794:	0800c7d7 	.word	0x0800c7d7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c798:	78fb      	ldrb	r3, [r7, #3]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f240 439d 	movw	r3, #1181	; 0x49d
 800c7aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c7ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	da51      	bge.n	800c858 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	78fa      	ldrb	r2, [r7, #3]
 800c7c4:	0151      	lsls	r1, r2, #5
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	440a      	add	r2, r1
 800c7ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7d2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c7d4:	e040      	b.n	800c858 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	015a      	lsls	r2, r3, #5
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	4413      	add	r3, r2
 800c7de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f240 639d 	movw	r3, #1693	; 0x69d
 800c7e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c7ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	da34      	bge.n	800c85c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
 800c7f4:	015a      	lsls	r2, r3, #5
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	0151      	lsls	r1, r2, #5
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	440a      	add	r2, r1
 800c808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c80c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c810:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c812:	e023      	b.n	800c85c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c820:	461a      	mov	r2, r3
 800c822:	f240 2325 	movw	r3, #549	; 0x225
 800c826:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	da17      	bge.n	800c860 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	4413      	add	r3, r2
 800c838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	0151      	lsls	r1, r2, #5
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	440a      	add	r2, r1
 800c846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c84a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c84e:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c850:	e006      	b.n	800c860 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	77fb      	strb	r3, [r7, #31]
      break;
 800c856:	e004      	b.n	800c862 <USB_HC_Init+0x11e>
      break;
 800c858:	bf00      	nop
 800c85a:	e002      	b.n	800c862 <USB_HC_Init+0x11e>
      break;
 800c85c:	bf00      	nop
 800c85e:	e000      	b.n	800c862 <USB_HC_Init+0x11e>
      break;
 800c860:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c862:	78fb      	ldrb	r3, [r7, #3]
 800c864:	015a      	lsls	r2, r3, #5
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	4413      	add	r3, r2
 800c86a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c86e:	461a      	mov	r2, r3
 800c870:	2300      	movs	r3, #0
 800c872:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c874:	78fb      	ldrb	r3, [r7, #3]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	78fa      	ldrb	r2, [r7, #3]
 800c884:	0151      	lsls	r1, r2, #5
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	440a      	add	r2, r1
 800c88a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c88e:	f043 0302 	orr.w	r3, r3, #2
 800c892:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c89a:	699a      	ldr	r2, [r3, #24]
 800c89c:	78fb      	ldrb	r3, [r7, #3]
 800c89e:	f003 030f 	and.w	r3, r3, #15
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a8:	6939      	ldr	r1, [r7, #16]
 800c8aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c8be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da03      	bge.n	800c8ce <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c8c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8ca:	61bb      	str	r3, [r7, #24]
 800c8cc:	e001      	b.n	800c8d2 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff ff0e 	bl	800c6f4 <USB_GetHostSpeed>
 800c8d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c8da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d106      	bne.n	800c8f0 <USB_HC_Init+0x1ac>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d003      	beq.n	800c8f0 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c8e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8ec:	617b      	str	r3, [r7, #20]
 800c8ee:	e001      	b.n	800c8f4 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c8f4:	787b      	ldrb	r3, [r7, #1]
 800c8f6:	059b      	lsls	r3, r3, #22
 800c8f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c8fc:	78bb      	ldrb	r3, [r7, #2]
 800c8fe:	02db      	lsls	r3, r3, #11
 800c900:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c904:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c90a:	049b      	lsls	r3, r3, #18
 800c90c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c910:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c912:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c914:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c918:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	431a      	orrs	r2, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c922:	78fa      	ldrb	r2, [r7, #3]
 800c924:	0151      	lsls	r1, r2, #5
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	440a      	add	r2, r1
 800c92a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c92e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c932:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c934:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d003      	beq.n	800c944 <USB_HC_Init+0x200>
 800c93c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c940:	2b01      	cmp	r3, #1
 800c942:	d10f      	bne.n	800c964 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	78fa      	ldrb	r2, [r7, #3]
 800c954:	0151      	lsls	r1, r2, #5
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	440a      	add	r2, r1
 800c95a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c95e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c962:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c964:	7ffb      	ldrb	r3, [r7, #31]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3720      	adds	r7, #32
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop

0800c970 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08c      	sub	sp, #48	; 0x30
 800c974:	af02      	add	r7, sp, #8
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	4613      	mov	r3, r2
 800c97c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	785b      	ldrb	r3, [r3, #1]
 800c986:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800c988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c98c:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	799b      	ldrb	r3, [r3, #6]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d158      	bne.n	800ca48 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800c996:	2301      	movs	r3, #1
 800c998:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	78db      	ldrb	r3, [r3, #3]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d007      	beq.n	800c9b2 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c9a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	8a92      	ldrh	r2, [r2, #20]
 800c9a8:	fb03 f202 	mul.w	r2, r3, r2
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	61da      	str	r2, [r3, #28]
 800c9b0:	e079      	b.n	800caa6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	7c9b      	ldrb	r3, [r3, #18]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d130      	bne.n	800ca1c <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	2bbc      	cmp	r3, #188	; 0xbc
 800c9c0:	d918      	bls.n	800c9f4 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	8a9b      	ldrh	r3, [r3, #20]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	69da      	ldr	r2, [r3, #28]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d003      	beq.n	800c9e4 <USB_HC_StartXfer+0x74>
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d103      	bne.n	800c9ec <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	60da      	str	r2, [r3, #12]
 800c9ea:	e05c      	b.n	800caa6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	60da      	str	r2, [r3, #12]
 800c9f2:	e058      	b.n	800caa6 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	6a1a      	ldr	r2, [r3, #32]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d007      	beq.n	800ca14 <USB_HC_StartXfer+0xa4>
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d003      	beq.n	800ca14 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2204      	movs	r2, #4
 800ca10:	60da      	str	r2, [r3, #12]
 800ca12:	e048      	b.n	800caa6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2203      	movs	r2, #3
 800ca18:	60da      	str	r2, [r3, #12]
 800ca1a:	e044      	b.n	800caa6 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d10d      	bne.n	800ca3e <USB_HC_StartXfer+0xce>
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	8a92      	ldrh	r2, [r2, #20]
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d907      	bls.n	800ca3e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ca2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	8a92      	ldrh	r2, [r2, #20]
 800ca34:	fb03 f202 	mul.w	r2, r3, r2
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	61da      	str	r2, [r3, #28]
 800ca3c:	e033      	b.n	800caa6 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	6a1a      	ldr	r2, [r3, #32]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	61da      	str	r2, [r3, #28]
 800ca46:	e02e      	b.n	800caa6 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d018      	beq.n	800ca82 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	8a92      	ldrh	r2, [r2, #20]
 800ca58:	4413      	add	r3, r2
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	8a92      	ldrh	r2, [r2, #20]
 800ca60:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca64:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800ca66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca68:	8b7b      	ldrh	r3, [r7, #26]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d90b      	bls.n	800ca86 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800ca6e:	8b7b      	ldrh	r3, [r7, #26]
 800ca70:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ca72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	8a92      	ldrh	r2, [r2, #20]
 800ca78:	fb03 f202 	mul.w	r2, r3, r2
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	61da      	str	r2, [r3, #28]
 800ca80:	e001      	b.n	800ca86 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800ca82:	2301      	movs	r3, #1
 800ca84:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	78db      	ldrb	r3, [r3, #3]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d007      	beq.n	800ca9e <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ca8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	8a92      	ldrh	r2, [r2, #20]
 800ca94:	fb03 f202 	mul.w	r2, r3, r2
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	61da      	str	r2, [r3, #28]
 800ca9c:	e003      	b.n	800caa6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	6a1a      	ldr	r2, [r3, #32]
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800caae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cab0:	04d9      	lsls	r1, r3, #19
 800cab2:	4ba4      	ldr	r3, [pc, #656]	; (800cd44 <USB_HC_StartXfer+0x3d4>)
 800cab4:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cab6:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	7d9b      	ldrb	r3, [r3, #22]
 800cabc:	075b      	lsls	r3, r3, #29
 800cabe:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cac2:	69f9      	ldr	r1, [r7, #28]
 800cac4:	0148      	lsls	r0, r1, #5
 800cac6:	6a39      	ldr	r1, [r7, #32]
 800cac8:	4401      	add	r1, r0
 800caca:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cace:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cad0:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d009      	beq.n	800caec <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	6999      	ldr	r1, [r3, #24]
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cae8:	460a      	mov	r2, r1
 800caea:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bf0c      	ite	eq
 800cafc:	2301      	moveq	r3, #1
 800cafe:	2300      	movne	r3, #0
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	0151      	lsls	r1, r2, #5
 800cb16:	6a3a      	ldr	r2, [r7, #32]
 800cb18:	440a      	add	r2, r1
 800cb1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb22:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	015a      	lsls	r2, r3, #5
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	7e7b      	ldrb	r3, [r7, #25]
 800cb34:	075b      	lsls	r3, r3, #29
 800cb36:	69f9      	ldr	r1, [r7, #28]
 800cb38:	0148      	lsls	r0, r1, #5
 800cb3a:	6a39      	ldr	r1, [r7, #32]
 800cb3c:	4401      	add	r1, r0
 800cb3e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cb42:	4313      	orrs	r3, r2
 800cb44:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	799b      	ldrb	r3, [r3, #6]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	f040 80c4 	bne.w	800ccd8 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	7c5b      	ldrb	r3, [r3, #17]
 800cb54:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	0151      	lsls	r1, r2, #5
 800cb60:	6a3a      	ldr	r2, [r7, #32]
 800cb62:	440a      	add	r2, r1
 800cb64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800cb68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cb6c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	69fa      	ldr	r2, [r7, #28]
 800cb7e:	0151      	lsls	r1, r2, #5
 800cb80:	6a3a      	ldr	r2, [r7, #32]
 800cb82:	440a      	add	r2, r1
 800cb84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cb8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	79db      	ldrb	r3, [r3, #7]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d123      	bne.n	800cbde <USB_HC_StartXfer+0x26e>
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	78db      	ldrb	r3, [r3, #3]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d11f      	bne.n	800cbde <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	6a3b      	ldr	r3, [r7, #32]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	0151      	lsls	r1, r2, #5
 800cbb0:	6a3a      	ldr	r2, [r7, #32]
 800cbb2:	440a      	add	r2, r1
 800cbb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbbc:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	015a      	lsls	r2, r3, #5
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	69fa      	ldr	r2, [r7, #28]
 800cbce:	0151      	lsls	r1, r2, #5
 800cbd0:	6a3a      	ldr	r2, [r7, #32]
 800cbd2:	440a      	add	r2, r1
 800cbd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbdc:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	7c9b      	ldrb	r3, [r3, #18]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d003      	beq.n	800cbee <USB_HC_StartXfer+0x27e>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	7c9b      	ldrb	r3, [r3, #18]
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d117      	bne.n	800cc1e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d113      	bne.n	800cc1e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	78db      	ldrb	r3, [r3, #3]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d10f      	bne.n	800cc1e <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	0151      	lsls	r1, r2, #5
 800cc10:	6a3a      	ldr	r2, [r7, #32]
 800cc12:	440a      	add	r2, r1
 800cc14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc1c:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	7c9b      	ldrb	r3, [r3, #18]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d163      	bne.n	800ccee <USB_HC_StartXfer+0x37e>
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	78db      	ldrb	r3, [r3, #3]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d15f      	bne.n	800ccee <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d859      	bhi.n	800ccec <USB_HC_StartXfer+0x37c>
 800cc38:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <USB_HC_StartXfer+0x2d0>)
 800cc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3e:	bf00      	nop
 800cc40:	0800cc51 	.word	0x0800cc51
 800cc44:	0800cc73 	.word	0x0800cc73
 800cc48:	0800cc95 	.word	0x0800cc95
 800cc4c:	0800ccb7 	.word	0x0800ccb7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	015a      	lsls	r2, r3, #5
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	0151      	lsls	r1, r2, #5
 800cc62:	6a3a      	ldr	r2, [r7, #32]
 800cc64:	440a      	add	r2, r1
 800cc66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc6e:	6053      	str	r3, [r2, #4]
          break;
 800cc70:	e03d      	b.n	800ccee <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	015a      	lsls	r2, r3, #5
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	4413      	add	r3, r2
 800cc7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	69fa      	ldr	r2, [r7, #28]
 800cc82:	0151      	lsls	r1, r2, #5
 800cc84:	6a3a      	ldr	r2, [r7, #32]
 800cc86:	440a      	add	r2, r1
 800cc88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc8c:	f043 030e 	orr.w	r3, r3, #14
 800cc90:	6053      	str	r3, [r2, #4]
          break;
 800cc92:	e02c      	b.n	800ccee <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	69fa      	ldr	r2, [r7, #28]
 800cca4:	0151      	lsls	r1, r2, #5
 800cca6:	6a3a      	ldr	r2, [r7, #32]
 800cca8:	440a      	add	r2, r1
 800ccaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ccb2:	6053      	str	r3, [r2, #4]
          break;
 800ccb4:	e01b      	b.n	800ccee <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	015a      	lsls	r2, r3, #5
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	69fa      	ldr	r2, [r7, #28]
 800ccc6:	0151      	lsls	r1, r2, #5
 800ccc8:	6a3a      	ldr	r2, [r7, #32]
 800ccca:	440a      	add	r2, r1
 800cccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ccd4:	6053      	str	r3, [r2, #4]
          break;
 800ccd6:	e00a      	b.n	800ccee <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cce4:	461a      	mov	r2, r3
 800cce6:	2300      	movs	r3, #0
 800cce8:	6053      	str	r3, [r2, #4]
 800ccea:	e000      	b.n	800ccee <USB_HC_StartXfer+0x37e>
          break;
 800ccec:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd04:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	78db      	ldrb	r3, [r3, #3]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd14:	613b      	str	r3, [r7, #16]
 800cd16:	e003      	b.n	800cd20 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd1e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd26:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	6a3b      	ldr	r3, [r7, #32]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd34:	461a      	mov	r2, r3
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800cd3a:	79fb      	ldrb	r3, [r7, #7]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	e055      	b.n	800cdf0 <USB_HC_StartXfer+0x480>
 800cd44:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	78db      	ldrb	r3, [r3, #3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d14e      	bne.n	800cdee <USB_HC_StartXfer+0x47e>
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d04a      	beq.n	800cdee <USB_HC_StartXfer+0x47e>
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	79db      	ldrb	r3, [r3, #7]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d146      	bne.n	800cdee <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	7c9b      	ldrb	r3, [r3, #18]
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d831      	bhi.n	800cdcc <USB_HC_StartXfer+0x45c>
 800cd68:	a201      	add	r2, pc, #4	; (adr r2, 800cd70 <USB_HC_StartXfer+0x400>)
 800cd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6e:	bf00      	nop
 800cd70:	0800cd81 	.word	0x0800cd81
 800cd74:	0800cda5 	.word	0x0800cda5
 800cd78:	0800cd81 	.word	0x0800cd81
 800cd7c:	0800cda5 	.word	0x0800cda5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	3303      	adds	r3, #3
 800cd86:	089b      	lsrs	r3, r3, #2
 800cd88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cd8a:	8afa      	ldrh	r2, [r7, #22]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d91c      	bls.n	800cdd0 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	f043 0220 	orr.w	r2, r3, #32
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	619a      	str	r2, [r3, #24]
        }
        break;
 800cda2:	e015      	b.n	800cdd0 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	3303      	adds	r3, #3
 800cdaa:	089b      	lsrs	r3, r3, #2
 800cdac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cdae:	8afa      	ldrh	r2, [r7, #22]
 800cdb0:	6a3b      	ldr	r3, [r7, #32]
 800cdb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d90a      	bls.n	800cdd4 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	619a      	str	r2, [r3, #24]
        }
        break;
 800cdca:	e003      	b.n	800cdd4 <USB_HC_StartXfer+0x464>

      default:
        break;
 800cdcc:	bf00      	nop
 800cdce:	e002      	b.n	800cdd6 <USB_HC_StartXfer+0x466>
        break;
 800cdd0:	bf00      	nop
 800cdd2:	e000      	b.n	800cdd6 <USB_HC_StartXfer+0x466>
        break;
 800cdd4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	6999      	ldr	r1, [r3, #24]
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	785a      	ldrb	r2, [r3, #1]
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	2000      	movs	r0, #0
 800cde6:	9000      	str	r0, [sp, #0]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f7ff fa31 	bl	800c250 <USB_WritePacket>
  }

  return HAL_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3728      	adds	r7, #40	; 0x28
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	b29b      	uxth	r3, r3
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b089      	sub	sp, #36	; 0x24
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	460b      	mov	r3, r1
 800ce24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ce2a:	78fb      	ldrb	r3, [r7, #3]
 800ce2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	015a      	lsls	r2, r3, #5
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	0c9b      	lsrs	r3, r3, #18
 800ce42:	f003 0303 	and.w	r3, r3, #3
 800ce46:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	0fdb      	lsrs	r3, r3, #31
 800ce58:	f003 0301 	and.w	r3, r3, #1
 800ce5c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	015a      	lsls	r2, r3, #5
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	0fdb      	lsrs	r3, r3, #31
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b20      	cmp	r3, #32
 800ce7e:	d10d      	bne.n	800ce9c <USB_HC_Halt+0x82>
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10a      	bne.n	800ce9c <USB_HC_Halt+0x82>
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d005      	beq.n	800ce98 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d002      	beq.n	800ce98 <USB_HC_Halt+0x7e>
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	d101      	bne.n	800ce9c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e0d8      	b.n	800d04e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <USB_HC_Halt+0x8e>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d173      	bne.n	800cf90 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	015a      	lsls	r2, r3, #5
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	4413      	add	r3, r2
 800ceb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	69ba      	ldr	r2, [r7, #24]
 800ceb8:	0151      	lsls	r1, r2, #5
 800ceba:	69fa      	ldr	r2, [r7, #28]
 800cebc:	440a      	add	r2, r1
 800cebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cec6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	f003 0320 	and.w	r3, r3, #32
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d14a      	bne.n	800cf6a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d133      	bne.n	800cf48 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	0151      	lsls	r1, r2, #5
 800cef2:	69fa      	ldr	r2, [r7, #28]
 800cef4:	440a      	add	r2, r1
 800cef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cefa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cefe:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	015a      	lsls	r2, r3, #5
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	4413      	add	r3, r2
 800cf08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	0151      	lsls	r1, r2, #5
 800cf12:	69fa      	ldr	r2, [r7, #28]
 800cf14:	440a      	add	r2, r1
 800cf16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf1e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3301      	adds	r3, #1
 800cf24:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf2c:	d82e      	bhi.n	800cf8c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf44:	d0ec      	beq.n	800cf20 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cf46:	e081      	b.n	800d04c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	015a      	lsls	r2, r3, #5
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	0151      	lsls	r1, r2, #5
 800cf5a:	69fa      	ldr	r2, [r7, #28]
 800cf5c:	440a      	add	r2, r1
 800cf5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf66:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cf68:	e070      	b.n	800d04c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	4413      	add	r3, r2
 800cf72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	69ba      	ldr	r2, [r7, #24]
 800cf7a:	0151      	lsls	r1, r2, #5
 800cf7c:	69fa      	ldr	r2, [r7, #28]
 800cf7e:	440a      	add	r2, r1
 800cf80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf88:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cf8a:	e05f      	b.n	800d04c <USB_HC_Halt+0x232>
            break;
 800cf8c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cf8e:	e05d      	b.n	800d04c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	015a      	lsls	r2, r3, #5
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	4413      	add	r3, r2
 800cf98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	69ba      	ldr	r2, [r7, #24]
 800cfa0:	0151      	lsls	r1, r2, #5
 800cfa2:	69fa      	ldr	r2, [r7, #28]
 800cfa4:	440a      	add	r2, r1
 800cfa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d133      	bne.n	800d028 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	015a      	lsls	r2, r3, #5
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	0151      	lsls	r1, r2, #5
 800cfd2:	69fa      	ldr	r2, [r7, #28]
 800cfd4:	440a      	add	r2, r1
 800cfd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfde:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	015a      	lsls	r2, r3, #5
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	0151      	lsls	r1, r2, #5
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	440a      	add	r2, r1
 800cff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cffe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	3301      	adds	r3, #1
 800d004:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d00c:	d81d      	bhi.n	800d04a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	015a      	lsls	r2, r3, #5
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	4413      	add	r3, r2
 800d016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d024:	d0ec      	beq.n	800d000 <USB_HC_Halt+0x1e6>
 800d026:	e011      	b.n	800d04c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	015a      	lsls	r2, r3, #5
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	4413      	add	r3, r2
 800d030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	0151      	lsls	r1, r2, #5
 800d03a:	69fa      	ldr	r2, [r7, #28]
 800d03c:	440a      	add	r2, r1
 800d03e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	e000      	b.n	800d04c <USB_HC_Halt+0x232>
          break;
 800d04a:	bf00      	nop
    }
  }

  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3724      	adds	r7, #36	; 0x24
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b088      	sub	sp, #32
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff f831 	bl	800c0d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d074:	2110      	movs	r1, #16
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff f88a 	bl	800c190 <USB_FlushTxFifo>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7ff f8b4 	bl	800c1f4 <USB_FlushRxFifo>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d096:	2300      	movs	r3, #0
 800d098:	61bb      	str	r3, [r7, #24]
 800d09a:	e01f      	b.n	800d0dc <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d0b2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0ba:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d0c2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	015a      	lsls	r2, r3, #5
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	61bb      	str	r3, [r7, #24]
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	2b0f      	cmp	r3, #15
 800d0e0:	d9dc      	bls.n	800d09c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	61bb      	str	r3, [r7, #24]
 800d0e6:	e034      	b.n	800d152 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	015a      	lsls	r2, r3, #5
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d0fe:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d106:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d10e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	015a      	lsls	r2, r3, #5
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	4413      	add	r3, r2
 800d118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d11c:	461a      	mov	r2, r3
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3301      	adds	r3, #1
 800d126:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d12e:	d80c      	bhi.n	800d14a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	015a      	lsls	r2, r3, #5
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	4413      	add	r3, r2
 800d138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d146:	d0ec      	beq.n	800d122 <USB_StopHost+0xc8>
 800d148:	e000      	b.n	800d14c <USB_StopHost+0xf2>
        break;
 800d14a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	3301      	adds	r3, #1
 800d150:	61bb      	str	r3, [r7, #24]
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	2b0f      	cmp	r3, #15
 800d156:	d9c7      	bls.n	800d0e8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d15e:	461a      	mov	r2, r3
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f04f 32ff 	mov.w	r2, #4294967295
 800d16c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7fe ffa0 	bl	800c0b4 <USB_EnableGlobalInt>

  return ret;
 800d174:	7ffb      	ldrb	r3, [r7, #31]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3720      	adds	r7, #32
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d17e:	b590      	push	{r4, r7, lr}
 800d180:	b089      	sub	sp, #36	; 0x24
 800d182:	af04      	add	r7, sp, #16
 800d184:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d186:	2301      	movs	r3, #1
 800d188:	2202      	movs	r2, #2
 800d18a:	2102      	movs	r1, #2
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fcd2 	bl	800db36 <USBH_FindInterface>
 800d192:	4603      	mov	r3, r0
 800d194:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	2bff      	cmp	r3, #255	; 0xff
 800d19a:	d002      	beq.n	800d1a2 <USBH_CDC_InterfaceInit+0x24>
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d901      	bls.n	800d1a6 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	e13d      	b.n	800d422 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fca7 	bl	800dafe <USBH_SelectInterface>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e131      	b.n	800d422 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d1c4:	2050      	movs	r0, #80	; 0x50
 800d1c6:	f006 fa01 	bl	80135cc <malloc>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d1de:	2302      	movs	r3, #2
 800d1e0:	e11f      	b.n	800d422 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d1e2:	2250      	movs	r2, #80	; 0x50
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	68b8      	ldr	r0, [r7, #8]
 800d1e8:	f006 fb6c 	bl	80138c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	211a      	movs	r1, #26
 800d1f2:	fb01 f303 	mul.w	r3, r1, r3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	b25b      	sxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	da15      	bge.n	800d230 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d204:	7bfb      	ldrb	r3, [r7, #15]
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	211a      	movs	r1, #26
 800d20a:	fb01 f303 	mul.w	r3, r1, r3
 800d20e:	4413      	add	r3, r2
 800d210:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d214:	781a      	ldrb	r2, [r3, #0]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	211a      	movs	r1, #26
 800d220:	fb01 f303 	mul.w	r3, r1, r3
 800d224:	4413      	add	r3, r2
 800d226:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d22a:	881a      	ldrh	r2, [r3, #0]
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	785b      	ldrb	r3, [r3, #1]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f002 fa27 	bl	800f68a <USBH_AllocPipe>
 800d23c:	4603      	mov	r3, r0
 800d23e:	461a      	mov	r2, r3
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	7819      	ldrb	r1, [r3, #0]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	7858      	ldrb	r0, [r3, #1]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	8952      	ldrh	r2, [r2, #10]
 800d25c:	9202      	str	r2, [sp, #8]
 800d25e:	2203      	movs	r2, #3
 800d260:	9201      	str	r2, [sp, #4]
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	4623      	mov	r3, r4
 800d266:	4602      	mov	r2, r0
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f002 f9df 	bl	800f62c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	2200      	movs	r2, #0
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f006 f91e 	bl	80134b8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d27c:	2300      	movs	r3, #0
 800d27e:	2200      	movs	r2, #0
 800d280:	210a      	movs	r1, #10
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fc57 	bl	800db36 <USBH_FindInterface>
 800d288:	4603      	mov	r3, r0
 800d28a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
 800d28e:	2bff      	cmp	r3, #255	; 0xff
 800d290:	d002      	beq.n	800d298 <USBH_CDC_InterfaceInit+0x11a>
 800d292:	7bfb      	ldrb	r3, [r7, #15]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d901      	bls.n	800d29c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d298:	2302      	movs	r3, #2
 800d29a:	e0c2      	b.n	800d422 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	211a      	movs	r1, #26
 800d2a2:	fb01 f303 	mul.w	r3, r1, r3
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b25b      	sxtb	r3, r3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	da16      	bge.n	800d2e2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	211a      	movs	r1, #26
 800d2ba:	fb01 f303 	mul.w	r3, r1, r3
 800d2be:	4413      	add	r3, r2
 800d2c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d2c4:	781a      	ldrb	r2, [r3, #0]
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	211a      	movs	r1, #26
 800d2d0:	fb01 f303 	mul.w	r3, r1, r3
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d2da:	881a      	ldrh	r2, [r3, #0]
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	835a      	strh	r2, [r3, #26]
 800d2e0:	e015      	b.n	800d30e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	211a      	movs	r1, #26
 800d2e8:	fb01 f303 	mul.w	r3, r1, r3
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d2f2:	781a      	ldrb	r2, [r3, #0]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	211a      	movs	r1, #26
 800d2fe:	fb01 f303 	mul.w	r3, r1, r3
 800d302:	4413      	add	r3, r2
 800d304:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d308:	881a      	ldrh	r2, [r3, #0]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	211a      	movs	r1, #26
 800d314:	fb01 f303 	mul.w	r3, r1, r3
 800d318:	4413      	add	r3, r2
 800d31a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	b25b      	sxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	da16      	bge.n	800d354 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	211a      	movs	r1, #26
 800d32c:	fb01 f303 	mul.w	r3, r1, r3
 800d330:	4413      	add	r3, r2
 800d332:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d336:	781a      	ldrb	r2, [r3, #0]
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	211a      	movs	r1, #26
 800d342:	fb01 f303 	mul.w	r3, r1, r3
 800d346:	4413      	add	r3, r2
 800d348:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d34c:	881a      	ldrh	r2, [r3, #0]
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	835a      	strh	r2, [r3, #26]
 800d352:	e015      	b.n	800d380 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	211a      	movs	r1, #26
 800d35a:	fb01 f303 	mul.w	r3, r1, r3
 800d35e:	4413      	add	r3, r2
 800d360:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d364:	781a      	ldrb	r2, [r3, #0]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	211a      	movs	r1, #26
 800d370:	fb01 f303 	mul.w	r3, r1, r3
 800d374:	4413      	add	r3, r2
 800d376:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d37a:	881a      	ldrh	r2, [r3, #0]
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	7b9b      	ldrb	r3, [r3, #14]
 800d384:	4619      	mov	r1, r3
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f002 f97f 	bl	800f68a <USBH_AllocPipe>
 800d38c:	4603      	mov	r3, r0
 800d38e:	461a      	mov	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	7bdb      	ldrb	r3, [r3, #15]
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f002 f975 	bl	800f68a <USBH_AllocPipe>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	7b59      	ldrb	r1, [r3, #13]
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	7b98      	ldrb	r0, [r3, #14]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	8b12      	ldrh	r2, [r2, #24]
 800d3c0:	9202      	str	r2, [sp, #8]
 800d3c2:	2202      	movs	r2, #2
 800d3c4:	9201      	str	r2, [sp, #4]
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	4623      	mov	r3, r4
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f002 f92d 	bl	800f62c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	7b19      	ldrb	r1, [r3, #12]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	7bd8      	ldrb	r0, [r3, #15]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	8b52      	ldrh	r2, [r2, #26]
 800d3ea:	9202      	str	r2, [sp, #8]
 800d3ec:	2202      	movs	r2, #2
 800d3ee:	9201      	str	r2, [sp, #4]
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	4623      	mov	r3, r4
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f002 f918 	bl	800f62c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	7b5b      	ldrb	r3, [r3, #13]
 800d408:	2200      	movs	r2, #0
 800d40a:	4619      	mov	r1, r3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f006 f853 	bl	80134b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	7b1b      	ldrb	r3, [r3, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f006 f84c 	bl	80134b8 <USBH_LL_SetToggle>

  return USBH_OK;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	bd90      	pop	{r4, r7, pc}

0800d42a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00e      	beq.n	800d462 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f002 f90d 	bl	800f66a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f002 f938 	bl	800f6cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	7b1b      	ldrb	r3, [r3, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00e      	beq.n	800d488 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	7b1b      	ldrb	r3, [r3, #12]
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f002 f8fa 	bl	800f66a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	7b1b      	ldrb	r3, [r3, #12]
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f002 f925 	bl	800f6cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	7b5b      	ldrb	r3, [r3, #13]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00e      	beq.n	800d4ae <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	7b5b      	ldrb	r3, [r3, #13]
 800d494:	4619      	mov	r1, r3
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f002 f8e7 	bl	800f66a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	7b5b      	ldrb	r3, [r3, #13]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f002 f912 	bl	800f6cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00b      	beq.n	800d4d2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f006 f88a 	bl	80135dc <free>
    phost->pActiveClass->pData = 0U;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	3340      	adds	r3, #64	; 0x40
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f8b2 	bl	800d65e <GetLineCoding>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d4fe:	7afb      	ldrb	r3, [r7, #11]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d105      	bne.n	800d510 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d50a:	2102      	movs	r1, #2
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d510:	7afb      	ldrb	r3, [r7, #11]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d524:	2301      	movs	r3, #1
 800d526:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	d877      	bhi.n	800d630 <USBH_CDC_Process+0x114>
 800d540:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <USBH_CDC_Process+0x2c>)
 800d542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d546:	bf00      	nop
 800d548:	0800d55d 	.word	0x0800d55d
 800d54c:	0800d563 	.word	0x0800d563
 800d550:	0800d593 	.word	0x0800d593
 800d554:	0800d607 	.word	0x0800d607
 800d558:	0800d615 	.word	0x0800d615
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]
      break;
 800d560:	e06d      	b.n	800d63e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f897 	bl	800d69c <SetLineCoding>
 800d56e:	4603      	mov	r3, r0
 800d570:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d572:	7bbb      	ldrb	r3, [r7, #14]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d104      	bne.n	800d582 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d580:	e058      	b.n	800d634 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d055      	beq.n	800d634 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2204      	movs	r2, #4
 800d58c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d590:	e050      	b.n	800d634 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	3340      	adds	r3, #64	; 0x40
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f860 	bl	800d65e <GetLineCoding>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d5a2:	7bbb      	ldrb	r3, [r7, #14]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d126      	bne.n	800d5f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ba:	791b      	ldrb	r3, [r3, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d13b      	bne.n	800d638 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d133      	bne.n	800d638 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d12b      	bne.n	800d638 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d124      	bne.n	800d638 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f982 	bl	800d8f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d5f4:	e020      	b.n	800d638 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d01d      	beq.n	800d638 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2204      	movs	r2, #4
 800d600:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d604:	e018      	b.n	800d638 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f867 	bl	800d6da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f8f6 	bl	800d7fe <CDC_ProcessReception>
      break;
 800d612:	e014      	b.n	800d63e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d614:	2100      	movs	r1, #0
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f001 f98a 	bl	800e930 <USBH_ClrFeature>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d62e:	e005      	b.n	800d63c <USBH_CDC_Process+0x120>

    default:
      break;
 800d630:	bf00      	nop
 800d632:	e004      	b.n	800d63e <USBH_CDC_Process+0x122>
      break;
 800d634:	bf00      	nop
 800d636:	e002      	b.n	800d63e <USBH_CDC_Process+0x122>
      break;
 800d638:	bf00      	nop
 800d63a:	e000      	b.n	800d63e <USBH_CDC_Process+0x122>
      break;
 800d63c:	bf00      	nop

  }

  return status;
 800d63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	22a1      	movs	r2, #161	; 0xa1
 800d66c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2221      	movs	r2, #33	; 0x21
 800d672:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2207      	movs	r2, #7
 800d684:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2207      	movs	r2, #7
 800d68a:	4619      	mov	r1, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f001 fc8b 	bl	800efa8 <USBH_CtlReq>
 800d692:	4603      	mov	r3, r0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2221      	movs	r2, #33	; 0x21
 800d6aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2207      	movs	r2, #7
 800d6c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2207      	movs	r2, #7
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f001 fc6c 	bl	800efa8 <USBH_CtlReq>
 800d6d0:	4603      	mov	r3, r0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b086      	sub	sp, #24
 800d6de:	af02      	add	r7, sp, #8
 800d6e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d002      	beq.n	800d700 <CDC_ProcessTransmission+0x26>
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d023      	beq.n	800d746 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d6fe:	e07a      	b.n	800d7f6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	8b12      	ldrh	r2, [r2, #24]
 800d708:	4293      	cmp	r3, r2
 800d70a:	d90b      	bls.n	800d724 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	69d9      	ldr	r1, [r3, #28]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8b1a      	ldrh	r2, [r3, #24]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	7b5b      	ldrb	r3, [r3, #13]
 800d718:	2001      	movs	r0, #1
 800d71a:	9000      	str	r0, [sp, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f001 ff42 	bl	800f5a6 <USBH_BulkSendData>
 800d722:	e00b      	b.n	800d73c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	7b5b      	ldrb	r3, [r3, #13]
 800d732:	2001      	movs	r0, #1
 800d734:	9000      	str	r0, [sp, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f001 ff35 	bl	800f5a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d744:	e057      	b.n	800d7f6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	7b5b      	ldrb	r3, [r3, #13]
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f005 fe89 	bl	8013464 <USBH_LL_GetURBState>
 800d752:	4603      	mov	r3, r0
 800d754:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d756:	7afb      	ldrb	r3, [r7, #11]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d136      	bne.n	800d7ca <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	68fa      	ldr	r2, [r7, #12]
 800d762:	8b12      	ldrh	r2, [r2, #24]
 800d764:	4293      	cmp	r3, r2
 800d766:	d90e      	bls.n	800d786 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	8b12      	ldrh	r2, [r2, #24]
 800d770:	1a9a      	subs	r2, r3, r2
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	69db      	ldr	r3, [r3, #28]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	8b12      	ldrh	r2, [r2, #24]
 800d77e:	441a      	add	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	61da      	str	r2, [r3, #28]
 800d784:	e002      	b.n	800d78c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2200      	movs	r2, #0
 800d78a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	2b00      	cmp	r3, #0
 800d792:	d004      	beq.n	800d79e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d79c:	e006      	b.n	800d7ac <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f892 	bl	800d8d0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2204      	movs	r2, #4
 800d7b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f002 fa92 	bl	800fcec <osMessageQueuePut>
      break;
 800d7c8:	e014      	b.n	800d7f4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800d7ca:	7afb      	ldrb	r3, [r7, #11]
 800d7cc:	2b02      	cmp	r3, #2
 800d7ce:	d111      	bne.n	800d7f4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2204      	movs	r2, #4
 800d7dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f002 fa7c 	bl	800fcec <osMessageQueuePut>
      break;
 800d7f4:	bf00      	nop
  }
}
 800d7f6:	bf00      	nop
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d810:	2300      	movs	r3, #0
 800d812:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d002      	beq.n	800d824 <CDC_ProcessReception+0x26>
 800d81e:	2b04      	cmp	r3, #4
 800d820:	d00e      	beq.n	800d840 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d822:	e051      	b.n	800d8c8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	6a19      	ldr	r1, [r3, #32]
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	8b5a      	ldrh	r2, [r3, #26]
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	7b1b      	ldrb	r3, [r3, #12]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 fedd 	bl	800f5f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2204      	movs	r2, #4
 800d83a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d83e:	e043      	b.n	800d8c8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	7b1b      	ldrb	r3, [r3, #12]
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f005 fe0c 	bl	8013464 <USBH_LL_GetURBState>
 800d84c:	4603      	mov	r3, r0
 800d84e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d850:	7cfb      	ldrb	r3, [r7, #19]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d137      	bne.n	800d8c6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	7b1b      	ldrb	r3, [r3, #12]
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f005 fd6f 	bl	8013340 <USBH_LL_GetLastXferSize>
 800d862:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d016      	beq.n	800d89c <CDC_ProcessReception+0x9e>
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	8b5b      	ldrh	r3, [r3, #26]
 800d872:	461a      	mov	r2, r3
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	4293      	cmp	r3, r2
 800d878:	d110      	bne.n	800d89c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	1ad2      	subs	r2, r2, r3
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	6a1a      	ldr	r2, [r3, #32]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	441a      	add	r2, r3
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2203      	movs	r2, #3
 800d896:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d89a:	e006      	b.n	800d8aa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 f81d 	bl	800d8e4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2204      	movs	r2, #4
 800d8ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f002 fa13 	bl	800fcec <osMessageQueuePut>
      break;
 800d8c6:	bf00      	nop
  }
}
 800d8c8:	bf00      	nop
 800d8ca:	3718      	adds	r7, #24
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d8ec:	bf00      	nop
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	4613      	mov	r3, r2
 800d918:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d920:	2302      	movs	r3, #2
 800d922:	e044      	b.n	800d9ae <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	79fa      	ldrb	r2, [r7, #7]
 800d928:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2200      	movs	r2, #0
 800d938:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f000 f841 	bl	800d9c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d003      	beq.n	800d970 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800d970:	2200      	movs	r2, #0
 800d972:	2104      	movs	r1, #4
 800d974:	2010      	movs	r0, #16
 800d976:	f002 f945 	bl	800fc04 <osMessageQueueNew>
 800d97a:	4602      	mov	r2, r0
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800d982:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <USBH_Init+0xac>)
 800d984:	4a0d      	ldr	r2, [pc, #52]	; (800d9bc <USBH_Init+0xb0>)
 800d986:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800d988:	4b0b      	ldr	r3, [pc, #44]	; (800d9b8 <USBH_Init+0xac>)
 800d98a:	2280      	movs	r2, #128	; 0x80
 800d98c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800d98e:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <USBH_Init+0xac>)
 800d990:	2218      	movs	r2, #24
 800d992:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800d994:	4a08      	ldr	r2, [pc, #32]	; (800d9b8 <USBH_Init+0xac>)
 800d996:	68f9      	ldr	r1, [r7, #12]
 800d998:	4809      	ldr	r0, [pc, #36]	; (800d9c0 <USBH_Init+0xb4>)
 800d99a:	f001 ff67 	bl	800f86c <osThreadNew>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f005 fc16 	bl	80131d8 <USBH_LL_Init>

  return USBH_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	2000068c 	.word	0x2000068c
 800d9bc:	080142ac 	.word	0x080142ac
 800d9c0:	0800e681 	.word	0x0800e681

0800d9c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	e009      	b.n	800d9ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	33e0      	adds	r3, #224	; 0xe0
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	60fb      	str	r3, [r7, #12]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b0f      	cmp	r3, #15
 800d9ee:	d9f2      	bls.n	800d9d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	e009      	b.n	800da0a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800da00:	2200      	movs	r2, #0
 800da02:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3301      	adds	r3, #1
 800da08:	60fb      	str	r3, [r7, #12]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da10:	d3f1      	bcc.n	800d9f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2240      	movs	r2, #64	; 0x40
 800da36:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	331c      	adds	r3, #28
 800da62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da66:	2100      	movs	r1, #0
 800da68:	4618      	mov	r0, r3
 800da6a:	f005 ff2b 	bl	80138c4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800da74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da78:	2100      	movs	r1, #0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f005 ff22 	bl	80138c4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f203 3326 	addw	r3, r3, #806	; 0x326
 800da86:	2212      	movs	r2, #18
 800da88:	2100      	movs	r1, #0
 800da8a:	4618      	mov	r0, r3
 800da8c:	f005 ff1a 	bl	80138c4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800da96:	223e      	movs	r2, #62	; 0x3e
 800da98:	2100      	movs	r1, #0
 800da9a:	4618      	mov	r0, r3
 800da9c:	f005 ff12 	bl	80138c4 <memset>

  return USBH_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800daaa:	b480      	push	{r7}
 800daac:	b085      	sub	sp, #20
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d016      	beq.n	800daec <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10e      	bne.n	800dae6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dace:	1c59      	adds	r1, r3, #1
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	33de      	adds	r3, #222	; 0xde
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73fb      	strb	r3, [r7, #15]
 800dae4:	e004      	b.n	800daf0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800dae6:	2302      	movs	r3, #2
 800dae8:	73fb      	strb	r3, [r7, #15]
 800daea:	e001      	b.n	800daf0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800daec:	2302      	movs	r3, #2
 800daee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800dafe:	b480      	push	{r7}
 800db00:	b085      	sub	sp, #20
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	460b      	mov	r3, r1
 800db08:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800db14:	78fa      	ldrb	r2, [r7, #3]
 800db16:	429a      	cmp	r2, r3
 800db18:	d204      	bcs.n	800db24 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	78fa      	ldrb	r2, [r7, #3]
 800db1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800db22:	e001      	b.n	800db28 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800db24:	2302      	movs	r3, #2
 800db26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800db36:	b480      	push	{r7}
 800db38:	b087      	sub	sp, #28
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	4608      	mov	r0, r1
 800db40:	4611      	mov	r1, r2
 800db42:	461a      	mov	r2, r3
 800db44:	4603      	mov	r3, r0
 800db46:	70fb      	strb	r3, [r7, #3]
 800db48:	460b      	mov	r3, r1
 800db4a:	70bb      	strb	r3, [r7, #2]
 800db4c:	4613      	mov	r3, r2
 800db4e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800db50:	2300      	movs	r3, #0
 800db52:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800db54:	2300      	movs	r3, #0
 800db56:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800db5e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800db60:	e025      	b.n	800dbae <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	221a      	movs	r2, #26
 800db66:	fb02 f303 	mul.w	r3, r2, r3
 800db6a:	3308      	adds	r3, #8
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4413      	add	r3, r2
 800db70:	3302      	adds	r3, #2
 800db72:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	795b      	ldrb	r3, [r3, #5]
 800db78:	78fa      	ldrb	r2, [r7, #3]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d002      	beq.n	800db84 <USBH_FindInterface+0x4e>
 800db7e:	78fb      	ldrb	r3, [r7, #3]
 800db80:	2bff      	cmp	r3, #255	; 0xff
 800db82:	d111      	bne.n	800dba8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800db88:	78ba      	ldrb	r2, [r7, #2]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d002      	beq.n	800db94 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800db8e:	78bb      	ldrb	r3, [r7, #2]
 800db90:	2bff      	cmp	r3, #255	; 0xff
 800db92:	d109      	bne.n	800dba8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800db98:	787a      	ldrb	r2, [r7, #1]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d002      	beq.n	800dba4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800db9e:	787b      	ldrb	r3, [r7, #1]
 800dba0:	2bff      	cmp	r3, #255	; 0xff
 800dba2:	d101      	bne.n	800dba8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800dba4:	7dfb      	ldrb	r3, [r7, #23]
 800dba6:	e006      	b.n	800dbb6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d9d6      	bls.n	800db62 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800dbb4:	23ff      	movs	r3, #255	; 0xff
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	371c      	adds	r7, #28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f005 fb40 	bl	8013250 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f005 fc59 	bl	801348a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
	...

0800dbe4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af04      	add	r7, sp, #16
 800dbea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800dbec:	2302      	movs	r3, #2
 800dbee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d102      	bne.n	800dc06 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2203      	movs	r2, #3
 800dc04:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	2b0b      	cmp	r3, #11
 800dc0e:	f200 8247 	bhi.w	800e0a0 <USBH_Process+0x4bc>
 800dc12:	a201      	add	r2, pc, #4	; (adr r2, 800dc18 <USBH_Process+0x34>)
 800dc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc18:	0800dc49 	.word	0x0800dc49
 800dc1c:	0800dc97 	.word	0x0800dc97
 800dc20:	0800dd1b 	.word	0x0800dd1b
 800dc24:	0800e01f 	.word	0x0800e01f
 800dc28:	0800e0a1 	.word	0x0800e0a1
 800dc2c:	0800dddb 	.word	0x0800dddb
 800dc30:	0800dfa9 	.word	0x0800dfa9
 800dc34:	0800de2d 	.word	0x0800de2d
 800dc38:	0800de69 	.word	0x0800de69
 800dc3c:	0800dea3 	.word	0x0800dea3
 800dc40:	0800df01 	.word	0x0800df01
 800dc44:	0800e007 	.word	0x0800e007
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 8227 	beq.w	800e0a4 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dc5c:	20c8      	movs	r0, #200	; 0xc8
 800dc5e:	f005 fc5e 	bl	801351e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f005 fb51 	bl	801330a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f002 f82c 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800dc94:	e206      	b.n	800e0a4 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d107      	bne.n	800dcb0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	e025      	b.n	800dcfc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dcb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcba:	d914      	bls.n	800dce6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d903      	bls.n	800dcde <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	220d      	movs	r2, #13
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	e00e      	b.n	800dcfc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
 800dce4:	e00a      	b.n	800dcfc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dcec:	f103 020a 	add.w	r2, r3, #10
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800dcf6:	200a      	movs	r0, #10
 800dcf8:	f005 fc11 	bl	801351e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd10:	2300      	movs	r3, #0
 800dd12:	2200      	movs	r2, #0
 800dd14:	f001 ffea 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800dd18:	e1cb      	b.n	800e0b2 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d005      	beq.n	800dd30 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd2a:	2104      	movs	r1, #4
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800dd30:	2064      	movs	r0, #100	; 0x64
 800dd32:	f005 fbf4 	bl	801351e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f005 fac0 	bl	80132bc <USBH_LL_GetSpeed>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	461a      	mov	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2205      	movs	r2, #5
 800dd4a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f001 fc9b 	bl	800f68a <USBH_AllocPipe>
 800dd54:	4603      	mov	r3, r0
 800dd56:	461a      	mov	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800dd5c:	2180      	movs	r1, #128	; 0x80
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f001 fc93 	bl	800f68a <USBH_AllocPipe>
 800dd64:	4603      	mov	r3, r0
 800dd66:	461a      	mov	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	7919      	ldrb	r1, [r3, #4]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800dd80:	b292      	uxth	r2, r2
 800dd82:	9202      	str	r2, [sp, #8]
 800dd84:	2200      	movs	r2, #0
 800dd86:	9201      	str	r2, [sp, #4]
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2280      	movs	r2, #128	; 0x80
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f001 fc4c 	bl	800f62c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7959      	ldrb	r1, [r3, #5]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800dda8:	b292      	uxth	r2, r2
 800ddaa:	9202      	str	r2, [sp, #8]
 800ddac:	2200      	movs	r2, #0
 800ddae:	9201      	str	r2, [sp, #4]
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 fc38 	bl	800f62c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f001 ff8a 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800ddd8:	e16b      	b.n	800e0b2 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f96e 	bl	800e0bc <USBH_HandleEnum>
 800dde0:	4603      	mov	r3, r0
 800dde2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f040 815d 	bne.w	800e0a8 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d103      	bne.n	800de08 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2208      	movs	r2, #8
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	e002      	b.n	800de0e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2207      	movs	r2, #7
 800de0c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2205      	movs	r2, #5
 800de12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de22:	2300      	movs	r3, #0
 800de24:	2200      	movs	r2, #0
 800de26:	f001 ff61 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800de2a:	e13d      	b.n	800e0a8 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 813a 	beq.w	800e0ac <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de3e:	2101      	movs	r1, #1
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2208      	movs	r2, #8
 800de48:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2205      	movs	r2, #5
 800de4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de5e:	2300      	movs	r3, #0
 800de60:	2200      	movs	r2, #0
 800de62:	f001 ff43 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800de66:	e121      	b.n	800e0ac <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800de6e:	b29b      	uxth	r3, r3
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fd15 	bl	800e8a2 <USBH_SetCfg>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d102      	bne.n	800de84 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2209      	movs	r2, #9
 800de82:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de98:	2300      	movs	r3, #0
 800de9a:	2200      	movs	r2, #0
 800de9c:	f001 ff26 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800dea0:	e107      	b.n	800e0b2 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800dea8:	f003 0320 	and.w	r3, r3, #32
 800deac:	2b00      	cmp	r3, #0
 800deae:	d015      	beq.n	800dedc <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800deb0:	2101      	movs	r1, #1
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fd18 	bl	800e8e8 <USBH_SetFeature>
 800deb8:	4603      	mov	r3, r0
 800deba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d103      	bne.n	800decc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	220a      	movs	r2, #10
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	e00a      	b.n	800dee2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800decc:	7bbb      	ldrb	r3, [r7, #14]
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d106      	bne.n	800dee2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	220a      	movs	r2, #10
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	e002      	b.n	800dee2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	220a      	movs	r2, #10
 800dee0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800def6:	2300      	movs	r3, #0
 800def8:	2200      	movs	r2, #0
 800defa:	f001 fef7 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800defe:	e0d8      	b.n	800e0b2 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800df06:	2b00      	cmp	r3, #0
 800df08:	d03f      	beq.n	800df8a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800df12:	2300      	movs	r3, #0
 800df14:	73fb      	strb	r3, [r7, #15]
 800df16:	e016      	b.n	800df46 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800df18:	7bfa      	ldrb	r2, [r7, #15]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	32de      	adds	r2, #222	; 0xde
 800df1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df22:	791a      	ldrb	r2, [r3, #4]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d108      	bne.n	800df40 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800df2e:	7bfa      	ldrb	r2, [r7, #15]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	32de      	adds	r2, #222	; 0xde
 800df34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800df3e:	e005      	b.n	800df4c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800df40:	7bfb      	ldrb	r3, [r7, #15]
 800df42:	3301      	adds	r3, #1
 800df44:	73fb      	strb	r3, [r7, #15]
 800df46:	7bfb      	ldrb	r3, [r7, #15]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d0e5      	beq.n	800df18 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df52:	2b00      	cmp	r3, #0
 800df54:	d016      	beq.n	800df84 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	4798      	blx	r3
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d109      	bne.n	800df7c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2206      	movs	r2, #6
 800df6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df74:	2103      	movs	r1, #3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	4798      	blx	r3
 800df7a:	e006      	b.n	800df8a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	220d      	movs	r2, #13
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	e002      	b.n	800df8a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	220d      	movs	r2, #13
 800df88:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2205      	movs	r2, #5
 800df8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df9e:	2300      	movs	r3, #0
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f001 fea3 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800dfa6:	e084      	b.n	800e0b2 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d017      	beq.n	800dfe2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	4798      	blx	r3
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d103      	bne.n	800dfd2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	220b      	movs	r2, #11
 800dfce:	701a      	strb	r2, [r3, #0]
 800dfd0:	e00a      	b.n	800dfe8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800dfd2:	7bbb      	ldrb	r3, [r7, #14]
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d106      	bne.n	800dfe8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	220d      	movs	r2, #13
 800dfde:	701a      	strb	r2, [r3, #0]
 800dfe0:	e002      	b.n	800dfe8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	220d      	movs	r2, #13
 800dfe6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2205      	movs	r2, #5
 800dfec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dffc:	2300      	movs	r3, #0
 800dffe:	2200      	movs	r2, #0
 800e000:	f001 fe74 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800e004:	e055      	b.n	800e0b2 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d04f      	beq.n	800e0b0 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	4798      	blx	r3
      }
      break;
 800e01c:	e048      	b.n	800e0b0 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff fccc 	bl	800d9c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e032:	2b00      	cmp	r3, #0
 800e034:	d009      	beq.n	800e04a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e050:	2b00      	cmp	r3, #0
 800e052:	d005      	beq.n	800e060 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e05a:	2105      	movs	r1, #5
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d107      	bne.n	800e07c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fda4 	bl	800dbc2 <USBH_Start>
 800e07a:	e002      	b.n	800e082 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f005 f8e7 	bl	8013250 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e096:	2300      	movs	r3, #0
 800e098:	2200      	movs	r2, #0
 800e09a:	f001 fe27 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      break;
 800e09e:	e008      	b.n	800e0b2 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800e0a0:	bf00      	nop
 800e0a2:	e006      	b.n	800e0b2 <USBH_Process+0x4ce>
      break;
 800e0a4:	bf00      	nop
 800e0a6:	e004      	b.n	800e0b2 <USBH_Process+0x4ce>
      break;
 800e0a8:	bf00      	nop
 800e0aa:	e002      	b.n	800e0b2 <USBH_Process+0x4ce>
    break;
 800e0ac:	bf00      	nop
 800e0ae:	e000      	b.n	800e0b2 <USBH_Process+0x4ce>
      break;
 800e0b0:	bf00      	nop
  }
  return USBH_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af04      	add	r7, sp, #16
 800e0c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	785b      	ldrb	r3, [r3, #1]
 800e0d0:	2b07      	cmp	r3, #7
 800e0d2:	f200 8208 	bhi.w	800e4e6 <USBH_HandleEnum+0x42a>
 800e0d6:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <USBH_HandleEnum+0x20>)
 800e0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0dc:	0800e0fd 	.word	0x0800e0fd
 800e0e0:	0800e1bb 	.word	0x0800e1bb
 800e0e4:	0800e225 	.word	0x0800e225
 800e0e8:	0800e2b3 	.word	0x0800e2b3
 800e0ec:	0800e31d 	.word	0x0800e31d
 800e0f0:	0800e38d 	.word	0x0800e38d
 800e0f4:	0800e429 	.word	0x0800e429
 800e0f8:	0800e4a7 	.word	0x0800e4a7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e0fc:	2108      	movs	r1, #8
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 faec 	bl	800e6dc <USBH_Get_DevDesc>
 800e104:	4603      	mov	r3, r0
 800e106:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d130      	bne.n	800e170 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	7919      	ldrb	r1, [r3, #4]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e132:	b292      	uxth	r2, r2
 800e134:	9202      	str	r2, [sp, #8]
 800e136:	2200      	movs	r2, #0
 800e138:	9201      	str	r2, [sp, #4]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	4603      	mov	r3, r0
 800e13e:	2280      	movs	r2, #128	; 0x80
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f001 fa73 	bl	800f62c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	7959      	ldrb	r1, [r3, #5]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e15a:	b292      	uxth	r2, r2
 800e15c:	9202      	str	r2, [sp, #8]
 800e15e:	2200      	movs	r2, #0
 800e160:	9201      	str	r2, [sp, #4]
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	4603      	mov	r3, r0
 800e166:	2200      	movs	r2, #0
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f001 fa5f 	bl	800f62c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e16e:	e1bc      	b.n	800e4ea <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e170:	7bbb      	ldrb	r3, [r7, #14]
 800e172:	2b03      	cmp	r3, #3
 800e174:	f040 81b9 	bne.w	800e4ea <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e17e:	3301      	adds	r3, #1
 800e180:	b2da      	uxtb	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e18e:	2b03      	cmp	r3, #3
 800e190:	d903      	bls.n	800e19a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	220d      	movs	r2, #13
 800e196:	701a      	strb	r2, [r3, #0]
      break;
 800e198:	e1a7      	b.n	800e4ea <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	795b      	ldrb	r3, [r3, #5]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f001 fa93 	bl	800f6cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	791b      	ldrb	r3, [r3, #4]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f001 fa8d 	bl	800f6cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	701a      	strb	r2, [r3, #0]
      break;
 800e1b8:	e197      	b.n	800e4ea <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e1ba:	2112      	movs	r1, #18
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fa8d 	bl	800e6dc <USBH_Get_DevDesc>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e1c6:	7bbb      	ldrb	r3, [r7, #14]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d103      	bne.n	800e1d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e1d2:	e18c      	b.n	800e4ee <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	2b03      	cmp	r3, #3
 800e1d8:	f040 8189 	bne.w	800e4ee <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d903      	bls.n	800e1fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	220d      	movs	r2, #13
 800e1fa:	701a      	strb	r2, [r3, #0]
      break;
 800e1fc:	e177      	b.n	800e4ee <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	795b      	ldrb	r3, [r3, #5]
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f001 fa61 	bl	800f6cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	791b      	ldrb	r3, [r3, #4]
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f001 fa5b 	bl	800f6cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	701a      	strb	r2, [r3, #0]
      break;
 800e222:	e164      	b.n	800e4ee <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e224:	2101      	movs	r1, #1
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fb17 	bl	800e85a <USBH_SetAddress>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e230:	7bbb      	ldrb	r3, [r7, #14]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d132      	bne.n	800e29c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e236:	2002      	movs	r0, #2
 800e238:	f005 f971 	bl	801351e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2203      	movs	r2, #3
 800e248:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	7919      	ldrb	r1, [r3, #4]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e25e:	b292      	uxth	r2, r2
 800e260:	9202      	str	r2, [sp, #8]
 800e262:	2200      	movs	r2, #0
 800e264:	9201      	str	r2, [sp, #4]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4603      	mov	r3, r0
 800e26a:	2280      	movs	r2, #128	; 0x80
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f001 f9dd 	bl	800f62c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	7959      	ldrb	r1, [r3, #5]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e286:	b292      	uxth	r2, r2
 800e288:	9202      	str	r2, [sp, #8]
 800e28a:	2200      	movs	r2, #0
 800e28c:	9201      	str	r2, [sp, #4]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	4603      	mov	r3, r0
 800e292:	2200      	movs	r2, #0
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f001 f9c9 	bl	800f62c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e29a:	e12a      	b.n	800e4f2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e29c:	7bbb      	ldrb	r3, [r7, #14]
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	f040 8127 	bne.w	800e4f2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	220d      	movs	r2, #13
 800e2a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	705a      	strb	r2, [r3, #1]
      break;
 800e2b0:	e11f      	b.n	800e4f2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e2b2:	2109      	movs	r1, #9
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fa3d 	bl	800e734 <USBH_Get_CfgDesc>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d103      	bne.n	800e2cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2204      	movs	r2, #4
 800e2c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e2ca:	e114      	b.n	800e4f6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e2cc:	7bbb      	ldrb	r3, [r7, #14]
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	f040 8111 	bne.w	800e4f6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e2da:	3301      	adds	r3, #1
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e2ea:	2b03      	cmp	r3, #3
 800e2ec:	d903      	bls.n	800e2f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	220d      	movs	r2, #13
 800e2f2:	701a      	strb	r2, [r3, #0]
      break;
 800e2f4:	e0ff      	b.n	800e4f6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	795b      	ldrb	r3, [r3, #5]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f001 f9e5 	bl	800f6cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	791b      	ldrb	r3, [r3, #4]
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f001 f9df 	bl	800f6cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	701a      	strb	r2, [r3, #0]
      break;
 800e31a:	e0ec      	b.n	800e4f6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e322:	4619      	mov	r1, r3
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 fa05 	bl	800e734 <USBH_Get_CfgDesc>
 800e32a:	4603      	mov	r3, r0
 800e32c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e32e:	7bbb      	ldrb	r3, [r7, #14]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d103      	bne.n	800e33c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2205      	movs	r2, #5
 800e338:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e33a:	e0de      	b.n	800e4fa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e33c:	7bbb      	ldrb	r3, [r7, #14]
 800e33e:	2b03      	cmp	r3, #3
 800e340:	f040 80db 	bne.w	800e4fa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e34a:	3301      	adds	r3, #1
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d903      	bls.n	800e366 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	220d      	movs	r2, #13
 800e362:	701a      	strb	r2, [r3, #0]
      break;
 800e364:	e0c9      	b.n	800e4fa <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	795b      	ldrb	r3, [r3, #5]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f001 f9ad 	bl	800f6cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	791b      	ldrb	r3, [r3, #4]
 800e376:	4619      	mov	r1, r3
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f001 f9a7 	bl	800f6cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	701a      	strb	r2, [r3, #0]
      break;
 800e38a:	e0b6      	b.n	800e4fa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e392:	2b00      	cmp	r3, #0
 800e394:	d036      	beq.n	800e404 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e3a2:	23ff      	movs	r3, #255	; 0xff
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f9ef 	bl	800e788 <USBH_Get_StringDesc>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d111      	bne.n	800e3d8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2206      	movs	r2, #6
 800e3b8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2205      	movs	r2, #5
 800e3be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f001 fc8b 	bl	800fcec <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e3d6:	e092      	b.n	800e4fe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e3d8:	7bbb      	ldrb	r3, [r7, #14]
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	f040 808f 	bne.w	800e4fe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2206      	movs	r2, #6
 800e3e4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2205      	movs	r2, #5
 800e3ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f001 fc75 	bl	800fcec <osMessageQueuePut>
      break;
 800e402:	e07c      	b.n	800e4fe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2206      	movs	r2, #6
 800e408:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2205      	movs	r2, #5
 800e40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e41e:	2300      	movs	r3, #0
 800e420:	2200      	movs	r2, #0
 800e422:	f001 fc63 	bl	800fcec <osMessageQueuePut>
      break;
 800e426:	e06a      	b.n	800e4fe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d027      	beq.n	800e482 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e43e:	23ff      	movs	r3, #255	; 0xff
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f9a1 	bl	800e788 <USBH_Get_StringDesc>
 800e446:	4603      	mov	r3, r0
 800e448:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e44a:	7bbb      	ldrb	r3, [r7, #14]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d103      	bne.n	800e458 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2207      	movs	r2, #7
 800e454:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e456:	e054      	b.n	800e502 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e458:	7bbb      	ldrb	r3, [r7, #14]
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d151      	bne.n	800e502 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2207      	movs	r2, #7
 800e462:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2205      	movs	r2, #5
 800e468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e478:	2300      	movs	r3, #0
 800e47a:	2200      	movs	r2, #0
 800e47c:	f001 fc36 	bl	800fcec <osMessageQueuePut>
      break;
 800e480:	e03f      	b.n	800e502 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2207      	movs	r2, #7
 800e486:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2205      	movs	r2, #5
 800e48c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e49c:	2300      	movs	r3, #0
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f001 fc24 	bl	800fcec <osMessageQueuePut>
      break;
 800e4a4:	e02d      	b.n	800e502 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d017      	beq.n	800e4e0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e4bc:	23ff      	movs	r3, #255	; 0xff
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f962 	bl	800e788 <USBH_Get_StringDesc>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d102      	bne.n	800e4d4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e4d2:	e018      	b.n	800e506 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4d4:	7bbb      	ldrb	r3, [r7, #14]
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d115      	bne.n	800e506 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e4de:	e012      	b.n	800e506 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e4e4:	e00f      	b.n	800e506 <USBH_HandleEnum+0x44a>

    default:
      break;
 800e4e6:	bf00      	nop
 800e4e8:	e00e      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e4ea:	bf00      	nop
 800e4ec:	e00c      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e4ee:	bf00      	nop
 800e4f0:	e00a      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e4f2:	bf00      	nop
 800e4f4:	e008      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e4f6:	bf00      	nop
 800e4f8:	e006      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e4fa:	bf00      	nop
 800e4fc:	e004      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e4fe:	bf00      	nop
 800e500:	e002      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e502:	bf00      	nop
 800e504:	e000      	b.n	800e508 <USBH_HandleEnum+0x44c>
      break;
 800e506:	bf00      	nop
  }
  return Status;
 800e508:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop

0800e514 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e526:	bf00      	nop
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f804 	bl	800e556 <USBH_HandleSof>
}
 800e54e:	bf00      	nop
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b082      	sub	sp, #8
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	2b0b      	cmp	r3, #11
 800e566:	d10a      	bne.n	800e57e <USBH_HandleSof+0x28>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d005      	beq.n	800e57e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	4798      	blx	r3
  }
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f001 fb9d 	bl	800fcec <osMessageQueuePut>
#endif
#endif

  return;
 800e5b2:	bf00      	nop
}
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b083      	sub	sp, #12
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e5ca:	bf00      	nop
}
 800e5cc:	370c      	adds	r7, #12
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b082      	sub	sp, #8
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e60a:	2300      	movs	r3, #0
 800e60c:	2200      	movs	r2, #0
 800e60e:	f001 fb6d 	bl	800fcec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2201      	movs	r2, #1
 800e628:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f004 fe22 	bl	8013286 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	791b      	ldrb	r3, [r3, #4]
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f001 f83f 	bl	800f6cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	795b      	ldrb	r3, [r3, #5]
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 f839 	bl	800f6cc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2201      	movs	r2, #1
 800e65e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e66e:	2300      	movs	r3, #0
 800e670:	2200      	movs	r2, #0
 800e672:	f001 fb3b 	bl	800fcec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e694:	f04f 33ff 	mov.w	r3, #4294967295
 800e698:	2200      	movs	r2, #0
 800e69a:	f001 fb87 	bl	800fdac <osMessageQueueGet>
 800e69e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1f0      	bne.n	800e688 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff fa9c 	bl	800dbe4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e6ac:	e7ec      	b.n	800e688 <USBH_Process_OS+0x8>

0800e6ae <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b082      	sub	sp, #8
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f001 fb0d 	bl	800fcec <osMessageQueuePut>
#endif

  return USBH_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af02      	add	r7, sp, #8
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e6e8:	887b      	ldrh	r3, [r7, #2]
 800e6ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6ee:	d901      	bls.n	800e6f4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	e01b      	b.n	800e72c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e6fa:	887b      	ldrh	r3, [r7, #2]
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	4613      	mov	r3, r2
 800e700:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e704:	2100      	movs	r1, #0
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f872 	bl	800e7f0 <USBH_GetDescriptor>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d109      	bne.n	800e72a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e71c:	887a      	ldrh	r2, [r7, #2]
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f929 	bl	800e978 <USBH_ParseDevDesc>
 800e726:	4603      	mov	r3, r0
 800e728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af02      	add	r7, sp, #8
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	331c      	adds	r3, #28
 800e744:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e746:	887b      	ldrh	r3, [r7, #2]
 800e748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e74c:	d901      	bls.n	800e752 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e74e:	2303      	movs	r3, #3
 800e750:	e016      	b.n	800e780 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e752:	887b      	ldrh	r3, [r7, #2]
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e75c:	2100      	movs	r1, #0
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f846 	bl	800e7f0 <USBH_GetDescriptor>
 800e764:	4603      	mov	r3, r0
 800e766:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e768:	7bfb      	ldrb	r3, [r7, #15]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d107      	bne.n	800e77e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e76e:	887b      	ldrh	r3, [r7, #2]
 800e770:	461a      	mov	r2, r3
 800e772:	68b9      	ldr	r1, [r7, #8]
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 f9b3 	bl	800eae0 <USBH_ParseCfgDesc>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b088      	sub	sp, #32
 800e78c:	af02      	add	r7, sp, #8
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	607a      	str	r2, [r7, #4]
 800e792:	461a      	mov	r2, r3
 800e794:	460b      	mov	r3, r1
 800e796:	72fb      	strb	r3, [r7, #11]
 800e798:	4613      	mov	r3, r2
 800e79a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e79c:	893b      	ldrh	r3, [r7, #8]
 800e79e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7a2:	d802      	bhi.n	800e7aa <USBH_Get_StringDesc+0x22>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	e01c      	b.n	800e7e8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800e7ae:	7afb      	ldrb	r3, [r7, #11]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e7b6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e7be:	893b      	ldrh	r3, [r7, #8]
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f000 f812 	bl	800e7f0 <USBH_GetDescriptor>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d107      	bne.n	800e7e6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e7dc:	893a      	ldrh	r2, [r7, #8]
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 fb93 	bl	800ef0c <USBH_ParseStringDesc>
  }

  return status;
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	607b      	str	r3, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	72fb      	strb	r3, [r7, #11]
 800e7fe:	4613      	mov	r3, r2
 800e800:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	789b      	ldrb	r3, [r3, #2]
 800e806:	2b01      	cmp	r3, #1
 800e808:	d11c      	bne.n	800e844 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e80a:	7afb      	ldrb	r3, [r7, #11]
 800e80c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e810:	b2da      	uxtb	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2206      	movs	r2, #6
 800e81a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	893a      	ldrh	r2, [r7, #8]
 800e820:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e822:	893b      	ldrh	r3, [r7, #8]
 800e824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e82c:	d104      	bne.n	800e838 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f240 4209 	movw	r2, #1033	; 0x409
 800e834:	829a      	strh	r2, [r3, #20]
 800e836:	e002      	b.n	800e83e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	8b3a      	ldrh	r2, [r7, #24]
 800e842:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e844:	8b3b      	ldrh	r3, [r7, #24]
 800e846:	461a      	mov	r2, r3
 800e848:	6879      	ldr	r1, [r7, #4]
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f000 fbac 	bl	800efa8 <USBH_CtlReq>
 800e850:	4603      	mov	r3, r0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	460b      	mov	r3, r1
 800e864:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	789b      	ldrb	r3, [r3, #2]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d10f      	bne.n	800e88e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2205      	movs	r2, #5
 800e878:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e87a:	78fb      	ldrb	r3, [r7, #3]
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e88e:	2200      	movs	r2, #0
 800e890:	2100      	movs	r1, #0
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 fb88 	bl	800efa8 <USBH_CtlReq>
 800e898:	4603      	mov	r3, r0
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	789b      	ldrb	r3, [r3, #2]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d10e      	bne.n	800e8d4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2209      	movs	r2, #9
 800e8c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	887a      	ldrh	r2, [r7, #2]
 800e8c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fb65 	bl	800efa8 <USBH_CtlReq>
 800e8de:	4603      	mov	r3, r0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	789b      	ldrb	r3, [r3, #2]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d10f      	bne.n	800e91c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2203      	movs	r2, #3
 800e906:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e908:	78fb      	ldrb	r3, [r7, #3]
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e91c:	2200      	movs	r2, #0
 800e91e:	2100      	movs	r1, #0
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 fb41 	bl	800efa8 <USBH_CtlReq>
 800e926:	4603      	mov	r3, r0
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	460b      	mov	r3, r1
 800e93a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	789b      	ldrb	r3, [r3, #2]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d10f      	bne.n	800e964 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2202      	movs	r2, #2
 800e948:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e956:	78fb      	ldrb	r3, [r7, #3]
 800e958:	b29a      	uxth	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e964:	2200      	movs	r2, #0
 800e966:	2100      	movs	r1, #0
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fb1d 	bl	800efa8 <USBH_CtlReq>
 800e96e:	4603      	mov	r3, r0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e978:	b480      	push	{r7}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	4613      	mov	r3, r2
 800e984:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f203 3326 	addw	r3, r3, #806	; 0x326
 800e98c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800e998:	2302      	movs	r3, #2
 800e99a:	e098      	b.n	800eace <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	781a      	ldrb	r2, [r3, #0]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	785a      	ldrb	r2, [r3, #1]
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	3303      	adds	r3, #3
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	021b      	lsls	r3, r3, #8
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	791a      	ldrb	r2, [r3, #4]
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	795a      	ldrb	r2, [r3, #5]
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	799a      	ldrb	r2, [r3, #6]
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	79da      	ldrb	r2, [r3, #7]
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d004      	beq.n	800e9fc <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d11b      	bne.n	800ea34 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	79db      	ldrb	r3, [r3, #7]
 800ea00:	2b20      	cmp	r3, #32
 800ea02:	dc0f      	bgt.n	800ea24 <USBH_ParseDevDesc+0xac>
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	db0f      	blt.n	800ea28 <USBH_ParseDevDesc+0xb0>
 800ea08:	3b08      	subs	r3, #8
 800ea0a:	4a34      	ldr	r2, [pc, #208]	; (800eadc <USBH_ParseDevDesc+0x164>)
 800ea0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea10:	f003 0301 	and.w	r3, r3, #1
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	bf14      	ite	ne
 800ea18:	2301      	movne	r3, #1
 800ea1a:	2300      	moveq	r3, #0
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d106      	bne.n	800ea30 <USBH_ParseDevDesc+0xb8>
 800ea22:	e001      	b.n	800ea28 <USBH_ParseDevDesc+0xb0>
 800ea24:	2b40      	cmp	r3, #64	; 0x40
 800ea26:	d003      	beq.n	800ea30 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	2208      	movs	r2, #8
 800ea2c:	71da      	strb	r2, [r3, #7]
        break;
 800ea2e:	e000      	b.n	800ea32 <USBH_ParseDevDesc+0xba>
        break;
 800ea30:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ea32:	e00e      	b.n	800ea52 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ea3a:	2b02      	cmp	r3, #2
 800ea3c:	d107      	bne.n	800ea4e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	79db      	ldrb	r3, [r3, #7]
 800ea42:	2b08      	cmp	r3, #8
 800ea44:	d005      	beq.n	800ea52 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	2208      	movs	r2, #8
 800ea4a:	71da      	strb	r2, [r3, #7]
 800ea4c:	e001      	b.n	800ea52 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ea52:	88fb      	ldrh	r3, [r7, #6]
 800ea54:	2b08      	cmp	r3, #8
 800ea56:	d939      	bls.n	800eacc <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	3309      	adds	r3, #9
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	021b      	lsls	r3, r3, #8
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	330a      	adds	r3, #10
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	330b      	adds	r3, #11
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	021b      	lsls	r3, r3, #8
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	330c      	adds	r3, #12
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	330d      	adds	r3, #13
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	021b      	lsls	r3, r3, #8
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	7b9a      	ldrb	r2, [r3, #14]
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	7bda      	ldrb	r2, [r3, #15]
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	7c1a      	ldrb	r2, [r3, #16]
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	7c5a      	ldrb	r2, [r3, #17]
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800eacc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	371c      	adds	r7, #28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	01000101 	.word	0x01000101

0800eae0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b08c      	sub	sp, #48	; 0x30
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	4613      	mov	r3, r2
 800eaec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eaf4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800eafc:	2300      	movs	r3, #0
 800eafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800eb02:	2300      	movs	r3, #0
 800eb04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800eb0e:	2302      	movs	r3, #2
 800eb10:	e0db      	b.n	800ecca <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	2b09      	cmp	r3, #9
 800eb1c:	d002      	beq.n	800eb24 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800eb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb20:	2209      	movs	r2, #9
 800eb22:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	781a      	ldrb	r2, [r3, #0]
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	785a      	ldrb	r2, [r3, #1]
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	3302      	adds	r3, #2
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	3303      	adds	r3, #3
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb50:	bf28      	it	cs
 800eb52:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800eb56:	b29a      	uxth	r2, r3
 800eb58:	6a3b      	ldr	r3, [r7, #32]
 800eb5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	791a      	ldrb	r2, [r3, #4]
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	795a      	ldrb	r2, [r3, #5]
 800eb68:	6a3b      	ldr	r3, [r7, #32]
 800eb6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	799a      	ldrb	r2, [r3, #6]
 800eb70:	6a3b      	ldr	r3, [r7, #32]
 800eb72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	79da      	ldrb	r2, [r3, #7]
 800eb78:	6a3b      	ldr	r3, [r7, #32]
 800eb7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	7a1a      	ldrb	r2, [r3, #8]
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	2b09      	cmp	r3, #9
 800eb88:	f240 809d 	bls.w	800ecc6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800eb8c:	2309      	movs	r3, #9
 800eb8e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eb94:	e081      	b.n	800ec9a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eb96:	f107 0316 	add.w	r3, r7, #22
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb9e:	f000 f9e8 	bl	800ef72 <USBH_GetNextDesc>
 800eba2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800eba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba6:	785b      	ldrb	r3, [r3, #1]
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d176      	bne.n	800ec9a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	2b09      	cmp	r3, #9
 800ebb2:	d002      	beq.n	800ebba <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	2209      	movs	r2, #9
 800ebb8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ebba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebbe:	221a      	movs	r2, #26
 800ebc0:	fb02 f303 	mul.w	r3, r2, r3
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	6a3a      	ldr	r2, [r7, #32]
 800ebc8:	4413      	add	r3, r2
 800ebca:	3302      	adds	r3, #2
 800ebcc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ebce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebd0:	69f8      	ldr	r0, [r7, #28]
 800ebd2:	f000 f87e 	bl	800ecd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ebe0:	e043      	b.n	800ec6a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ebe2:	f107 0316 	add.w	r3, r7, #22
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebea:	f000 f9c2 	bl	800ef72 <USBH_GetNextDesc>
 800ebee:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	785b      	ldrb	r3, [r3, #1]
 800ebf4:	2b05      	cmp	r3, #5
 800ebf6:	d138      	bne.n	800ec6a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	795b      	ldrb	r3, [r3, #5]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d113      	bne.n	800ec28 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d003      	beq.n	800ec10 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	799b      	ldrb	r3, [r3, #6]
 800ec0c:	2b03      	cmp	r3, #3
 800ec0e:	d10b      	bne.n	800ec28 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	79db      	ldrb	r3, [r3, #7]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10b      	bne.n	800ec30 <USBH_ParseCfgDesc+0x150>
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	2b09      	cmp	r3, #9
 800ec1e:	d007      	beq.n	800ec30 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	2209      	movs	r2, #9
 800ec24:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ec26:	e003      	b.n	800ec30 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	2207      	movs	r2, #7
 800ec2c:	701a      	strb	r2, [r3, #0]
 800ec2e:	e000      	b.n	800ec32 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ec30:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ec32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ec3a:	3201      	adds	r2, #1
 800ec3c:	00d2      	lsls	r2, r2, #3
 800ec3e:	211a      	movs	r1, #26
 800ec40:	fb01 f303 	mul.w	r3, r1, r3
 800ec44:	4413      	add	r3, r2
 800ec46:	3308      	adds	r3, #8
 800ec48:	6a3a      	ldr	r2, [r7, #32]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ec50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec52:	69b9      	ldr	r1, [r7, #24]
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f870 	bl	800ed3a <USBH_ParseEPDesc>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ec60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec64:	3301      	adds	r3, #1
 800ec66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	791b      	ldrb	r3, [r3, #4]
 800ec6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d204      	bcs.n	800ec80 <USBH_ParseCfgDesc+0x1a0>
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	885a      	ldrh	r2, [r3, #2]
 800ec7a:	8afb      	ldrh	r3, [r7, #22]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d8b0      	bhi.n	800ebe2 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	791b      	ldrb	r3, [r3, #4]
 800ec84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d201      	bcs.n	800ec90 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e01c      	b.n	800ecca <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800ec90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec94:	3301      	adds	r3, #1
 800ec96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ec9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d805      	bhi.n	800ecae <USBH_ParseCfgDesc+0x1ce>
 800eca2:	6a3b      	ldr	r3, [r7, #32]
 800eca4:	885a      	ldrh	r2, [r3, #2]
 800eca6:	8afb      	ldrh	r3, [r7, #22]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	f63f af74 	bhi.w	800eb96 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	791b      	ldrb	r3, [r3, #4]
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	bf28      	it	cs
 800ecb6:	2302      	movcs	r3, #2
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d201      	bcs.n	800ecc6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	e001      	b.n	800ecca <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800ecc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3730      	adds	r7, #48	; 0x30
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	b083      	sub	sp, #12
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	781a      	ldrb	r2, [r3, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	785a      	ldrb	r2, [r3, #1]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	789a      	ldrb	r2, [r3, #2]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	78da      	ldrb	r2, [r3, #3]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	bf28      	it	cs
 800ed06:	2302      	movcs	r3, #2
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	795a      	ldrb	r2, [r3, #5]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	799a      	ldrb	r2, [r3, #6]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	79da      	ldrb	r2, [r3, #7]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	7a1a      	ldrb	r2, [r3, #8]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	721a      	strb	r2, [r3, #8]
}
 800ed2e:	bf00      	nop
 800ed30:	370c      	adds	r7, #12
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr

0800ed3a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ed3a:	b480      	push	{r7}
 800ed3c:	b087      	sub	sp, #28
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	60b9      	str	r1, [r7, #8]
 800ed44:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ed46:	2300      	movs	r3, #0
 800ed48:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	785a      	ldrb	r2, [r3, #1]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	789a      	ldrb	r2, [r3, #2]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	78da      	ldrb	r2, [r3, #3]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	3305      	adds	r3, #5
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	021b      	lsls	r3, r3, #8
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	799a      	ldrb	r2, [r3, #6]
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	889b      	ldrh	r3, [r3, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d009      	beq.n	800edaa <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ed9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed9e:	d804      	bhi.n	800edaa <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800eda4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eda8:	d901      	bls.n	800edae <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800edaa:	2303      	movs	r3, #3
 800edac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d136      	bne.n	800ee26 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	78db      	ldrb	r3, [r3, #3]
 800edbc:	f003 0303 	and.w	r3, r3, #3
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d108      	bne.n	800edd6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	889b      	ldrh	r3, [r3, #4]
 800edc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edcc:	f240 8097 	bls.w	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800edd0:	2303      	movs	r3, #3
 800edd2:	75fb      	strb	r3, [r7, #23]
 800edd4:	e093      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	78db      	ldrb	r3, [r3, #3]
 800edda:	f003 0303 	and.w	r3, r3, #3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d107      	bne.n	800edf2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	889b      	ldrh	r3, [r3, #4]
 800ede6:	2b40      	cmp	r3, #64	; 0x40
 800ede8:	f240 8089 	bls.w	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800edec:	2303      	movs	r3, #3
 800edee:	75fb      	strb	r3, [r7, #23]
 800edf0:	e085      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	78db      	ldrb	r3, [r3, #3]
 800edf6:	f003 0303 	and.w	r3, r3, #3
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d005      	beq.n	800ee0a <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	78db      	ldrb	r3, [r3, #3]
 800ee02:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d10a      	bne.n	800ee20 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	799b      	ldrb	r3, [r3, #6]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d003      	beq.n	800ee1a <USBH_ParseEPDesc+0xe0>
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	799b      	ldrb	r3, [r3, #6]
 800ee16:	2b10      	cmp	r3, #16
 800ee18:	d970      	bls.n	800eefc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ee1e:	e06d      	b.n	800eefc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ee20:	2303      	movs	r3, #3
 800ee22:	75fb      	strb	r3, [r7, #23]
 800ee24:	e06b      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d13c      	bne.n	800eeaa <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	78db      	ldrb	r3, [r3, #3]
 800ee34:	f003 0303 	and.w	r3, r3, #3
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d005      	beq.n	800ee48 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	78db      	ldrb	r3, [r3, #3]
 800ee40:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d106      	bne.n	800ee56 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	889b      	ldrh	r3, [r3, #4]
 800ee4c:	2b40      	cmp	r3, #64	; 0x40
 800ee4e:	d956      	bls.n	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ee50:	2303      	movs	r3, #3
 800ee52:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ee54:	e053      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	78db      	ldrb	r3, [r3, #3]
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d10e      	bne.n	800ee80 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	799b      	ldrb	r3, [r3, #6]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ee6e:	2b10      	cmp	r3, #16
 800ee70:	d803      	bhi.n	800ee7a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ee76:	2b40      	cmp	r3, #64	; 0x40
 800ee78:	d941      	bls.n	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	75fb      	strb	r3, [r7, #23]
 800ee7e:	e03e      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	78db      	ldrb	r3, [r3, #3]
 800ee84:	f003 0303 	and.w	r3, r3, #3
 800ee88:	2b03      	cmp	r3, #3
 800ee8a:	d10b      	bne.n	800eea4 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	799b      	ldrb	r3, [r3, #6]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d004      	beq.n	800ee9e <USBH_ParseEPDesc+0x164>
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	889b      	ldrh	r3, [r3, #4]
 800ee98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee9c:	d32f      	bcc.n	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	75fb      	strb	r3, [r7, #23]
 800eea2:	e02c      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eea4:	2303      	movs	r3, #3
 800eea6:	75fb      	strb	r3, [r7, #23]
 800eea8:	e029      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d120      	bne.n	800eef6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	78db      	ldrb	r3, [r3, #3]
 800eeb8:	f003 0303 	and.w	r3, r3, #3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d106      	bne.n	800eece <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	889b      	ldrh	r3, [r3, #4]
 800eec4:	2b08      	cmp	r3, #8
 800eec6:	d01a      	beq.n	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800eec8:	2303      	movs	r3, #3
 800eeca:	75fb      	strb	r3, [r7, #23]
 800eecc:	e017      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	78db      	ldrb	r3, [r3, #3]
 800eed2:	f003 0303 	and.w	r3, r3, #3
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d10a      	bne.n	800eef0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	799b      	ldrb	r3, [r3, #6]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <USBH_ParseEPDesc+0x1b0>
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	889b      	ldrh	r3, [r3, #4]
 800eee6:	2b08      	cmp	r3, #8
 800eee8:	d909      	bls.n	800eefe <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800eeea:	2303      	movs	r3, #3
 800eeec:	75fb      	strb	r3, [r7, #23]
 800eeee:	e006      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eef0:	2303      	movs	r3, #3
 800eef2:	75fb      	strb	r3, [r7, #23]
 800eef4:	e003      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800eef6:	2303      	movs	r3, #3
 800eef8:	75fb      	strb	r3, [r7, #23]
 800eefa:	e000      	b.n	800eefe <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800eefc:	bf00      	nop
  }

  return status;
 800eefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	371c      	adds	r7, #28
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	4613      	mov	r3, r2
 800ef18:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d120      	bne.n	800ef66 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	1e9a      	subs	r2, r3, #2
 800ef2a:	88fb      	ldrh	r3, [r7, #6]
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	bf28      	it	cs
 800ef30:	4613      	movcs	r3, r2
 800ef32:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	3302      	adds	r3, #2
 800ef38:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	82fb      	strh	r3, [r7, #22]
 800ef3e:	e00b      	b.n	800ef58 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ef40:	8afb      	ldrh	r3, [r7, #22]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	4413      	add	r3, r2
 800ef46:	781a      	ldrb	r2, [r3, #0]
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ef52:	8afb      	ldrh	r3, [r7, #22]
 800ef54:	3302      	adds	r3, #2
 800ef56:	82fb      	strh	r3, [r7, #22]
 800ef58:	8afa      	ldrh	r2, [r7, #22]
 800ef5a:	8abb      	ldrh	r3, [r7, #20]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d3ef      	bcc.n	800ef40 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2200      	movs	r2, #0
 800ef64:	701a      	strb	r2, [r3, #0]
  }
}
 800ef66:	bf00      	nop
 800ef68:	371c      	adds	r7, #28
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef72:	b480      	push	{r7}
 800ef74:	b085      	sub	sp, #20
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	881a      	ldrh	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	4413      	add	r3, r2
 800ef88:	b29a      	uxth	r2, r3
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4413      	add	r3, r2
 800ef98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3714      	adds	r7, #20
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	4613      	mov	r3, r2
 800efb4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800efb6:	2301      	movs	r3, #1
 800efb8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	789b      	ldrb	r3, [r3, #2]
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d002      	beq.n	800efc8 <USBH_CtlReq+0x20>
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	d01d      	beq.n	800f002 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800efc6:	e043      	b.n	800f050 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	88fa      	ldrh	r2, [r7, #6]
 800efd2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2201      	movs	r2, #1
 800efd8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2202      	movs	r2, #2
 800efde:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800efe0:	2301      	movs	r3, #1
 800efe2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2203      	movs	r2, #3
 800efe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eff8:	2300      	movs	r3, #0
 800effa:	2200      	movs	r2, #0
 800effc:	f000 fe76 	bl	800fcec <osMessageQueuePut>
      break;
 800f000:	e026      	b.n	800f050 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f000 f82a 	bl	800f05c <USBH_HandleControl>
 800f008:	4603      	mov	r3, r0
 800f00a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f00c:	7dfb      	ldrb	r3, [r7, #23]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d002      	beq.n	800f018 <USBH_CtlReq+0x70>
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	2b03      	cmp	r3, #3
 800f016:	d106      	bne.n	800f026 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2201      	movs	r2, #1
 800f01c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	761a      	strb	r2, [r3, #24]
 800f024:	e005      	b.n	800f032 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f026:	7dfb      	ldrb	r3, [r7, #23]
 800f028:	2b02      	cmp	r3, #2
 800f02a:	d102      	bne.n	800f032 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2201      	movs	r2, #1
 800f030:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2203      	movs	r2, #3
 800f036:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f046:	2300      	movs	r3, #0
 800f048:	2200      	movs	r2, #0
 800f04a:	f000 fe4f 	bl	800fcec <osMessageQueuePut>
      break;
 800f04e:	bf00      	nop
  }
  return status;
 800f050:	7dfb      	ldrb	r3, [r7, #23]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af02      	add	r7, sp, #8
 800f062:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f064:	2301      	movs	r3, #1
 800f066:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f068:	2300      	movs	r3, #0
 800f06a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	7e1b      	ldrb	r3, [r3, #24]
 800f070:	3b01      	subs	r3, #1
 800f072:	2b0a      	cmp	r3, #10
 800f074:	f200 8229 	bhi.w	800f4ca <USBH_HandleControl+0x46e>
 800f078:	a201      	add	r2, pc, #4	; (adr r2, 800f080 <USBH_HandleControl+0x24>)
 800f07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07e:	bf00      	nop
 800f080:	0800f0ad 	.word	0x0800f0ad
 800f084:	0800f0c7 	.word	0x0800f0c7
 800f088:	0800f169 	.word	0x0800f169
 800f08c:	0800f18f 	.word	0x0800f18f
 800f090:	0800f21b 	.word	0x0800f21b
 800f094:	0800f245 	.word	0x0800f245
 800f098:	0800f307 	.word	0x0800f307
 800f09c:	0800f329 	.word	0x0800f329
 800f0a0:	0800f3bb 	.word	0x0800f3bb
 800f0a4:	0800f3e1 	.word	0x0800f3e1
 800f0a8:	0800f473 	.word	0x0800f473
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f103 0110 	add.w	r1, r3, #16
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	795b      	ldrb	r3, [r3, #5]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 fa17 	bl	800f4ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2202      	movs	r2, #2
 800f0c2:	761a      	strb	r2, [r3, #24]
      break;
 800f0c4:	e20c      	b.n	800f4e0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	795b      	ldrb	r3, [r3, #5]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f004 f9c9 	bl	8013464 <USBH_LL_GetURBState>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f0d6:	7bbb      	ldrb	r3, [r7, #14]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d12c      	bne.n	800f136 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	7c1b      	ldrb	r3, [r3, #16]
 800f0e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f0e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8adb      	ldrh	r3, [r3, #22]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f0ee:	7b7b      	ldrb	r3, [r7, #13]
 800f0f0:	2b80      	cmp	r3, #128	; 0x80
 800f0f2:	d103      	bne.n	800f0fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2203      	movs	r2, #3
 800f0f8:	761a      	strb	r2, [r3, #24]
 800f0fa:	e00d      	b.n	800f118 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2205      	movs	r2, #5
 800f100:	761a      	strb	r2, [r3, #24]
 800f102:	e009      	b.n	800f118 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f104:	7b7b      	ldrb	r3, [r7, #13]
 800f106:	2b80      	cmp	r3, #128	; 0x80
 800f108:	d103      	bne.n	800f112 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2209      	movs	r2, #9
 800f10e:	761a      	strb	r2, [r3, #24]
 800f110:	e002      	b.n	800f118 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2207      	movs	r2, #7
 800f116:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2203      	movs	r2, #3
 800f11c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f12c:	2300      	movs	r3, #0
 800f12e:	2200      	movs	r2, #0
 800f130:	f000 fddc 	bl	800fcec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f134:	e1cb      	b.n	800f4ce <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f136:	7bbb      	ldrb	r3, [r7, #14]
 800f138:	2b04      	cmp	r3, #4
 800f13a:	d003      	beq.n	800f144 <USBH_HandleControl+0xe8>
 800f13c:	7bbb      	ldrb	r3, [r7, #14]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	f040 81c5 	bne.w	800f4ce <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	220b      	movs	r2, #11
 800f148:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2203      	movs	r2, #3
 800f14e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f15e:	2300      	movs	r3, #0
 800f160:	2200      	movs	r2, #0
 800f162:	f000 fdc3 	bl	800fcec <osMessageQueuePut>
      break;
 800f166:	e1b2      	b.n	800f4ce <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6899      	ldr	r1, [r3, #8]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	899a      	ldrh	r2, [r3, #12]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	791b      	ldrb	r3, [r3, #4]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f9f2 	bl	800f56a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2204      	movs	r2, #4
 800f18a:	761a      	strb	r2, [r3, #24]
      break;
 800f18c:	e1a8      	b.n	800f4e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	791b      	ldrb	r3, [r3, #4]
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f004 f965 	bl	8013464 <USBH_LL_GetURBState>
 800f19a:	4603      	mov	r3, r0
 800f19c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f19e:	7bbb      	ldrb	r3, [r7, #14]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d110      	bne.n	800f1c6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2209      	movs	r2, #9
 800f1a8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2203      	movs	r2, #3
 800f1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f1be:	2300      	movs	r3, #0
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f000 fd93 	bl	800fcec <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	2b05      	cmp	r3, #5
 800f1ca:	d110      	bne.n	800f1ee <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2203      	movs	r2, #3
 800f1d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f000 fd80 	bl	800fcec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f1ec:	e171      	b.n	800f4d2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f1ee:	7bbb      	ldrb	r3, [r7, #14]
 800f1f0:	2b04      	cmp	r3, #4
 800f1f2:	f040 816e 	bne.w	800f4d2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	220b      	movs	r2, #11
 800f1fa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2203      	movs	r2, #3
 800f200:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f210:	2300      	movs	r3, #0
 800f212:	2200      	movs	r2, #0
 800f214:	f000 fd6a 	bl	800fcec <osMessageQueuePut>
      break;
 800f218:	e15b      	b.n	800f4d2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6899      	ldr	r1, [r3, #8]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	899a      	ldrh	r2, [r3, #12]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	795b      	ldrb	r3, [r3, #5]
 800f226:	2001      	movs	r0, #1
 800f228:	9000      	str	r0, [sp, #0]
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 f978 	bl	800f520 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f236:	b29a      	uxth	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2206      	movs	r2, #6
 800f240:	761a      	strb	r2, [r3, #24]
      break;
 800f242:	e14d      	b.n	800f4e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	795b      	ldrb	r3, [r3, #5]
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f004 f90a 	bl	8013464 <USBH_LL_GetURBState>
 800f250:	4603      	mov	r3, r0
 800f252:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f254:	7bbb      	ldrb	r3, [r7, #14]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d111      	bne.n	800f27e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2207      	movs	r2, #7
 800f25e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2203      	movs	r2, #3
 800f264:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f274:	2300      	movs	r3, #0
 800f276:	2200      	movs	r2, #0
 800f278:	f000 fd38 	bl	800fcec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f27c:	e12b      	b.n	800f4d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	2b05      	cmp	r3, #5
 800f282:	d113      	bne.n	800f2ac <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	220c      	movs	r2, #12
 800f288:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f28a:	2303      	movs	r3, #3
 800f28c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2203      	movs	r2, #3
 800f292:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f000 fd21 	bl	800fcec <osMessageQueuePut>
      break;
 800f2aa:	e114      	b.n	800f4d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f2ac:	7bbb      	ldrb	r3, [r7, #14]
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d111      	bne.n	800f2d6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2205      	movs	r2, #5
 800f2b6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2203      	movs	r2, #3
 800f2bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f000 fd0c 	bl	800fcec <osMessageQueuePut>
      break;
 800f2d4:	e0ff      	b.n	800f4d6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f2d6:	7bbb      	ldrb	r3, [r7, #14]
 800f2d8:	2b04      	cmp	r3, #4
 800f2da:	f040 80fc 	bne.w	800f4d6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	220b      	movs	r2, #11
 800f2e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2203      	movs	r2, #3
 800f2ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	2200      	movs	r2, #0
 800f300:	f000 fcf4 	bl	800fcec <osMessageQueuePut>
      break;
 800f304:	e0e7      	b.n	800f4d6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	791b      	ldrb	r3, [r3, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	2100      	movs	r1, #0
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f92b 	bl	800f56a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2208      	movs	r2, #8
 800f324:	761a      	strb	r2, [r3, #24]

      break;
 800f326:	e0db      	b.n	800f4e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	791b      	ldrb	r3, [r3, #4]
 800f32c:	4619      	mov	r1, r3
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f004 f898 	bl	8013464 <USBH_LL_GetURBState>
 800f334:	4603      	mov	r3, r0
 800f336:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d113      	bne.n	800f366 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	220d      	movs	r2, #13
 800f342:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2203      	movs	r2, #3
 800f34c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f35c:	2300      	movs	r3, #0
 800f35e:	2200      	movs	r2, #0
 800f360:	f000 fcc4 	bl	800fcec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f364:	e0b9      	b.n	800f4da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800f366:	7bbb      	ldrb	r3, [r7, #14]
 800f368:	2b04      	cmp	r3, #4
 800f36a:	d111      	bne.n	800f390 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	220b      	movs	r2, #11
 800f370:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2203      	movs	r2, #3
 800f376:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f386:	2300      	movs	r3, #0
 800f388:	2200      	movs	r2, #0
 800f38a:	f000 fcaf 	bl	800fcec <osMessageQueuePut>
      break;
 800f38e:	e0a4      	b.n	800f4da <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800f390:	7bbb      	ldrb	r3, [r7, #14]
 800f392:	2b05      	cmp	r3, #5
 800f394:	f040 80a1 	bne.w	800f4da <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800f398:	2303      	movs	r3, #3
 800f39a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2203      	movs	r2, #3
 800f3a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f000 fc9a 	bl	800fcec <osMessageQueuePut>
      break;
 800f3b8:	e08f      	b.n	800f4da <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	795b      	ldrb	r3, [r3, #5]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	9200      	str	r2, [sp, #0]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f8aa 	bl	800f520 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	220a      	movs	r2, #10
 800f3dc:	761a      	strb	r2, [r3, #24]
      break;
 800f3de:	e07f      	b.n	800f4e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	795b      	ldrb	r3, [r3, #5]
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f004 f83c 	bl	8013464 <USBH_LL_GetURBState>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f3f0:	7bbb      	ldrb	r3, [r7, #14]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d113      	bne.n	800f41e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	220d      	movs	r2, #13
 800f3fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2203      	movs	r2, #3
 800f404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f414:	2300      	movs	r3, #0
 800f416:	2200      	movs	r2, #0
 800f418:	f000 fc68 	bl	800fcec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f41c:	e05f      	b.n	800f4de <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f41e:	7bbb      	ldrb	r3, [r7, #14]
 800f420:	2b02      	cmp	r3, #2
 800f422:	d111      	bne.n	800f448 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2209      	movs	r2, #9
 800f428:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2203      	movs	r2, #3
 800f42e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f43e:	2300      	movs	r3, #0
 800f440:	2200      	movs	r2, #0
 800f442:	f000 fc53 	bl	800fcec <osMessageQueuePut>
      break;
 800f446:	e04a      	b.n	800f4de <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	2b04      	cmp	r3, #4
 800f44c:	d147      	bne.n	800f4de <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	220b      	movs	r2, #11
 800f452:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2203      	movs	r2, #3
 800f458:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f468:	2300      	movs	r3, #0
 800f46a:	2200      	movs	r2, #0
 800f46c:	f000 fc3e 	bl	800fcec <osMessageQueuePut>
      break;
 800f470:	e035      	b.n	800f4de <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	7e5b      	ldrb	r3, [r3, #25]
 800f476:	3301      	adds	r3, #1
 800f478:	b2da      	uxtb	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	765a      	strb	r2, [r3, #25]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	7e5b      	ldrb	r3, [r3, #25]
 800f482:	2b02      	cmp	r3, #2
 800f484:	d806      	bhi.n	800f494 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2201      	movs	r2, #1
 800f490:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f492:	e025      	b.n	800f4e0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f49a:	2106      	movs	r1, #6
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	795b      	ldrb	r3, [r3, #5]
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 f90d 	bl	800f6cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	791b      	ldrb	r3, [r3, #4]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f907 	bl	800f6cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4c8:	e00a      	b.n	800f4e0 <USBH_HandleControl+0x484>

    default:
      break;
 800f4ca:	bf00      	nop
 800f4cc:	e008      	b.n	800f4e0 <USBH_HandleControl+0x484>
      break;
 800f4ce:	bf00      	nop
 800f4d0:	e006      	b.n	800f4e0 <USBH_HandleControl+0x484>
      break;
 800f4d2:	bf00      	nop
 800f4d4:	e004      	b.n	800f4e0 <USBH_HandleControl+0x484>
      break;
 800f4d6:	bf00      	nop
 800f4d8:	e002      	b.n	800f4e0 <USBH_HandleControl+0x484>
      break;
 800f4da:	bf00      	nop
 800f4dc:	e000      	b.n	800f4e0 <USBH_HandleControl+0x484>
      break;
 800f4de:	bf00      	nop
  }

  return status;
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop

0800f4ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af04      	add	r7, sp, #16
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f4fa:	79f9      	ldrb	r1, [r7, #7]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	9303      	str	r3, [sp, #12]
 800f500:	2308      	movs	r3, #8
 800f502:	9302      	str	r3, [sp, #8]
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	9301      	str	r3, [sp, #4]
 800f508:	2300      	movs	r3, #0
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	2300      	movs	r3, #0
 800f50e:	2200      	movs	r2, #0
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f003 ff76 	bl	8013402 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b088      	sub	sp, #32
 800f524:	af04      	add	r7, sp, #16
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	4611      	mov	r1, r2
 800f52c:	461a      	mov	r2, r3
 800f52e:	460b      	mov	r3, r1
 800f530:	80fb      	strh	r3, [r7, #6]
 800f532:	4613      	mov	r3, r2
 800f534:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d001      	beq.n	800f544 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f540:	2300      	movs	r3, #0
 800f542:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f544:	7979      	ldrb	r1, [r7, #5]
 800f546:	7e3b      	ldrb	r3, [r7, #24]
 800f548:	9303      	str	r3, [sp, #12]
 800f54a:	88fb      	ldrh	r3, [r7, #6]
 800f54c:	9302      	str	r3, [sp, #8]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	9301      	str	r3, [sp, #4]
 800f552:	2301      	movs	r3, #1
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	2300      	movs	r3, #0
 800f558:	2200      	movs	r2, #0
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f003 ff51 	bl	8013402 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b088      	sub	sp, #32
 800f56e:	af04      	add	r7, sp, #16
 800f570:	60f8      	str	r0, [r7, #12]
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	4611      	mov	r1, r2
 800f576:	461a      	mov	r2, r3
 800f578:	460b      	mov	r3, r1
 800f57a:	80fb      	strh	r3, [r7, #6]
 800f57c:	4613      	mov	r3, r2
 800f57e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f580:	7979      	ldrb	r1, [r7, #5]
 800f582:	2300      	movs	r3, #0
 800f584:	9303      	str	r3, [sp, #12]
 800f586:	88fb      	ldrh	r3, [r7, #6]
 800f588:	9302      	str	r3, [sp, #8]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	9301      	str	r3, [sp, #4]
 800f58e:	2301      	movs	r3, #1
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	2300      	movs	r3, #0
 800f594:	2201      	movs	r2, #1
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f003 ff33 	bl	8013402 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f59c:	2300      	movs	r3, #0

}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b088      	sub	sp, #32
 800f5aa:	af04      	add	r7, sp, #16
 800f5ac:	60f8      	str	r0, [r7, #12]
 800f5ae:	60b9      	str	r1, [r7, #8]
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	80fb      	strh	r3, [r7, #6]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f5ca:	7979      	ldrb	r1, [r7, #5]
 800f5cc:	7e3b      	ldrb	r3, [r7, #24]
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	88fb      	ldrh	r3, [r7, #6]
 800f5d2:	9302      	str	r3, [sp, #8]
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	2301      	movs	r3, #1
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	2302      	movs	r3, #2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f003 ff0e 	bl	8013402 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b088      	sub	sp, #32
 800f5f4:	af04      	add	r7, sp, #16
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	460b      	mov	r3, r1
 800f600:	80fb      	strh	r3, [r7, #6]
 800f602:	4613      	mov	r3, r2
 800f604:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f606:	7979      	ldrb	r1, [r7, #5]
 800f608:	2300      	movs	r3, #0
 800f60a:	9303      	str	r3, [sp, #12]
 800f60c:	88fb      	ldrh	r3, [r7, #6]
 800f60e:	9302      	str	r3, [sp, #8]
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	9301      	str	r3, [sp, #4]
 800f614:	2301      	movs	r3, #1
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	2302      	movs	r3, #2
 800f61a:	2201      	movs	r2, #1
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f003 fef0 	bl	8013402 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af04      	add	r7, sp, #16
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	4608      	mov	r0, r1
 800f636:	4611      	mov	r1, r2
 800f638:	461a      	mov	r2, r3
 800f63a:	4603      	mov	r3, r0
 800f63c:	70fb      	strb	r3, [r7, #3]
 800f63e:	460b      	mov	r3, r1
 800f640:	70bb      	strb	r3, [r7, #2]
 800f642:	4613      	mov	r3, r2
 800f644:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f646:	7878      	ldrb	r0, [r7, #1]
 800f648:	78ba      	ldrb	r2, [r7, #2]
 800f64a:	78f9      	ldrb	r1, [r7, #3]
 800f64c:	8b3b      	ldrh	r3, [r7, #24]
 800f64e:	9302      	str	r3, [sp, #8]
 800f650:	7d3b      	ldrb	r3, [r7, #20]
 800f652:	9301      	str	r3, [sp, #4]
 800f654:	7c3b      	ldrb	r3, [r7, #16]
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	4603      	mov	r3, r0
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f003 fe83 	bl	8013366 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b082      	sub	sp, #8
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	460b      	mov	r3, r1
 800f674:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f676:	78fb      	ldrb	r3, [r7, #3]
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f003 fea2 	bl	80133c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b084      	sub	sp, #16
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
 800f692:	460b      	mov	r3, r1
 800f694:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 f836 	bl	800f708 <USBH_GetFreePipe>
 800f69c:	4603      	mov	r3, r0
 800f69e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f6a0:	89fb      	ldrh	r3, [r7, #14]
 800f6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d00a      	beq.n	800f6c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f6aa:	78fa      	ldrb	r2, [r7, #3]
 800f6ac:	89fb      	ldrh	r3, [r7, #14]
 800f6ae:	f003 030f 	and.w	r3, r3, #15
 800f6b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	33e0      	adds	r3, #224	; 0xe0
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	440b      	add	r3, r1
 800f6be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f6c0:	89fb      	ldrh	r3, [r7, #14]
 800f6c2:	b2db      	uxtb	r3, r3
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	2b0f      	cmp	r3, #15
 800f6dc:	d80d      	bhi.n	800f6fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f6de:	78fb      	ldrb	r3, [r7, #3]
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	33e0      	adds	r3, #224	; 0xe0
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f6f0:	6879      	ldr	r1, [r7, #4]
 800f6f2:	33e0      	adds	r3, #224	; 0xe0
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	440b      	add	r3, r1
 800f6f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f6fa:	2300      	movs	r3, #0
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f710:	2300      	movs	r3, #0
 800f712:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f714:	2300      	movs	r3, #0
 800f716:	73fb      	strb	r3, [r7, #15]
 800f718:	e00f      	b.n	800f73a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f71a:	7bfb      	ldrb	r3, [r7, #15]
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	33e0      	adds	r3, #224	; 0xe0
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4413      	add	r3, r2
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d102      	bne.n	800f734 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f72e:	7bfb      	ldrb	r3, [r7, #15]
 800f730:	b29b      	uxth	r3, r3
 800f732:	e007      	b.n	800f744 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f734:	7bfb      	ldrb	r3, [r7, #15]
 800f736:	3301      	adds	r3, #1
 800f738:	73fb      	strb	r3, [r7, #15]
 800f73a:	7bfb      	ldrb	r3, [r7, #15]
 800f73c:	2b0f      	cmp	r3, #15
 800f73e:	d9ec      	bls.n	800f71a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f740:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f744:	4618      	mov	r0, r3
 800f746:	3714      	adds	r7, #20
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <__NVIC_SetPriority>:
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	4603      	mov	r3, r0
 800f758:	6039      	str	r1, [r7, #0]
 800f75a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f75c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f760:	2b00      	cmp	r3, #0
 800f762:	db0a      	blt.n	800f77a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	b2da      	uxtb	r2, r3
 800f768:	490c      	ldr	r1, [pc, #48]	; (800f79c <__NVIC_SetPriority+0x4c>)
 800f76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f76e:	0112      	lsls	r2, r2, #4
 800f770:	b2d2      	uxtb	r2, r2
 800f772:	440b      	add	r3, r1
 800f774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f778:	e00a      	b.n	800f790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	4908      	ldr	r1, [pc, #32]	; (800f7a0 <__NVIC_SetPriority+0x50>)
 800f780:	79fb      	ldrb	r3, [r7, #7]
 800f782:	f003 030f 	and.w	r3, r3, #15
 800f786:	3b04      	subs	r3, #4
 800f788:	0112      	lsls	r2, r2, #4
 800f78a:	b2d2      	uxtb	r2, r2
 800f78c:	440b      	add	r3, r1
 800f78e:	761a      	strb	r2, [r3, #24]
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	e000e100 	.word	0xe000e100
 800f7a0:	e000ed00 	.word	0xe000ed00

0800f7a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f7a8:	4b05      	ldr	r3, [pc, #20]	; (800f7c0 <SysTick_Handler+0x1c>)
 800f7aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f7ac:	f002 fa9a 	bl	8011ce4 <xTaskGetSchedulerState>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d001      	beq.n	800f7ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f7b6:	f003 f97f 	bl	8012ab8 <xPortSysTickHandler>
  }
}
 800f7ba:	bf00      	nop
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	e000e010 	.word	0xe000e010

0800f7c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	f06f 0004 	mvn.w	r0, #4
 800f7ce:	f7ff ffbf 	bl	800f750 <__NVIC_SetPriority>
#endif
}
 800f7d2:	bf00      	nop
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7de:	f3ef 8305 	mrs	r3, IPSR
 800f7e2:	603b      	str	r3, [r7, #0]
  return(result);
 800f7e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d003      	beq.n	800f7f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f7ea:	f06f 0305 	mvn.w	r3, #5
 800f7ee:	607b      	str	r3, [r7, #4]
 800f7f0:	e00c      	b.n	800f80c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f7f2:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <osKernelInitialize+0x44>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d105      	bne.n	800f806 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f7fa:	4b08      	ldr	r3, [pc, #32]	; (800f81c <osKernelInitialize+0x44>)
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f800:	2300      	movs	r3, #0
 800f802:	607b      	str	r3, [r7, #4]
 800f804:	e002      	b.n	800f80c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f806:	f04f 33ff 	mov.w	r3, #4294967295
 800f80a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f80c:	687b      	ldr	r3, [r7, #4]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	370c      	adds	r7, #12
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	200006b0 	.word	0x200006b0

0800f820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f826:	f3ef 8305 	mrs	r3, IPSR
 800f82a:	603b      	str	r3, [r7, #0]
  return(result);
 800f82c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d003      	beq.n	800f83a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f832:	f06f 0305 	mvn.w	r3, #5
 800f836:	607b      	str	r3, [r7, #4]
 800f838:	e010      	b.n	800f85c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f83a:	4b0b      	ldr	r3, [pc, #44]	; (800f868 <osKernelStart+0x48>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d109      	bne.n	800f856 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f842:	f7ff ffbf 	bl	800f7c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f846:	4b08      	ldr	r3, [pc, #32]	; (800f868 <osKernelStart+0x48>)
 800f848:	2202      	movs	r2, #2
 800f84a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f84c:	f001 fdee 	bl	801142c <vTaskStartScheduler>
      stat = osOK;
 800f850:	2300      	movs	r3, #0
 800f852:	607b      	str	r3, [r7, #4]
 800f854:	e002      	b.n	800f85c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f856:	f04f 33ff 	mov.w	r3, #4294967295
 800f85a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f85c:	687b      	ldr	r3, [r7, #4]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	200006b0 	.word	0x200006b0

0800f86c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08e      	sub	sp, #56	; 0x38
 800f870:	af04      	add	r7, sp, #16
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f878:	2300      	movs	r3, #0
 800f87a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f87c:	f3ef 8305 	mrs	r3, IPSR
 800f880:	617b      	str	r3, [r7, #20]
  return(result);
 800f882:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f884:	2b00      	cmp	r3, #0
 800f886:	d17e      	bne.n	800f986 <osThreadNew+0x11a>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d07b      	beq.n	800f986 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f88e:	2380      	movs	r3, #128	; 0x80
 800f890:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f892:	2318      	movs	r3, #24
 800f894:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f896:	2300      	movs	r3, #0
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295
 800f89e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d045      	beq.n	800f932 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d002      	beq.n	800f8b4 <osThreadNew+0x48>
        name = attr->name;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d002      	beq.n	800f8c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d008      	beq.n	800f8da <osThreadNew+0x6e>
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	2b38      	cmp	r3, #56	; 0x38
 800f8cc:	d805      	bhi.n	800f8da <osThreadNew+0x6e>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	f003 0301 	and.w	r3, r3, #1
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <osThreadNew+0x72>
        return (NULL);
 800f8da:	2300      	movs	r3, #0
 800f8dc:	e054      	b.n	800f988 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d003      	beq.n	800f8ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	089b      	lsrs	r3, r3, #2
 800f8ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00e      	beq.n	800f914 <osThreadNew+0xa8>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	2ba7      	cmp	r3, #167	; 0xa7
 800f8fc:	d90a      	bls.n	800f914 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f902:	2b00      	cmp	r3, #0
 800f904:	d006      	beq.n	800f914 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d002      	beq.n	800f914 <osThreadNew+0xa8>
        mem = 1;
 800f90e:	2301      	movs	r3, #1
 800f910:	61bb      	str	r3, [r7, #24]
 800f912:	e010      	b.n	800f936 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10c      	bne.n	800f936 <osThreadNew+0xca>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d108      	bne.n	800f936 <osThreadNew+0xca>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d104      	bne.n	800f936 <osThreadNew+0xca>
          mem = 0;
 800f92c:	2300      	movs	r3, #0
 800f92e:	61bb      	str	r3, [r7, #24]
 800f930:	e001      	b.n	800f936 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d110      	bne.n	800f95e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f944:	9202      	str	r2, [sp, #8]
 800f946:	9301      	str	r3, [sp, #4]
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	6a3a      	ldr	r2, [r7, #32]
 800f950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f001 fb7e 	bl	8011054 <xTaskCreateStatic>
 800f958:	4603      	mov	r3, r0
 800f95a:	613b      	str	r3, [r7, #16]
 800f95c:	e013      	b.n	800f986 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f95e:	69bb      	ldr	r3, [r7, #24]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d110      	bne.n	800f986 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f964:	6a3b      	ldr	r3, [r7, #32]
 800f966:	b29a      	uxth	r2, r3
 800f968:	f107 0310 	add.w	r3, r7, #16
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f001 fbc9 	bl	801110e <xTaskCreate>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d001      	beq.n	800f986 <osThreadNew+0x11a>
            hTask = NULL;
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f986:	693b      	ldr	r3, [r7, #16]
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3728      	adds	r7, #40	; 0x28
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f998:	f3ef 8305 	mrs	r3, IPSR
 800f99c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f99e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d003      	beq.n	800f9ac <osDelay+0x1c>
    stat = osErrorISR;
 800f9a4:	f06f 0305 	mvn.w	r3, #5
 800f9a8:	60fb      	str	r3, [r7, #12]
 800f9aa:	e007      	b.n	800f9bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d002      	beq.n	800f9bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f001 fd04 	bl	80113c4 <vTaskDelay>
    }
  }

  return (stat);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b08a      	sub	sp, #40	; 0x28
 800f9ca:	af02      	add	r7, sp, #8
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	60b9      	str	r1, [r7, #8]
 800f9d0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9d6:	f3ef 8305 	mrs	r3, IPSR
 800f9da:	613b      	str	r3, [r7, #16]
  return(result);
 800f9dc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d175      	bne.n	800face <osSemaphoreNew+0x108>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d072      	beq.n	800face <osSemaphoreNew+0x108>
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d86e      	bhi.n	800face <osSemaphoreNew+0x108>
    mem = -1;
 800f9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d015      	beq.n	800fa28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d006      	beq.n	800fa12 <osSemaphoreNew+0x4c>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	2b4f      	cmp	r3, #79	; 0x4f
 800fa0a:	d902      	bls.n	800fa12 <osSemaphoreNew+0x4c>
        mem = 1;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	61bb      	str	r3, [r7, #24]
 800fa10:	e00c      	b.n	800fa2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d108      	bne.n	800fa2c <osSemaphoreNew+0x66>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d104      	bne.n	800fa2c <osSemaphoreNew+0x66>
          mem = 0;
 800fa22:	2300      	movs	r3, #0
 800fa24:	61bb      	str	r3, [r7, #24]
 800fa26:	e001      	b.n	800fa2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa32:	d04c      	beq.n	800face <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	d128      	bne.n	800fa8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fa3a:	69bb      	ldr	r3, [r7, #24]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d10a      	bne.n	800fa56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	2203      	movs	r2, #3
 800fa46:	9200      	str	r2, [sp, #0]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	2001      	movs	r0, #1
 800fa4e:	f000 fb5b 	bl	8010108 <xQueueGenericCreateStatic>
 800fa52:	61f8      	str	r0, [r7, #28]
 800fa54:	e005      	b.n	800fa62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fa56:	2203      	movs	r2, #3
 800fa58:	2100      	movs	r1, #0
 800fa5a:	2001      	movs	r0, #1
 800fa5c:	f000 fbcc 	bl	80101f8 <xQueueGenericCreate>
 800fa60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d022      	beq.n	800faae <osSemaphoreNew+0xe8>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d01f      	beq.n	800faae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa6e:	2300      	movs	r3, #0
 800fa70:	2200      	movs	r2, #0
 800fa72:	2100      	movs	r1, #0
 800fa74:	69f8      	ldr	r0, [r7, #28]
 800fa76:	f000 fc87 	bl	8010388 <xQueueGenericSend>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d016      	beq.n	800faae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fa80:	69f8      	ldr	r0, [r7, #28]
 800fa82:	f001 f913 	bl	8010cac <vQueueDelete>
            hSemaphore = NULL;
 800fa86:	2300      	movs	r3, #0
 800fa88:	61fb      	str	r3, [r7, #28]
 800fa8a:	e010      	b.n	800faae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d108      	bne.n	800faa4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	461a      	mov	r2, r3
 800fa98:	68b9      	ldr	r1, [r7, #8]
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f000 fc09 	bl	80102b2 <xQueueCreateCountingSemaphoreStatic>
 800faa0:	61f8      	str	r0, [r7, #28]
 800faa2:	e004      	b.n	800faae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800faa4:	68b9      	ldr	r1, [r7, #8]
 800faa6:	68f8      	ldr	r0, [r7, #12]
 800faa8:	f000 fc3a 	bl	8010320 <xQueueCreateCountingSemaphore>
 800faac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00c      	beq.n	800face <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d003      	beq.n	800fac2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	e001      	b.n	800fac6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fac6:	6979      	ldr	r1, [r7, #20]
 800fac8:	69f8      	ldr	r0, [r7, #28]
 800faca:	f001 fa3b 	bl	8010f44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800face:	69fb      	ldr	r3, [r7, #28]
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3720      	adds	r7, #32
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d103      	bne.n	800faf8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800faf0:	f06f 0303 	mvn.w	r3, #3
 800faf4:	617b      	str	r3, [r7, #20]
 800faf6:	e039      	b.n	800fb6c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800faf8:	f3ef 8305 	mrs	r3, IPSR
 800fafc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fafe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d022      	beq.n	800fb4a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d003      	beq.n	800fb12 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fb0a:	f06f 0303 	mvn.w	r3, #3
 800fb0e:	617b      	str	r3, [r7, #20]
 800fb10:	e02c      	b.n	800fb6c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fb16:	f107 0308 	add.w	r3, r7, #8
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	6938      	ldr	r0, [r7, #16]
 800fb20:	f001 f844 	bl	8010bac <xQueueReceiveFromISR>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d003      	beq.n	800fb32 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fb2a:	f06f 0302 	mvn.w	r3, #2
 800fb2e:	617b      	str	r3, [r7, #20]
 800fb30:	e01c      	b.n	800fb6c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d019      	beq.n	800fb6c <osSemaphoreAcquire+0x94>
 800fb38:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <osSemaphoreAcquire+0xa0>)
 800fb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb3e:	601a      	str	r2, [r3, #0]
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	e010      	b.n	800fb6c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	6938      	ldr	r0, [r7, #16]
 800fb4e:	f000 ff21 	bl	8010994 <xQueueSemaphoreTake>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d009      	beq.n	800fb6c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d003      	beq.n	800fb66 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800fb5e:	f06f 0301 	mvn.w	r3, #1
 800fb62:	617b      	str	r3, [r7, #20]
 800fb64:	e002      	b.n	800fb6c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fb66:	f06f 0302 	mvn.w	r3, #2
 800fb6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fb6c:	697b      	ldr	r3, [r7, #20]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	e000ed04 	.word	0xe000ed04

0800fb7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d103      	bne.n	800fb9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fb92:	f06f 0303 	mvn.w	r3, #3
 800fb96:	617b      	str	r3, [r7, #20]
 800fb98:	e02c      	b.n	800fbf4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb9a:	f3ef 8305 	mrs	r3, IPSR
 800fb9e:	60fb      	str	r3, [r7, #12]
  return(result);
 800fba0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d01a      	beq.n	800fbdc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fba6:	2300      	movs	r3, #0
 800fba8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fbaa:	f107 0308 	add.w	r3, r7, #8
 800fbae:	4619      	mov	r1, r3
 800fbb0:	6938      	ldr	r0, [r7, #16]
 800fbb2:	f000 fd82 	bl	80106ba <xQueueGiveFromISR>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d003      	beq.n	800fbc4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fbbc:	f06f 0302 	mvn.w	r3, #2
 800fbc0:	617b      	str	r3, [r7, #20]
 800fbc2:	e017      	b.n	800fbf4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d014      	beq.n	800fbf4 <osSemaphoreRelease+0x78>
 800fbca:	4b0d      	ldr	r3, [pc, #52]	; (800fc00 <osSemaphoreRelease+0x84>)
 800fbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	e00b      	b.n	800fbf4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fbdc:	2300      	movs	r3, #0
 800fbde:	2200      	movs	r2, #0
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	6938      	ldr	r0, [r7, #16]
 800fbe4:	f000 fbd0 	bl	8010388 <xQueueGenericSend>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d002      	beq.n	800fbf4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800fbee:	f06f 0302 	mvn.w	r3, #2
 800fbf2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fbf4:	697b      	ldr	r3, [r7, #20]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3718      	adds	r7, #24
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	e000ed04 	.word	0xe000ed04

0800fc04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08a      	sub	sp, #40	; 0x28
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fc10:	2300      	movs	r3, #0
 800fc12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc14:	f3ef 8305 	mrs	r3, IPSR
 800fc18:	613b      	str	r3, [r7, #16]
  return(result);
 800fc1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d15f      	bne.n	800fce0 <osMessageQueueNew+0xdc>
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d05c      	beq.n	800fce0 <osMessageQueueNew+0xdc>
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d059      	beq.n	800fce0 <osMessageQueueNew+0xdc>
    mem = -1;
 800fc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d029      	beq.n	800fc8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d012      	beq.n	800fc66 <osMessageQueueNew+0x62>
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	2b4f      	cmp	r3, #79	; 0x4f
 800fc46:	d90e      	bls.n	800fc66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00a      	beq.n	800fc66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	695a      	ldr	r2, [r3, #20]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	68b9      	ldr	r1, [r7, #8]
 800fc58:	fb01 f303 	mul.w	r3, r1, r3
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d302      	bcc.n	800fc66 <osMessageQueueNew+0x62>
        mem = 1;
 800fc60:	2301      	movs	r3, #1
 800fc62:	61bb      	str	r3, [r7, #24]
 800fc64:	e014      	b.n	800fc90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d110      	bne.n	800fc90 <osMessageQueueNew+0x8c>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d10c      	bne.n	800fc90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d108      	bne.n	800fc90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	695b      	ldr	r3, [r3, #20]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d104      	bne.n	800fc90 <osMessageQueueNew+0x8c>
          mem = 0;
 800fc86:	2300      	movs	r3, #0
 800fc88:	61bb      	str	r3, [r7, #24]
 800fc8a:	e001      	b.n	800fc90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d10b      	bne.n	800fcae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691a      	ldr	r2, [r3, #16]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	2100      	movs	r1, #0
 800fca0:	9100      	str	r1, [sp, #0]
 800fca2:	68b9      	ldr	r1, [r7, #8]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f000 fa2f 	bl	8010108 <xQueueGenericCreateStatic>
 800fcaa:	61f8      	str	r0, [r7, #28]
 800fcac:	e008      	b.n	800fcc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d105      	bne.n	800fcc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	68b9      	ldr	r1, [r7, #8]
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	f000 fa9d 	bl	80101f8 <xQueueGenericCreate>
 800fcbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00c      	beq.n	800fce0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d003      	beq.n	800fcd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	617b      	str	r3, [r7, #20]
 800fcd2:	e001      	b.n	800fcd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fcd8:	6979      	ldr	r1, [r7, #20]
 800fcda:	69f8      	ldr	r0, [r7, #28]
 800fcdc:	f001 f932 	bl	8010f44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fce0:	69fb      	ldr	r3, [r7, #28]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3720      	adds	r7, #32
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fd00:	2300      	movs	r3, #0
 800fd02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd04:	f3ef 8305 	mrs	r3, IPSR
 800fd08:	617b      	str	r3, [r7, #20]
  return(result);
 800fd0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d028      	beq.n	800fd62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d005      	beq.n	800fd22 <osMessageQueuePut+0x36>
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <osMessageQueuePut+0x36>
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fd22:	f06f 0303 	mvn.w	r3, #3
 800fd26:	61fb      	str	r3, [r7, #28]
 800fd28:	e038      	b.n	800fd9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fd2e:	f107 0210 	add.w	r2, r7, #16
 800fd32:	2300      	movs	r3, #0
 800fd34:	68b9      	ldr	r1, [r7, #8]
 800fd36:	69b8      	ldr	r0, [r7, #24]
 800fd38:	f000 fc24 	bl	8010584 <xQueueGenericSendFromISR>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d003      	beq.n	800fd4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fd42:	f06f 0302 	mvn.w	r3, #2
 800fd46:	61fb      	str	r3, [r7, #28]
 800fd48:	e028      	b.n	800fd9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d025      	beq.n	800fd9c <osMessageQueuePut+0xb0>
 800fd50:	4b15      	ldr	r3, [pc, #84]	; (800fda8 <osMessageQueuePut+0xbc>)
 800fd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	e01c      	b.n	800fd9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <osMessageQueuePut+0x82>
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d103      	bne.n	800fd76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fd6e:	f06f 0303 	mvn.w	r3, #3
 800fd72:	61fb      	str	r3, [r7, #28]
 800fd74:	e012      	b.n	800fd9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fd76:	2300      	movs	r3, #0
 800fd78:	683a      	ldr	r2, [r7, #0]
 800fd7a:	68b9      	ldr	r1, [r7, #8]
 800fd7c:	69b8      	ldr	r0, [r7, #24]
 800fd7e:	f000 fb03 	bl	8010388 <xQueueGenericSend>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d009      	beq.n	800fd9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fd8e:	f06f 0301 	mvn.w	r3, #1
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	e002      	b.n	800fd9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fd96:	f06f 0302 	mvn.w	r3, #2
 800fd9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fd9c:	69fb      	ldr	r3, [r7, #28]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3720      	adds	r7, #32
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	e000ed04 	.word	0xe000ed04

0800fdac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b088      	sub	sp, #32
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdc2:	f3ef 8305 	mrs	r3, IPSR
 800fdc6:	617b      	str	r3, [r7, #20]
  return(result);
 800fdc8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d028      	beq.n	800fe20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d005      	beq.n	800fde0 <osMessageQueueGet+0x34>
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <osMessageQueueGet+0x34>
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fde0:	f06f 0303 	mvn.w	r3, #3
 800fde4:	61fb      	str	r3, [r7, #28]
 800fde6:	e037      	b.n	800fe58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fde8:	2300      	movs	r3, #0
 800fdea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fdec:	f107 0310 	add.w	r3, r7, #16
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	68b9      	ldr	r1, [r7, #8]
 800fdf4:	69b8      	ldr	r0, [r7, #24]
 800fdf6:	f000 fed9 	bl	8010bac <xQueueReceiveFromISR>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d003      	beq.n	800fe08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fe00:	f06f 0302 	mvn.w	r3, #2
 800fe04:	61fb      	str	r3, [r7, #28]
 800fe06:	e027      	b.n	800fe58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d024      	beq.n	800fe58 <osMessageQueueGet+0xac>
 800fe0e:	4b15      	ldr	r3, [pc, #84]	; (800fe64 <osMessageQueueGet+0xb8>)
 800fe10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	f3bf 8f6f 	isb	sy
 800fe1e:	e01b      	b.n	800fe58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <osMessageQueueGet+0x80>
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d103      	bne.n	800fe34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fe2c:	f06f 0303 	mvn.w	r3, #3
 800fe30:	61fb      	str	r3, [r7, #28]
 800fe32:	e011      	b.n	800fe58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fe34:	683a      	ldr	r2, [r7, #0]
 800fe36:	68b9      	ldr	r1, [r7, #8]
 800fe38:	69b8      	ldr	r0, [r7, #24]
 800fe3a:	f000 fccb 	bl	80107d4 <xQueueReceive>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d009      	beq.n	800fe58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d003      	beq.n	800fe52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fe4a:	f06f 0301 	mvn.w	r3, #1
 800fe4e:	61fb      	str	r3, [r7, #28]
 800fe50:	e002      	b.n	800fe58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fe52:	f06f 0302 	mvn.w	r3, #2
 800fe56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe58:	69fb      	ldr	r3, [r7, #28]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3720      	adds	r7, #32
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	e000ed04 	.word	0xe000ed04

0800fe68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	4a07      	ldr	r2, [pc, #28]	; (800fe94 <vApplicationGetIdleTaskMemory+0x2c>)
 800fe78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	4a06      	ldr	r2, [pc, #24]	; (800fe98 <vApplicationGetIdleTaskMemory+0x30>)
 800fe7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2280      	movs	r2, #128	; 0x80
 800fe84:	601a      	str	r2, [r3, #0]
}
 800fe86:	bf00      	nop
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	200006b4 	.word	0x200006b4
 800fe98:	2000075c 	.word	0x2000075c

0800fe9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4a07      	ldr	r2, [pc, #28]	; (800fec8 <vApplicationGetTimerTaskMemory+0x2c>)
 800feac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	4a06      	ldr	r2, [pc, #24]	; (800fecc <vApplicationGetTimerTaskMemory+0x30>)
 800feb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800feba:	601a      	str	r2, [r3, #0]
}
 800febc:	bf00      	nop
 800febe:	3714      	adds	r7, #20
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	2000095c 	.word	0x2000095c
 800fecc:	20000a04 	.word	0x20000a04

0800fed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f103 0208 	add.w	r2, r3, #8
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f04f 32ff 	mov.w	r2, #4294967295
 800fee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f103 0208 	add.w	r2, r3, #8
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f103 0208 	add.w	r2, r3, #8
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff1e:	bf00      	nop
 800ff20:	370c      	adds	r7, #12
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr

0800ff2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff2a:	b480      	push	{r7}
 800ff2c:	b085      	sub	sp, #20
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	689a      	ldr	r2, [r3, #8]
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	683a      	ldr	r2, [r7, #0]
 800ff4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	601a      	str	r2, [r3, #0]
}
 800ff66:	bf00      	nop
 800ff68:	3714      	adds	r7, #20
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr

0800ff72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff72:	b480      	push	{r7}
 800ff74:	b085      	sub	sp, #20
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff88:	d103      	bne.n	800ff92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	691b      	ldr	r3, [r3, #16]
 800ff8e:	60fb      	str	r3, [r7, #12]
 800ff90:	e00c      	b.n	800ffac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	3308      	adds	r3, #8
 800ff96:	60fb      	str	r3, [r7, #12]
 800ff98:	e002      	b.n	800ffa0 <vListInsert+0x2e>
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	60fb      	str	r3, [r7, #12]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d2f6      	bcs.n	800ff9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	685a      	ldr	r2, [r3, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	683a      	ldr	r2, [r7, #0]
 800ffc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	1c5a      	adds	r2, r3, #1
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	601a      	str	r2, [r3, #0]
}
 800ffd8:	bf00      	nop
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	691b      	ldr	r3, [r3, #16]
 800fff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6892      	ldr	r2, [r2, #8]
 800fffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	6852      	ldr	r2, [r2, #4]
 8010004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	429a      	cmp	r2, r3
 801000e:	d103      	bne.n	8010018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	689a      	ldr	r2, [r3, #8]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	1e5a      	subs	r2, r3, #1
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
}
 801002c:	4618      	mov	r0, r3
 801002e:	3714      	adds	r7, #20
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d10a      	bne.n	8010062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801004c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010050:	f383 8811 	msr	BASEPRI, r3
 8010054:	f3bf 8f6f 	isb	sy
 8010058:	f3bf 8f4f 	dsb	sy
 801005c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801005e:	bf00      	nop
 8010060:	e7fe      	b.n	8010060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010062:	f002 fc97 	bl	8012994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801006e:	68f9      	ldr	r1, [r7, #12]
 8010070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010072:	fb01 f303 	mul.w	r3, r1, r3
 8010076:	441a      	add	r2, r3
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2200      	movs	r2, #0
 8010080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010092:	3b01      	subs	r3, #1
 8010094:	68f9      	ldr	r1, [r7, #12]
 8010096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010098:	fb01 f303 	mul.w	r3, r1, r3
 801009c:	441a      	add	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	22ff      	movs	r2, #255	; 0xff
 80100a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	22ff      	movs	r2, #255	; 0xff
 80100ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d114      	bne.n	80100e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d01a      	beq.n	80100f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	3310      	adds	r3, #16
 80100c4:	4618      	mov	r0, r3
 80100c6:	f001 fc4b 	bl	8011960 <xTaskRemoveFromEventList>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d012      	beq.n	80100f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80100d0:	4b0c      	ldr	r3, [pc, #48]	; (8010104 <xQueueGenericReset+0xcc>)
 80100d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d6:	601a      	str	r2, [r3, #0]
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	e009      	b.n	80100f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	3310      	adds	r3, #16
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7ff fef2 	bl	800fed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	3324      	adds	r3, #36	; 0x24
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff feed 	bl	800fed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80100f6:	f002 fc7d 	bl	80129f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80100fa:	2301      	movs	r3, #1
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	e000ed04 	.word	0xe000ed04

08010108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08e      	sub	sp, #56	; 0x38
 801010c:	af02      	add	r7, sp, #8
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10a      	bne.n	8010132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801011c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801012e:	bf00      	nop
 8010130:	e7fe      	b.n	8010130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10a      	bne.n	801014e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	627b      	str	r3, [r7, #36]	; 0x24
}
 801014a:	bf00      	nop
 801014c:	e7fe      	b.n	801014c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <xQueueGenericCreateStatic+0x52>
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <xQueueGenericCreateStatic+0x56>
 801015a:	2301      	movs	r3, #1
 801015c:	e000      	b.n	8010160 <xQueueGenericCreateStatic+0x58>
 801015e:	2300      	movs	r3, #0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10a      	bne.n	801017a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010168:	f383 8811 	msr	BASEPRI, r3
 801016c:	f3bf 8f6f 	isb	sy
 8010170:	f3bf 8f4f 	dsb	sy
 8010174:	623b      	str	r3, [r7, #32]
}
 8010176:	bf00      	nop
 8010178:	e7fe      	b.n	8010178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d102      	bne.n	8010186 <xQueueGenericCreateStatic+0x7e>
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <xQueueGenericCreateStatic+0x82>
 8010186:	2301      	movs	r3, #1
 8010188:	e000      	b.n	801018c <xQueueGenericCreateStatic+0x84>
 801018a:	2300      	movs	r3, #0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10a      	bne.n	80101a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	61fb      	str	r3, [r7, #28]
}
 80101a2:	bf00      	nop
 80101a4:	e7fe      	b.n	80101a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80101a6:	2350      	movs	r3, #80	; 0x50
 80101a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	2b50      	cmp	r3, #80	; 0x50
 80101ae:	d00a      	beq.n	80101c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80101b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b4:	f383 8811 	msr	BASEPRI, r3
 80101b8:	f3bf 8f6f 	isb	sy
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	61bb      	str	r3, [r7, #24]
}
 80101c2:	bf00      	nop
 80101c4:	e7fe      	b.n	80101c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80101c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00d      	beq.n	80101ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80101d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80101de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e0:	9300      	str	r3, [sp, #0]
 80101e2:	4613      	mov	r3, r2
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	68b9      	ldr	r1, [r7, #8]
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f000 f83f 	bl	801026c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3730      	adds	r7, #48	; 0x30
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	; 0x28
 80101fc:	af02      	add	r7, sp, #8
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	4613      	mov	r3, r2
 8010204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d10a      	bne.n	8010222 <xQueueGenericCreate+0x2a>
	__asm volatile
 801020c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010210:	f383 8811 	msr	BASEPRI, r3
 8010214:	f3bf 8f6f 	isb	sy
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	613b      	str	r3, [r7, #16]
}
 801021e:	bf00      	nop
 8010220:	e7fe      	b.n	8010220 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	fb02 f303 	mul.w	r3, r2, r3
 801022a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	3350      	adds	r3, #80	; 0x50
 8010230:	4618      	mov	r0, r3
 8010232:	f002 fcd1 	bl	8012bd8 <pvPortMalloc>
 8010236:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d011      	beq.n	8010262 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	3350      	adds	r3, #80	; 0x50
 8010246:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	2200      	movs	r2, #0
 801024c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010250:	79fa      	ldrb	r2, [r7, #7]
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	9300      	str	r3, [sp, #0]
 8010256:	4613      	mov	r3, r2
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	68b9      	ldr	r1, [r7, #8]
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f000 f805 	bl	801026c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010262:	69bb      	ldr	r3, [r7, #24]
	}
 8010264:	4618      	mov	r0, r3
 8010266:	3720      	adds	r7, #32
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d103      	bne.n	8010288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	69ba      	ldr	r2, [r7, #24]
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	e002      	b.n	801028e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801029a:	2101      	movs	r1, #1
 801029c:	69b8      	ldr	r0, [r7, #24]
 801029e:	f7ff fecb 	bl	8010038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	78fa      	ldrb	r2, [r7, #3]
 80102a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80102aa:	bf00      	nop
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}

080102b2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80102b2:	b580      	push	{r7, lr}
 80102b4:	b08a      	sub	sp, #40	; 0x28
 80102b6:	af02      	add	r7, sp, #8
 80102b8:	60f8      	str	r0, [r7, #12]
 80102ba:	60b9      	str	r1, [r7, #8]
 80102bc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10a      	bne.n	80102da <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	61bb      	str	r3, [r7, #24]
}
 80102d6:	bf00      	nop
 80102d8:	e7fe      	b.n	80102d8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80102da:	68ba      	ldr	r2, [r7, #8]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d90a      	bls.n	80102f8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	617b      	str	r3, [r7, #20]
}
 80102f4:	bf00      	nop
 80102f6:	e7fe      	b.n	80102f6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80102f8:	2302      	movs	r3, #2
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	2100      	movs	r1, #0
 8010302:	68f8      	ldr	r0, [r7, #12]
 8010304:	f7ff ff00 	bl	8010108 <xQueueGenericCreateStatic>
 8010308:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	68ba      	ldr	r2, [r7, #8]
 8010314:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010316:	69fb      	ldr	r3, [r7, #28]
	}
 8010318:	4618      	mov	r0, r3
 801031a:	3720      	adds	r7, #32
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10a      	bne.n	8010346 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010334:	f383 8811 	msr	BASEPRI, r3
 8010338:	f3bf 8f6f 	isb	sy
 801033c:	f3bf 8f4f 	dsb	sy
 8010340:	613b      	str	r3, [r7, #16]
}
 8010342:	bf00      	nop
 8010344:	e7fe      	b.n	8010344 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010346:	683a      	ldr	r2, [r7, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	429a      	cmp	r2, r3
 801034c:	d90a      	bls.n	8010364 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	60fb      	str	r3, [r7, #12]
}
 8010360:	bf00      	nop
 8010362:	e7fe      	b.n	8010362 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010364:	2202      	movs	r2, #2
 8010366:	2100      	movs	r1, #0
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff ff45 	bl	80101f8 <xQueueGenericCreate>
 801036e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	683a      	ldr	r2, [r7, #0]
 801037a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801037c:	697b      	ldr	r3, [r7, #20]
	}
 801037e:	4618      	mov	r0, r3
 8010380:	3718      	adds	r7, #24
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
	...

08010388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b08e      	sub	sp, #56	; 0x38
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	607a      	str	r2, [r7, #4]
 8010394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010396:	2300      	movs	r3, #0
 8010398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801039e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10a      	bne.n	80103ba <xQueueGenericSend+0x32>
	__asm volatile
 80103a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80103b6:	bf00      	nop
 80103b8:	e7fe      	b.n	80103b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d103      	bne.n	80103c8 <xQueueGenericSend+0x40>
 80103c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d101      	bne.n	80103cc <xQueueGenericSend+0x44>
 80103c8:	2301      	movs	r3, #1
 80103ca:	e000      	b.n	80103ce <xQueueGenericSend+0x46>
 80103cc:	2300      	movs	r3, #0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d10a      	bne.n	80103e8 <xQueueGenericSend+0x60>
	__asm volatile
 80103d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d6:	f383 8811 	msr	BASEPRI, r3
 80103da:	f3bf 8f6f 	isb	sy
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80103e4:	bf00      	nop
 80103e6:	e7fe      	b.n	80103e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d103      	bne.n	80103f6 <xQueueGenericSend+0x6e>
 80103ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d101      	bne.n	80103fa <xQueueGenericSend+0x72>
 80103f6:	2301      	movs	r3, #1
 80103f8:	e000      	b.n	80103fc <xQueueGenericSend+0x74>
 80103fa:	2300      	movs	r3, #0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10a      	bne.n	8010416 <xQueueGenericSend+0x8e>
	__asm volatile
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	f383 8811 	msr	BASEPRI, r3
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	623b      	str	r3, [r7, #32]
}
 8010412:	bf00      	nop
 8010414:	e7fe      	b.n	8010414 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010416:	f001 fc65 	bl	8011ce4 <xTaskGetSchedulerState>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d102      	bne.n	8010426 <xQueueGenericSend+0x9e>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d101      	bne.n	801042a <xQueueGenericSend+0xa2>
 8010426:	2301      	movs	r3, #1
 8010428:	e000      	b.n	801042c <xQueueGenericSend+0xa4>
 801042a:	2300      	movs	r3, #0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d10a      	bne.n	8010446 <xQueueGenericSend+0xbe>
	__asm volatile
 8010430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	61fb      	str	r3, [r7, #28]
}
 8010442:	bf00      	nop
 8010444:	e7fe      	b.n	8010444 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010446:	f002 faa5 	bl	8012994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010452:	429a      	cmp	r2, r3
 8010454:	d302      	bcc.n	801045c <xQueueGenericSend+0xd4>
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b02      	cmp	r3, #2
 801045a:	d129      	bne.n	80104b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801045c:	683a      	ldr	r2, [r7, #0]
 801045e:	68b9      	ldr	r1, [r7, #8]
 8010460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010462:	f000 fc5e 	bl	8010d22 <prvCopyDataToQueue>
 8010466:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046c:	2b00      	cmp	r3, #0
 801046e:	d010      	beq.n	8010492 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	3324      	adds	r3, #36	; 0x24
 8010474:	4618      	mov	r0, r3
 8010476:	f001 fa73 	bl	8011960 <xTaskRemoveFromEventList>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d013      	beq.n	80104a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010480:	4b3f      	ldr	r3, [pc, #252]	; (8010580 <xQueueGenericSend+0x1f8>)
 8010482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	e00a      	b.n	80104a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010494:	2b00      	cmp	r3, #0
 8010496:	d007      	beq.n	80104a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010498:	4b39      	ldr	r3, [pc, #228]	; (8010580 <xQueueGenericSend+0x1f8>)
 801049a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801049e:	601a      	str	r2, [r3, #0]
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80104a8:	f002 faa4 	bl	80129f4 <vPortExitCritical>
				return pdPASS;
 80104ac:	2301      	movs	r3, #1
 80104ae:	e063      	b.n	8010578 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d103      	bne.n	80104be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80104b6:	f002 fa9d 	bl	80129f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	e05c      	b.n	8010578 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d106      	bne.n	80104d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104c4:	f107 0314 	add.w	r3, r7, #20
 80104c8:	4618      	mov	r0, r3
 80104ca:	f001 faad 	bl	8011a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104ce:	2301      	movs	r3, #1
 80104d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104d2:	f002 fa8f 	bl	80129f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104d6:	f001 f819 	bl	801150c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104da:	f002 fa5b 	bl	8012994 <vPortEnterCritical>
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ea:	d103      	bne.n	80104f4 <xQueueGenericSend+0x16c>
 80104ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104fa:	b25b      	sxtb	r3, r3
 80104fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010500:	d103      	bne.n	801050a <xQueueGenericSend+0x182>
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801050a:	f002 fa73 	bl	80129f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801050e:	1d3a      	adds	r2, r7, #4
 8010510:	f107 0314 	add.w	r3, r7, #20
 8010514:	4611      	mov	r1, r2
 8010516:	4618      	mov	r0, r3
 8010518:	f001 fa9c 	bl	8011a54 <xTaskCheckForTimeOut>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d124      	bne.n	801056c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010524:	f000 fcf5 	bl	8010f12 <prvIsQueueFull>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d018      	beq.n	8010560 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801052e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010530:	3310      	adds	r3, #16
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	4611      	mov	r1, r2
 8010536:	4618      	mov	r0, r3
 8010538:	f001 f9c2 	bl	80118c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801053c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801053e:	f000 fc80 	bl	8010e42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010542:	f000 fff1 	bl	8011528 <xTaskResumeAll>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	f47f af7c 	bne.w	8010446 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801054e:	4b0c      	ldr	r3, [pc, #48]	; (8010580 <xQueueGenericSend+0x1f8>)
 8010550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010554:	601a      	str	r2, [r3, #0]
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	e772      	b.n	8010446 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010562:	f000 fc6e 	bl	8010e42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010566:	f000 ffdf 	bl	8011528 <xTaskResumeAll>
 801056a:	e76c      	b.n	8010446 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801056c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801056e:	f000 fc68 	bl	8010e42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010572:	f000 ffd9 	bl	8011528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010578:	4618      	mov	r0, r3
 801057a:	3738      	adds	r7, #56	; 0x38
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	e000ed04 	.word	0xe000ed04

08010584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b090      	sub	sp, #64	; 0x40
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
 8010590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	2b00      	cmp	r3, #0
 801059a:	d10a      	bne.n	80105b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801059c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a0:	f383 8811 	msr	BASEPRI, r3
 80105a4:	f3bf 8f6f 	isb	sy
 80105a8:	f3bf 8f4f 	dsb	sy
 80105ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105ae:	bf00      	nop
 80105b0:	e7fe      	b.n	80105b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d103      	bne.n	80105c0 <xQueueGenericSendFromISR+0x3c>
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <xQueueGenericSendFromISR+0x40>
 80105c0:	2301      	movs	r3, #1
 80105c2:	e000      	b.n	80105c6 <xQueueGenericSendFromISR+0x42>
 80105c4:	2300      	movs	r3, #0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d10a      	bne.n	80105e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80105ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ce:	f383 8811 	msr	BASEPRI, r3
 80105d2:	f3bf 8f6f 	isb	sy
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80105dc:	bf00      	nop
 80105de:	e7fe      	b.n	80105de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2b02      	cmp	r3, #2
 80105e4:	d103      	bne.n	80105ee <xQueueGenericSendFromISR+0x6a>
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d101      	bne.n	80105f2 <xQueueGenericSendFromISR+0x6e>
 80105ee:	2301      	movs	r3, #1
 80105f0:	e000      	b.n	80105f4 <xQueueGenericSendFromISR+0x70>
 80105f2:	2300      	movs	r3, #0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10a      	bne.n	801060e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	623b      	str	r3, [r7, #32]
}
 801060a:	bf00      	nop
 801060c:	e7fe      	b.n	801060c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801060e:	f002 faa3 	bl	8012b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010612:	f3ef 8211 	mrs	r2, BASEPRI
 8010616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061a:	f383 8811 	msr	BASEPRI, r3
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f3bf 8f4f 	dsb	sy
 8010626:	61fa      	str	r2, [r7, #28]
 8010628:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801062a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801062c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801062e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010636:	429a      	cmp	r2, r3
 8010638:	d302      	bcc.n	8010640 <xQueueGenericSendFromISR+0xbc>
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2b02      	cmp	r3, #2
 801063e:	d12f      	bne.n	80106a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801064a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801064e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010650:	683a      	ldr	r2, [r7, #0]
 8010652:	68b9      	ldr	r1, [r7, #8]
 8010654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010656:	f000 fb64 	bl	8010d22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801065a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010662:	d112      	bne.n	801068a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010668:	2b00      	cmp	r3, #0
 801066a:	d016      	beq.n	801069a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066e:	3324      	adds	r3, #36	; 0x24
 8010670:	4618      	mov	r0, r3
 8010672:	f001 f975 	bl	8011960 <xTaskRemoveFromEventList>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00e      	beq.n	801069a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00b      	beq.n	801069a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2201      	movs	r2, #1
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	e007      	b.n	801069a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801068a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801068e:	3301      	adds	r3, #1
 8010690:	b2db      	uxtb	r3, r3
 8010692:	b25a      	sxtb	r2, r3
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801069a:	2301      	movs	r3, #1
 801069c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801069e:	e001      	b.n	80106a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80106a0:	2300      	movs	r3, #0
 80106a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80106ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3740      	adds	r7, #64	; 0x40
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}

080106ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80106ba:	b580      	push	{r7, lr}
 80106bc:	b08e      	sub	sp, #56	; 0x38
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
 80106c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80106c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d10a      	bne.n	80106e4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	623b      	str	r3, [r7, #32]
}
 80106e0:	bf00      	nop
 80106e2:	e7fe      	b.n	80106e2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80106e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00a      	beq.n	8010702 <xQueueGiveFromISR+0x48>
	__asm volatile
 80106ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f0:	f383 8811 	msr	BASEPRI, r3
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	f3bf 8f4f 	dsb	sy
 80106fc:	61fb      	str	r3, [r7, #28]
}
 80106fe:	bf00      	nop
 8010700:	e7fe      	b.n	8010700 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d103      	bne.n	8010712 <xQueueGiveFromISR+0x58>
 801070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d101      	bne.n	8010716 <xQueueGiveFromISR+0x5c>
 8010712:	2301      	movs	r3, #1
 8010714:	e000      	b.n	8010718 <xQueueGiveFromISR+0x5e>
 8010716:	2300      	movs	r3, #0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d10a      	bne.n	8010732 <xQueueGiveFromISR+0x78>
	__asm volatile
 801071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010720:	f383 8811 	msr	BASEPRI, r3
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	61bb      	str	r3, [r7, #24]
}
 801072e:	bf00      	nop
 8010730:	e7fe      	b.n	8010730 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010732:	f002 fa11 	bl	8012b58 <vPortValidateInterruptPriority>
	__asm volatile
 8010736:	f3ef 8211 	mrs	r2, BASEPRI
 801073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	617a      	str	r2, [r7, #20]
 801074c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801074e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010756:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801075c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801075e:	429a      	cmp	r2, r3
 8010760:	d22b      	bcs.n	80107ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076e:	1c5a      	adds	r2, r3, #1
 8010770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010772:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077c:	d112      	bne.n	80107a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010782:	2b00      	cmp	r3, #0
 8010784:	d016      	beq.n	80107b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	3324      	adds	r3, #36	; 0x24
 801078a:	4618      	mov	r0, r3
 801078c:	f001 f8e8 	bl	8011960 <xTaskRemoveFromEventList>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00e      	beq.n	80107b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00b      	beq.n	80107b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	2201      	movs	r2, #1
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	e007      	b.n	80107b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80107a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107a8:	3301      	adds	r3, #1
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	b25a      	sxtb	r2, r3
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80107b4:	2301      	movs	r3, #1
 80107b6:	637b      	str	r3, [r7, #52]	; 0x34
 80107b8:	e001      	b.n	80107be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80107ba:	2300      	movs	r3, #0
 80107bc:	637b      	str	r3, [r7, #52]	; 0x34
 80107be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f383 8811 	msr	BASEPRI, r3
}
 80107c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3738      	adds	r7, #56	; 0x38
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08c      	sub	sp, #48	; 0x30
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80107e0:	2300      	movs	r3, #0
 80107e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d10a      	bne.n	8010804 <xQueueReceive+0x30>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	623b      	str	r3, [r7, #32]
}
 8010800:	bf00      	nop
 8010802:	e7fe      	b.n	8010802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d103      	bne.n	8010812 <xQueueReceive+0x3e>
 801080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801080e:	2b00      	cmp	r3, #0
 8010810:	d101      	bne.n	8010816 <xQueueReceive+0x42>
 8010812:	2301      	movs	r3, #1
 8010814:	e000      	b.n	8010818 <xQueueReceive+0x44>
 8010816:	2300      	movs	r3, #0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10a      	bne.n	8010832 <xQueueReceive+0x5e>
	__asm volatile
 801081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010820:	f383 8811 	msr	BASEPRI, r3
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	61fb      	str	r3, [r7, #28]
}
 801082e:	bf00      	nop
 8010830:	e7fe      	b.n	8010830 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010832:	f001 fa57 	bl	8011ce4 <xTaskGetSchedulerState>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d102      	bne.n	8010842 <xQueueReceive+0x6e>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <xQueueReceive+0x72>
 8010842:	2301      	movs	r3, #1
 8010844:	e000      	b.n	8010848 <xQueueReceive+0x74>
 8010846:	2300      	movs	r3, #0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10a      	bne.n	8010862 <xQueueReceive+0x8e>
	__asm volatile
 801084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	61bb      	str	r3, [r7, #24]
}
 801085e:	bf00      	nop
 8010860:	e7fe      	b.n	8010860 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010862:	f002 f897 	bl	8012994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801086a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086e:	2b00      	cmp	r3, #0
 8010870:	d01f      	beq.n	80108b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010872:	68b9      	ldr	r1, [r7, #8]
 8010874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010876:	f000 fabe 	bl	8010df6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087c:	1e5a      	subs	r2, r3, #1
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010884:	691b      	ldr	r3, [r3, #16]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00f      	beq.n	80108aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	3310      	adds	r3, #16
 801088e:	4618      	mov	r0, r3
 8010890:	f001 f866 	bl	8011960 <xTaskRemoveFromEventList>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d007      	beq.n	80108aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801089a:	4b3d      	ldr	r3, [pc, #244]	; (8010990 <xQueueReceive+0x1bc>)
 801089c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108aa:	f002 f8a3 	bl	80129f4 <vPortExitCritical>
				return pdPASS;
 80108ae:	2301      	movs	r3, #1
 80108b0:	e069      	b.n	8010986 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d103      	bne.n	80108c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108b8:	f002 f89c 	bl	80129f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80108bc:	2300      	movs	r3, #0
 80108be:	e062      	b.n	8010986 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d106      	bne.n	80108d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108c6:	f107 0310 	add.w	r3, r7, #16
 80108ca:	4618      	mov	r0, r3
 80108cc:	f001 f8ac 	bl	8011a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108d0:	2301      	movs	r3, #1
 80108d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108d4:	f002 f88e 	bl	80129f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108d8:	f000 fe18 	bl	801150c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108dc:	f002 f85a 	bl	8012994 <vPortEnterCritical>
 80108e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108e6:	b25b      	sxtb	r3, r3
 80108e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ec:	d103      	bne.n	80108f6 <xQueueReceive+0x122>
 80108ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f0:	2200      	movs	r2, #0
 80108f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108fc:	b25b      	sxtb	r3, r3
 80108fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010902:	d103      	bne.n	801090c <xQueueReceive+0x138>
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	2200      	movs	r2, #0
 8010908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801090c:	f002 f872 	bl	80129f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010910:	1d3a      	adds	r2, r7, #4
 8010912:	f107 0310 	add.w	r3, r7, #16
 8010916:	4611      	mov	r1, r2
 8010918:	4618      	mov	r0, r3
 801091a:	f001 f89b 	bl	8011a54 <xTaskCheckForTimeOut>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d123      	bne.n	801096c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010926:	f000 fade 	bl	8010ee6 <prvIsQueueEmpty>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d017      	beq.n	8010960 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010932:	3324      	adds	r3, #36	; 0x24
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	4611      	mov	r1, r2
 8010938:	4618      	mov	r0, r3
 801093a:	f000 ffc1 	bl	80118c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801093e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010940:	f000 fa7f 	bl	8010e42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010944:	f000 fdf0 	bl	8011528 <xTaskResumeAll>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	d189      	bne.n	8010862 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801094e:	4b10      	ldr	r3, [pc, #64]	; (8010990 <xQueueReceive+0x1bc>)
 8010950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	f3bf 8f4f 	dsb	sy
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	e780      	b.n	8010862 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010962:	f000 fa6e 	bl	8010e42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010966:	f000 fddf 	bl	8011528 <xTaskResumeAll>
 801096a:	e77a      	b.n	8010862 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801096c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801096e:	f000 fa68 	bl	8010e42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010972:	f000 fdd9 	bl	8011528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010978:	f000 fab5 	bl	8010ee6 <prvIsQueueEmpty>
 801097c:	4603      	mov	r3, r0
 801097e:	2b00      	cmp	r3, #0
 8010980:	f43f af6f 	beq.w	8010862 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010984:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010986:	4618      	mov	r0, r3
 8010988:	3730      	adds	r7, #48	; 0x30
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	e000ed04 	.word	0xe000ed04

08010994 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b08e      	sub	sp, #56	; 0x38
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801099e:	2300      	movs	r3, #0
 80109a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80109a6:	2300      	movs	r3, #0
 80109a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80109aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10a      	bne.n	80109c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80109b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	623b      	str	r3, [r7, #32]
}
 80109c2:	bf00      	nop
 80109c4:	e7fe      	b.n	80109c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00a      	beq.n	80109e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80109ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	61fb      	str	r3, [r7, #28]
}
 80109e0:	bf00      	nop
 80109e2:	e7fe      	b.n	80109e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109e4:	f001 f97e 	bl	8011ce4 <xTaskGetSchedulerState>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d102      	bne.n	80109f4 <xQueueSemaphoreTake+0x60>
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <xQueueSemaphoreTake+0x64>
 80109f4:	2301      	movs	r3, #1
 80109f6:	e000      	b.n	80109fa <xQueueSemaphoreTake+0x66>
 80109f8:	2300      	movs	r3, #0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10a      	bne.n	8010a14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	61bb      	str	r3, [r7, #24]
}
 8010a10:	bf00      	nop
 8010a12:	e7fe      	b.n	8010a12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a14:	f001 ffbe 	bl	8012994 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d024      	beq.n	8010a6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a26:	1e5a      	subs	r2, r3, #1
 8010a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d104      	bne.n	8010a3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010a34:	f001 facc 	bl	8011fd0 <pvTaskIncrementMutexHeldCount>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00f      	beq.n	8010a66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a48:	3310      	adds	r3, #16
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 ff88 	bl	8011960 <xTaskRemoveFromEventList>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d007      	beq.n	8010a66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010a56:	4b54      	ldr	r3, [pc, #336]	; (8010ba8 <xQueueSemaphoreTake+0x214>)
 8010a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a5c:	601a      	str	r2, [r3, #0]
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010a66:	f001 ffc5 	bl	80129f4 <vPortExitCritical>
				return pdPASS;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e097      	b.n	8010b9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d111      	bne.n	8010a98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00a      	beq.n	8010a90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	617b      	str	r3, [r7, #20]
}
 8010a8c:	bf00      	nop
 8010a8e:	e7fe      	b.n	8010a8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010a90:	f001 ffb0 	bl	80129f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e082      	b.n	8010b9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a9e:	f107 030c 	add.w	r3, r7, #12
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 ffc0 	bl	8011a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010aac:	f001 ffa2 	bl	80129f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ab0:	f000 fd2c 	bl	801150c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ab4:	f001 ff6e 	bl	8012994 <vPortEnterCritical>
 8010ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010abe:	b25b      	sxtb	r3, r3
 8010ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac4:	d103      	bne.n	8010ace <xQueueSemaphoreTake+0x13a>
 8010ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ad4:	b25b      	sxtb	r3, r3
 8010ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ada:	d103      	bne.n	8010ae4 <xQueueSemaphoreTake+0x150>
 8010adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ae4:	f001 ff86 	bl	80129f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ae8:	463a      	mov	r2, r7
 8010aea:	f107 030c 	add.w	r3, r7, #12
 8010aee:	4611      	mov	r1, r2
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 ffaf 	bl	8011a54 <xTaskCheckForTimeOut>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d132      	bne.n	8010b62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010afe:	f000 f9f2 	bl	8010ee6 <prvIsQueueEmpty>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d026      	beq.n	8010b56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d109      	bne.n	8010b24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010b10:	f001 ff40 	bl	8012994 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b16:	689b      	ldr	r3, [r3, #8]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f001 f901 	bl	8011d20 <xTaskPriorityInherit>
 8010b1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010b20:	f001 ff68 	bl	80129f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b26:	3324      	adds	r3, #36	; 0x24
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 fec7 	bl	80118c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b34:	f000 f985 	bl	8010e42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010b38:	f000 fcf6 	bl	8011528 <xTaskResumeAll>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f47f af68 	bne.w	8010a14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010b44:	4b18      	ldr	r3, [pc, #96]	; (8010ba8 <xQueueSemaphoreTake+0x214>)
 8010b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b4a:	601a      	str	r2, [r3, #0]
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	e75e      	b.n	8010a14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b58:	f000 f973 	bl	8010e42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b5c:	f000 fce4 	bl	8011528 <xTaskResumeAll>
 8010b60:	e758      	b.n	8010a14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b64:	f000 f96d 	bl	8010e42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b68:	f000 fcde 	bl	8011528 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b6e:	f000 f9ba 	bl	8010ee6 <prvIsQueueEmpty>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f43f af4d 	beq.w	8010a14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d00d      	beq.n	8010b9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010b80:	f001 ff08 	bl	8012994 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b86:	f000 f8b4 	bl	8010cf2 <prvGetDisinheritPriorityAfterTimeout>
 8010b8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b92:	4618      	mov	r0, r3
 8010b94:	f001 f99a 	bl	8011ecc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010b98:	f001 ff2c 	bl	80129f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010b9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3738      	adds	r7, #56	; 0x38
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	e000ed04 	.word	0xe000ed04

08010bac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08e      	sub	sp, #56	; 0x38
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10a      	bne.n	8010bd8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	623b      	str	r3, [r7, #32]
}
 8010bd4:	bf00      	nop
 8010bd6:	e7fe      	b.n	8010bd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d103      	bne.n	8010be6 <xQueueReceiveFromISR+0x3a>
 8010bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d101      	bne.n	8010bea <xQueueReceiveFromISR+0x3e>
 8010be6:	2301      	movs	r3, #1
 8010be8:	e000      	b.n	8010bec <xQueueReceiveFromISR+0x40>
 8010bea:	2300      	movs	r3, #0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10a      	bne.n	8010c06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	61fb      	str	r3, [r7, #28]
}
 8010c02:	bf00      	nop
 8010c04:	e7fe      	b.n	8010c04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c06:	f001 ffa7 	bl	8012b58 <vPortValidateInterruptPriority>
	__asm volatile
 8010c0a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	61ba      	str	r2, [r7, #24]
 8010c20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010c22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d02f      	beq.n	8010c92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c3c:	68b9      	ldr	r1, [r7, #8]
 8010c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c40:	f000 f8d9 	bl	8010df6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c46:	1e5a      	subs	r2, r3, #1
 8010c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c54:	d112      	bne.n	8010c7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c58:	691b      	ldr	r3, [r3, #16]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d016      	beq.n	8010c8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	3310      	adds	r3, #16
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fe7c 	bl	8011960 <xTaskRemoveFromEventList>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00e      	beq.n	8010c8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00b      	beq.n	8010c8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2201      	movs	r2, #1
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	e007      	b.n	8010c8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c80:	3301      	adds	r3, #1
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	b25a      	sxtb	r2, r3
 8010c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8010c90:	e001      	b.n	8010c96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010c92:	2300      	movs	r3, #0
 8010c94:	637b      	str	r3, [r7, #52]	; 0x34
 8010c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	f383 8811 	msr	BASEPRI, r3
}
 8010ca0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3738      	adds	r7, #56	; 0x38
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10a      	bne.n	8010cd4 <vQueueDelete+0x28>
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	60bb      	str	r3, [r7, #8]
}
 8010cd0:	bf00      	nop
 8010cd2:	e7fe      	b.n	8010cd2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f000 f95f 	bl	8010f98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d102      	bne.n	8010cea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f002 f843 	bl	8012d70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010cea:	bf00      	nop
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010cf2:	b480      	push	{r7}
 8010cf4:	b085      	sub	sp, #20
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d006      	beq.n	8010d10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010d0c:	60fb      	str	r3, [r7, #12]
 8010d0e:	e001      	b.n	8010d14 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010d10:	2300      	movs	r3, #0
 8010d12:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010d14:	68fb      	ldr	r3, [r7, #12]
	}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr

08010d22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b086      	sub	sp, #24
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	60f8      	str	r0, [r7, #12]
 8010d2a:	60b9      	str	r1, [r7, #8]
 8010d2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d10d      	bne.n	8010d5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d14d      	bne.n	8010de4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	689b      	ldr	r3, [r3, #8]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f001 f84f 	bl	8011df0 <xTaskPriorityDisinherit>
 8010d52:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	609a      	str	r2, [r3, #8]
 8010d5a:	e043      	b.n	8010de4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d119      	bne.n	8010d96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6858      	ldr	r0, [r3, #4]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	68b9      	ldr	r1, [r7, #8]
 8010d6e:	f002 fe5d 	bl	8013a2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7a:	441a      	add	r2, r3
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	685a      	ldr	r2, [r3, #4]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d32b      	bcc.n	8010de4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	605a      	str	r2, [r3, #4]
 8010d94:	e026      	b.n	8010de4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	68d8      	ldr	r0, [r3, #12]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9e:	461a      	mov	r2, r3
 8010da0:	68b9      	ldr	r1, [r7, #8]
 8010da2:	f002 fe43 	bl	8013a2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	68da      	ldr	r2, [r3, #12]
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dae:	425b      	negs	r3, r3
 8010db0:	441a      	add	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	68da      	ldr	r2, [r3, #12]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d207      	bcs.n	8010dd2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	689a      	ldr	r2, [r3, #8]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dca:	425b      	negs	r3, r3
 8010dcc:	441a      	add	r2, r3
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b02      	cmp	r3, #2
 8010dd6:	d105      	bne.n	8010de4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d002      	beq.n	8010de4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	3b01      	subs	r3, #1
 8010de2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	1c5a      	adds	r2, r3, #1
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010dec:	697b      	ldr	r3, [r7, #20]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3718      	adds	r7, #24
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b082      	sub	sp, #8
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
 8010dfe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d018      	beq.n	8010e3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e10:	441a      	add	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	68da      	ldr	r2, [r3, #12]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d303      	bcc.n	8010e2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	68d9      	ldr	r1, [r3, #12]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e32:	461a      	mov	r2, r3
 8010e34:	6838      	ldr	r0, [r7, #0]
 8010e36:	f002 fdf9 	bl	8013a2c <memcpy>
	}
}
 8010e3a:	bf00      	nop
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b084      	sub	sp, #16
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010e4a:	f001 fda3 	bl	8012994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e56:	e011      	b.n	8010e7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d012      	beq.n	8010e86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	3324      	adds	r3, #36	; 0x24
 8010e64:	4618      	mov	r0, r3
 8010e66:	f000 fd7b 	bl	8011960 <xTaskRemoveFromEventList>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d001      	beq.n	8010e74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010e70:	f000 fe52 	bl	8011b18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010e74:	7bfb      	ldrb	r3, [r7, #15]
 8010e76:	3b01      	subs	r3, #1
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	dce9      	bgt.n	8010e58 <prvUnlockQueue+0x16>
 8010e84:	e000      	b.n	8010e88 <prvUnlockQueue+0x46>
					break;
 8010e86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	22ff      	movs	r2, #255	; 0xff
 8010e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010e90:	f001 fdb0 	bl	80129f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010e94:	f001 fd7e 	bl	8012994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ea0:	e011      	b.n	8010ec6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d012      	beq.n	8010ed0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3310      	adds	r3, #16
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f000 fd56 	bl	8011960 <xTaskRemoveFromEventList>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d001      	beq.n	8010ebe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010eba:	f000 fe2d 	bl	8011b18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010ebe:	7bbb      	ldrb	r3, [r7, #14]
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	dce9      	bgt.n	8010ea2 <prvUnlockQueue+0x60>
 8010ece:	e000      	b.n	8010ed2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010ed0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	22ff      	movs	r2, #255	; 0xff
 8010ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010eda:	f001 fd8b 	bl	80129f4 <vPortExitCritical>
}
 8010ede:	bf00      	nop
 8010ee0:	3710      	adds	r7, #16
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}

08010ee6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b084      	sub	sp, #16
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010eee:	f001 fd51 	bl	8012994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d102      	bne.n	8010f00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010efa:	2301      	movs	r3, #1
 8010efc:	60fb      	str	r3, [r7, #12]
 8010efe:	e001      	b.n	8010f04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010f00:	2300      	movs	r3, #0
 8010f02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f04:	f001 fd76 	bl	80129f4 <vPortExitCritical>

	return xReturn;
 8010f08:	68fb      	ldr	r3, [r7, #12]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3710      	adds	r7, #16
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b084      	sub	sp, #16
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f1a:	f001 fd3b 	bl	8012994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d102      	bne.n	8010f30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	60fb      	str	r3, [r7, #12]
 8010f2e:	e001      	b.n	8010f34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010f30:	2300      	movs	r3, #0
 8010f32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f34:	f001 fd5e 	bl	80129f4 <vPortExitCritical>

	return xReturn;
 8010f38:	68fb      	ldr	r3, [r7, #12]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3710      	adds	r7, #16
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
	...

08010f44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010f44:	b480      	push	{r7}
 8010f46:	b085      	sub	sp, #20
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f4e:	2300      	movs	r3, #0
 8010f50:	60fb      	str	r3, [r7, #12]
 8010f52:	e014      	b.n	8010f7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010f54:	4a0f      	ldr	r2, [pc, #60]	; (8010f94 <vQueueAddToRegistry+0x50>)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10b      	bne.n	8010f78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010f60:	490c      	ldr	r1, [pc, #48]	; (8010f94 <vQueueAddToRegistry+0x50>)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	683a      	ldr	r2, [r7, #0]
 8010f66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010f6a:	4a0a      	ldr	r2, [pc, #40]	; (8010f94 <vQueueAddToRegistry+0x50>)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	00db      	lsls	r3, r3, #3
 8010f70:	4413      	add	r3, r2
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010f76:	e006      	b.n	8010f86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2b07      	cmp	r3, #7
 8010f82:	d9e7      	bls.n	8010f54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010f84:	bf00      	nop
 8010f86:	bf00      	nop
 8010f88:	3714      	adds	r7, #20
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	20000e04 	.word	0x20000e04

08010f98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	60fb      	str	r3, [r7, #12]
 8010fa4:	e016      	b.n	8010fd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010fa6:	4a10      	ldr	r2, [pc, #64]	; (8010fe8 <vQueueUnregisterQueue+0x50>)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	00db      	lsls	r3, r3, #3
 8010fac:	4413      	add	r3, r2
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d10b      	bne.n	8010fce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010fb6:	4a0c      	ldr	r2, [pc, #48]	; (8010fe8 <vQueueUnregisterQueue+0x50>)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2100      	movs	r1, #0
 8010fbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010fc0:	4a09      	ldr	r2, [pc, #36]	; (8010fe8 <vQueueUnregisterQueue+0x50>)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	00db      	lsls	r3, r3, #3
 8010fc6:	4413      	add	r3, r2
 8010fc8:	2200      	movs	r2, #0
 8010fca:	605a      	str	r2, [r3, #4]
				break;
 8010fcc:	e006      	b.n	8010fdc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2b07      	cmp	r3, #7
 8010fd8:	d9e5      	bls.n	8010fa6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010fda:	bf00      	nop
 8010fdc:	bf00      	nop
 8010fde:	3714      	adds	r7, #20
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr
 8010fe8:	20000e04 	.word	0x20000e04

08010fec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010ffc:	f001 fcca 	bl	8012994 <vPortEnterCritical>
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011006:	b25b      	sxtb	r3, r3
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100c:	d103      	bne.n	8011016 <vQueueWaitForMessageRestricted+0x2a>
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	2200      	movs	r2, #0
 8011012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801101c:	b25b      	sxtb	r3, r3
 801101e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011022:	d103      	bne.n	801102c <vQueueWaitForMessageRestricted+0x40>
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	2200      	movs	r2, #0
 8011028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801102c:	f001 fce2 	bl	80129f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011034:	2b00      	cmp	r3, #0
 8011036:	d106      	bne.n	8011046 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	3324      	adds	r3, #36	; 0x24
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	68b9      	ldr	r1, [r7, #8]
 8011040:	4618      	mov	r0, r3
 8011042:	f000 fc61 	bl	8011908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011046:	6978      	ldr	r0, [r7, #20]
 8011048:	f7ff fefb 	bl	8010e42 <prvUnlockQueue>
	}
 801104c:	bf00      	nop
 801104e:	3718      	adds	r7, #24
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011054:	b580      	push	{r7, lr}
 8011056:	b08e      	sub	sp, #56	; 0x38
 8011058:	af04      	add	r7, sp, #16
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
 8011060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10a      	bne.n	801107e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	623b      	str	r3, [r7, #32]
}
 801107a:	bf00      	nop
 801107c:	e7fe      	b.n	801107c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011080:	2b00      	cmp	r3, #0
 8011082:	d10a      	bne.n	801109a <xTaskCreateStatic+0x46>
	__asm volatile
 8011084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011088:	f383 8811 	msr	BASEPRI, r3
 801108c:	f3bf 8f6f 	isb	sy
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	61fb      	str	r3, [r7, #28]
}
 8011096:	bf00      	nop
 8011098:	e7fe      	b.n	8011098 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801109a:	23a8      	movs	r3, #168	; 0xa8
 801109c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	2ba8      	cmp	r3, #168	; 0xa8
 80110a2:	d00a      	beq.n	80110ba <xTaskCreateStatic+0x66>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	61bb      	str	r3, [r7, #24]
}
 80110b6:	bf00      	nop
 80110b8:	e7fe      	b.n	80110b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80110ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80110bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d01e      	beq.n	8011100 <xTaskCreateStatic+0xac>
 80110c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d01b      	beq.n	8011100 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80110c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	2202      	movs	r2, #2
 80110d6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80110da:	2300      	movs	r3, #0
 80110dc:	9303      	str	r3, [sp, #12]
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	9302      	str	r3, [sp, #8]
 80110e2:	f107 0314 	add.w	r3, r7, #20
 80110e6:	9301      	str	r3, [sp, #4]
 80110e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	68b9      	ldr	r1, [r7, #8]
 80110f2:	68f8      	ldr	r0, [r7, #12]
 80110f4:	f000 f850 	bl	8011198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110fa:	f000 f8f3 	bl	80112e4 <prvAddNewTaskToReadyList>
 80110fe:	e001      	b.n	8011104 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011100:	2300      	movs	r3, #0
 8011102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011104:	697b      	ldr	r3, [r7, #20]
	}
 8011106:	4618      	mov	r0, r3
 8011108:	3728      	adds	r7, #40	; 0x28
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801110e:	b580      	push	{r7, lr}
 8011110:	b08c      	sub	sp, #48	; 0x30
 8011112:	af04      	add	r7, sp, #16
 8011114:	60f8      	str	r0, [r7, #12]
 8011116:	60b9      	str	r1, [r7, #8]
 8011118:	603b      	str	r3, [r7, #0]
 801111a:	4613      	mov	r3, r2
 801111c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801111e:	88fb      	ldrh	r3, [r7, #6]
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	4618      	mov	r0, r3
 8011124:	f001 fd58 	bl	8012bd8 <pvPortMalloc>
 8011128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d00e      	beq.n	801114e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011130:	20a8      	movs	r0, #168	; 0xa8
 8011132:	f001 fd51 	bl	8012bd8 <pvPortMalloc>
 8011136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d003      	beq.n	8011146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	697a      	ldr	r2, [r7, #20]
 8011142:	631a      	str	r2, [r3, #48]	; 0x30
 8011144:	e005      	b.n	8011152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011146:	6978      	ldr	r0, [r7, #20]
 8011148:	f001 fe12 	bl	8012d70 <vPortFree>
 801114c:	e001      	b.n	8011152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801114e:	2300      	movs	r3, #0
 8011150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d017      	beq.n	8011188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	2200      	movs	r2, #0
 801115c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011160:	88fa      	ldrh	r2, [r7, #6]
 8011162:	2300      	movs	r3, #0
 8011164:	9303      	str	r3, [sp, #12]
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	9302      	str	r3, [sp, #8]
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	68b9      	ldr	r1, [r7, #8]
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f000 f80e 	bl	8011198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801117c:	69f8      	ldr	r0, [r7, #28]
 801117e:	f000 f8b1 	bl	80112e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011182:	2301      	movs	r3, #1
 8011184:	61bb      	str	r3, [r7, #24]
 8011186:	e002      	b.n	801118e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011188:	f04f 33ff 	mov.w	r3, #4294967295
 801118c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801118e:	69bb      	ldr	r3, [r7, #24]
	}
 8011190:	4618      	mov	r0, r3
 8011192:	3720      	adds	r7, #32
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b088      	sub	sp, #32
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
 80111a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80111a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	461a      	mov	r2, r3
 80111b0:	21a5      	movs	r1, #165	; 0xa5
 80111b2:	f002 fb87 	bl	80138c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80111c0:	3b01      	subs	r3, #1
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	4413      	add	r3, r2
 80111c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	f023 0307 	bic.w	r3, r3, #7
 80111ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	f003 0307 	and.w	r3, r3, #7
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00a      	beq.n	80111f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80111da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111de:	f383 8811 	msr	BASEPRI, r3
 80111e2:	f3bf 8f6f 	isb	sy
 80111e6:	f3bf 8f4f 	dsb	sy
 80111ea:	617b      	str	r3, [r7, #20]
}
 80111ec:	bf00      	nop
 80111ee:	e7fe      	b.n	80111ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d01f      	beq.n	8011236 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111f6:	2300      	movs	r3, #0
 80111f8:	61fb      	str	r3, [r7, #28]
 80111fa:	e012      	b.n	8011222 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	4413      	add	r3, r2
 8011202:	7819      	ldrb	r1, [r3, #0]
 8011204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	4413      	add	r3, r2
 801120a:	3334      	adds	r3, #52	; 0x34
 801120c:	460a      	mov	r2, r1
 801120e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	4413      	add	r3, r2
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d006      	beq.n	801122a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	3301      	adds	r3, #1
 8011220:	61fb      	str	r3, [r7, #28]
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	2b0f      	cmp	r3, #15
 8011226:	d9e9      	bls.n	80111fc <prvInitialiseNewTask+0x64>
 8011228:	e000      	b.n	801122c <prvInitialiseNewTask+0x94>
			{
				break;
 801122a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122e:	2200      	movs	r2, #0
 8011230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011234:	e003      	b.n	801123e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011238:	2200      	movs	r2, #0
 801123a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011240:	2b37      	cmp	r3, #55	; 0x37
 8011242:	d901      	bls.n	8011248 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011244:	2337      	movs	r3, #55	; 0x37
 8011246:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801124c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011252:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011256:	2200      	movs	r2, #0
 8011258:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125c:	3304      	adds	r3, #4
 801125e:	4618      	mov	r0, r3
 8011260:	f7fe fe56 	bl	800ff10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011266:	3318      	adds	r3, #24
 8011268:	4618      	mov	r0, r3
 801126a:	f7fe fe51 	bl	800ff10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011272:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011276:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011282:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011286:	2200      	movs	r2, #0
 8011288:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128e:	2200      	movs	r2, #0
 8011290:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011296:	3354      	adds	r3, #84	; 0x54
 8011298:	224c      	movs	r2, #76	; 0x4c
 801129a:	2100      	movs	r1, #0
 801129c:	4618      	mov	r0, r3
 801129e:	f002 fb11 	bl	80138c4 <memset>
 80112a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a4:	4a0c      	ldr	r2, [pc, #48]	; (80112d8 <prvInitialiseNewTask+0x140>)
 80112a6:	659a      	str	r2, [r3, #88]	; 0x58
 80112a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112aa:	4a0c      	ldr	r2, [pc, #48]	; (80112dc <prvInitialiseNewTask+0x144>)
 80112ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80112ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b0:	4a0b      	ldr	r2, [pc, #44]	; (80112e0 <prvInitialiseNewTask+0x148>)
 80112b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80112b4:	683a      	ldr	r2, [r7, #0]
 80112b6:	68f9      	ldr	r1, [r7, #12]
 80112b8:	69b8      	ldr	r0, [r7, #24]
 80112ba:	f001 fa3f 	bl	801273c <pxPortInitialiseStack>
 80112be:	4602      	mov	r2, r0
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d002      	beq.n	80112d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80112ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112d0:	bf00      	nop
 80112d2:	3720      	adds	r7, #32
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	20005868 	.word	0x20005868
 80112dc:	200058d0 	.word	0x200058d0
 80112e0:	20005938 	.word	0x20005938

080112e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80112ec:	f001 fb52 	bl	8012994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80112f0:	4b2d      	ldr	r3, [pc, #180]	; (80113a8 <prvAddNewTaskToReadyList+0xc4>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	3301      	adds	r3, #1
 80112f6:	4a2c      	ldr	r2, [pc, #176]	; (80113a8 <prvAddNewTaskToReadyList+0xc4>)
 80112f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80112fa:	4b2c      	ldr	r3, [pc, #176]	; (80113ac <prvAddNewTaskToReadyList+0xc8>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d109      	bne.n	8011316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011302:	4a2a      	ldr	r2, [pc, #168]	; (80113ac <prvAddNewTaskToReadyList+0xc8>)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011308:	4b27      	ldr	r3, [pc, #156]	; (80113a8 <prvAddNewTaskToReadyList+0xc4>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d110      	bne.n	8011332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011310:	f000 fc26 	bl	8011b60 <prvInitialiseTaskLists>
 8011314:	e00d      	b.n	8011332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011316:	4b26      	ldr	r3, [pc, #152]	; (80113b0 <prvAddNewTaskToReadyList+0xcc>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d109      	bne.n	8011332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801131e:	4b23      	ldr	r3, [pc, #140]	; (80113ac <prvAddNewTaskToReadyList+0xc8>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011328:	429a      	cmp	r2, r3
 801132a:	d802      	bhi.n	8011332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801132c:	4a1f      	ldr	r2, [pc, #124]	; (80113ac <prvAddNewTaskToReadyList+0xc8>)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011332:	4b20      	ldr	r3, [pc, #128]	; (80113b4 <prvAddNewTaskToReadyList+0xd0>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	3301      	adds	r3, #1
 8011338:	4a1e      	ldr	r2, [pc, #120]	; (80113b4 <prvAddNewTaskToReadyList+0xd0>)
 801133a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801133c:	4b1d      	ldr	r3, [pc, #116]	; (80113b4 <prvAddNewTaskToReadyList+0xd0>)
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011348:	4b1b      	ldr	r3, [pc, #108]	; (80113b8 <prvAddNewTaskToReadyList+0xd4>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	429a      	cmp	r2, r3
 801134e:	d903      	bls.n	8011358 <prvAddNewTaskToReadyList+0x74>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011354:	4a18      	ldr	r2, [pc, #96]	; (80113b8 <prvAddNewTaskToReadyList+0xd4>)
 8011356:	6013      	str	r3, [r2, #0]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801135c:	4613      	mov	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4413      	add	r3, r2
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4a15      	ldr	r2, [pc, #84]	; (80113bc <prvAddNewTaskToReadyList+0xd8>)
 8011366:	441a      	add	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	3304      	adds	r3, #4
 801136c:	4619      	mov	r1, r3
 801136e:	4610      	mov	r0, r2
 8011370:	f7fe fddb 	bl	800ff2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011374:	f001 fb3e 	bl	80129f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011378:	4b0d      	ldr	r3, [pc, #52]	; (80113b0 <prvAddNewTaskToReadyList+0xcc>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d00e      	beq.n	801139e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011380:	4b0a      	ldr	r3, [pc, #40]	; (80113ac <prvAddNewTaskToReadyList+0xc8>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138a:	429a      	cmp	r2, r3
 801138c:	d207      	bcs.n	801139e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801138e:	4b0c      	ldr	r3, [pc, #48]	; (80113c0 <prvAddNewTaskToReadyList+0xdc>)
 8011390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	f3bf 8f4f 	dsb	sy
 801139a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801139e:	bf00      	nop
 80113a0:	3708      	adds	r7, #8
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	20001318 	.word	0x20001318
 80113ac:	20000e44 	.word	0x20000e44
 80113b0:	20001324 	.word	0x20001324
 80113b4:	20001334 	.word	0x20001334
 80113b8:	20001320 	.word	0x20001320
 80113bc:	20000e48 	.word	0x20000e48
 80113c0:	e000ed04 	.word	0xe000ed04

080113c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80113cc:	2300      	movs	r3, #0
 80113ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d017      	beq.n	8011406 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80113d6:	4b13      	ldr	r3, [pc, #76]	; (8011424 <vTaskDelay+0x60>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00a      	beq.n	80113f4 <vTaskDelay+0x30>
	__asm volatile
 80113de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e2:	f383 8811 	msr	BASEPRI, r3
 80113e6:	f3bf 8f6f 	isb	sy
 80113ea:	f3bf 8f4f 	dsb	sy
 80113ee:	60bb      	str	r3, [r7, #8]
}
 80113f0:	bf00      	nop
 80113f2:	e7fe      	b.n	80113f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80113f4:	f000 f88a 	bl	801150c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80113f8:	2100      	movs	r1, #0
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fdfc 	bl	8011ff8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011400:	f000 f892 	bl	8011528 <xTaskResumeAll>
 8011404:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d107      	bne.n	801141c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801140c:	4b06      	ldr	r3, [pc, #24]	; (8011428 <vTaskDelay+0x64>)
 801140e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	f3bf 8f4f 	dsb	sy
 8011418:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801141c:	bf00      	nop
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	20001340 	.word	0x20001340
 8011428:	e000ed04 	.word	0xe000ed04

0801142c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b08a      	sub	sp, #40	; 0x28
 8011430:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011432:	2300      	movs	r3, #0
 8011434:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011436:	2300      	movs	r3, #0
 8011438:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801143a:	463a      	mov	r2, r7
 801143c:	1d39      	adds	r1, r7, #4
 801143e:	f107 0308 	add.w	r3, r7, #8
 8011442:	4618      	mov	r0, r3
 8011444:	f7fe fd10 	bl	800fe68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011448:	6839      	ldr	r1, [r7, #0]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	9202      	str	r2, [sp, #8]
 8011450:	9301      	str	r3, [sp, #4]
 8011452:	2300      	movs	r3, #0
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	2300      	movs	r3, #0
 8011458:	460a      	mov	r2, r1
 801145a:	4924      	ldr	r1, [pc, #144]	; (80114ec <vTaskStartScheduler+0xc0>)
 801145c:	4824      	ldr	r0, [pc, #144]	; (80114f0 <vTaskStartScheduler+0xc4>)
 801145e:	f7ff fdf9 	bl	8011054 <xTaskCreateStatic>
 8011462:	4603      	mov	r3, r0
 8011464:	4a23      	ldr	r2, [pc, #140]	; (80114f4 <vTaskStartScheduler+0xc8>)
 8011466:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011468:	4b22      	ldr	r3, [pc, #136]	; (80114f4 <vTaskStartScheduler+0xc8>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d002      	beq.n	8011476 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011470:	2301      	movs	r3, #1
 8011472:	617b      	str	r3, [r7, #20]
 8011474:	e001      	b.n	801147a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011476:	2300      	movs	r3, #0
 8011478:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d102      	bne.n	8011486 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011480:	f000 fe0e 	bl	80120a0 <xTimerCreateTimerTask>
 8011484:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d11b      	bne.n	80114c4 <vTaskStartScheduler+0x98>
	__asm volatile
 801148c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011490:	f383 8811 	msr	BASEPRI, r3
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	f3bf 8f4f 	dsb	sy
 801149c:	613b      	str	r3, [r7, #16]
}
 801149e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114a0:	4b15      	ldr	r3, [pc, #84]	; (80114f8 <vTaskStartScheduler+0xcc>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3354      	adds	r3, #84	; 0x54
 80114a6:	4a15      	ldr	r2, [pc, #84]	; (80114fc <vTaskStartScheduler+0xd0>)
 80114a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80114aa:	4b15      	ldr	r3, [pc, #84]	; (8011500 <vTaskStartScheduler+0xd4>)
 80114ac:	f04f 32ff 	mov.w	r2, #4294967295
 80114b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80114b2:	4b14      	ldr	r3, [pc, #80]	; (8011504 <vTaskStartScheduler+0xd8>)
 80114b4:	2201      	movs	r2, #1
 80114b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80114b8:	4b13      	ldr	r3, [pc, #76]	; (8011508 <vTaskStartScheduler+0xdc>)
 80114ba:	2200      	movs	r2, #0
 80114bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80114be:	f001 f9c7 	bl	8012850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80114c2:	e00e      	b.n	80114e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ca:	d10a      	bne.n	80114e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80114cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	60fb      	str	r3, [r7, #12]
}
 80114de:	bf00      	nop
 80114e0:	e7fe      	b.n	80114e0 <vTaskStartScheduler+0xb4>
}
 80114e2:	bf00      	nop
 80114e4:	3718      	adds	r7, #24
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	080142b8 	.word	0x080142b8
 80114f0:	08011b31 	.word	0x08011b31
 80114f4:	2000133c 	.word	0x2000133c
 80114f8:	20000e44 	.word	0x20000e44
 80114fc:	200000e0 	.word	0x200000e0
 8011500:	20001338 	.word	0x20001338
 8011504:	20001324 	.word	0x20001324
 8011508:	2000131c 	.word	0x2000131c

0801150c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801150c:	b480      	push	{r7}
 801150e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011510:	4b04      	ldr	r3, [pc, #16]	; (8011524 <vTaskSuspendAll+0x18>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3301      	adds	r3, #1
 8011516:	4a03      	ldr	r2, [pc, #12]	; (8011524 <vTaskSuspendAll+0x18>)
 8011518:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801151a:	bf00      	nop
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	20001340 	.word	0x20001340

08011528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801152e:	2300      	movs	r3, #0
 8011530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011532:	2300      	movs	r3, #0
 8011534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011536:	4b42      	ldr	r3, [pc, #264]	; (8011640 <xTaskResumeAll+0x118>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10a      	bne.n	8011554 <xTaskResumeAll+0x2c>
	__asm volatile
 801153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011542:	f383 8811 	msr	BASEPRI, r3
 8011546:	f3bf 8f6f 	isb	sy
 801154a:	f3bf 8f4f 	dsb	sy
 801154e:	603b      	str	r3, [r7, #0]
}
 8011550:	bf00      	nop
 8011552:	e7fe      	b.n	8011552 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011554:	f001 fa1e 	bl	8012994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011558:	4b39      	ldr	r3, [pc, #228]	; (8011640 <xTaskResumeAll+0x118>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3b01      	subs	r3, #1
 801155e:	4a38      	ldr	r2, [pc, #224]	; (8011640 <xTaskResumeAll+0x118>)
 8011560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011562:	4b37      	ldr	r3, [pc, #220]	; (8011640 <xTaskResumeAll+0x118>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d162      	bne.n	8011630 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801156a:	4b36      	ldr	r3, [pc, #216]	; (8011644 <xTaskResumeAll+0x11c>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d05e      	beq.n	8011630 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011572:	e02f      	b.n	80115d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011574:	4b34      	ldr	r3, [pc, #208]	; (8011648 <xTaskResumeAll+0x120>)
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	3318      	adds	r3, #24
 8011580:	4618      	mov	r0, r3
 8011582:	f7fe fd2f 	bl	800ffe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	3304      	adds	r3, #4
 801158a:	4618      	mov	r0, r3
 801158c:	f7fe fd2a 	bl	800ffe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011594:	4b2d      	ldr	r3, [pc, #180]	; (801164c <xTaskResumeAll+0x124>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	429a      	cmp	r2, r3
 801159a:	d903      	bls.n	80115a4 <xTaskResumeAll+0x7c>
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a0:	4a2a      	ldr	r2, [pc, #168]	; (801164c <xTaskResumeAll+0x124>)
 80115a2:	6013      	str	r3, [r2, #0]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a8:	4613      	mov	r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4a27      	ldr	r2, [pc, #156]	; (8011650 <xTaskResumeAll+0x128>)
 80115b2:	441a      	add	r2, r3
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	3304      	adds	r3, #4
 80115b8:	4619      	mov	r1, r3
 80115ba:	4610      	mov	r0, r2
 80115bc:	f7fe fcb5 	bl	800ff2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c4:	4b23      	ldr	r3, [pc, #140]	; (8011654 <xTaskResumeAll+0x12c>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d302      	bcc.n	80115d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80115ce:	4b22      	ldr	r3, [pc, #136]	; (8011658 <xTaskResumeAll+0x130>)
 80115d0:	2201      	movs	r2, #1
 80115d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115d4:	4b1c      	ldr	r3, [pc, #112]	; (8011648 <xTaskResumeAll+0x120>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d1cb      	bne.n	8011574 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d001      	beq.n	80115e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80115e2:	f000 fb5f 	bl	8011ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80115e6:	4b1d      	ldr	r3, [pc, #116]	; (801165c <xTaskResumeAll+0x134>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d010      	beq.n	8011614 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80115f2:	f000 f847 	bl	8011684 <xTaskIncrementTick>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80115fc:	4b16      	ldr	r3, [pc, #88]	; (8011658 <xTaskResumeAll+0x130>)
 80115fe:	2201      	movs	r2, #1
 8011600:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	3b01      	subs	r3, #1
 8011606:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1f1      	bne.n	80115f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801160e:	4b13      	ldr	r3, [pc, #76]	; (801165c <xTaskResumeAll+0x134>)
 8011610:	2200      	movs	r2, #0
 8011612:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011614:	4b10      	ldr	r3, [pc, #64]	; (8011658 <xTaskResumeAll+0x130>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d009      	beq.n	8011630 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801161c:	2301      	movs	r3, #1
 801161e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011620:	4b0f      	ldr	r3, [pc, #60]	; (8011660 <xTaskResumeAll+0x138>)
 8011622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011626:	601a      	str	r2, [r3, #0]
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011630:	f001 f9e0 	bl	80129f4 <vPortExitCritical>

	return xAlreadyYielded;
 8011634:	68bb      	ldr	r3, [r7, #8]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	20001340 	.word	0x20001340
 8011644:	20001318 	.word	0x20001318
 8011648:	200012d8 	.word	0x200012d8
 801164c:	20001320 	.word	0x20001320
 8011650:	20000e48 	.word	0x20000e48
 8011654:	20000e44 	.word	0x20000e44
 8011658:	2000132c 	.word	0x2000132c
 801165c:	20001328 	.word	0x20001328
 8011660:	e000ed04 	.word	0xe000ed04

08011664 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801166a:	4b05      	ldr	r3, [pc, #20]	; (8011680 <xTaskGetTickCount+0x1c>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011670:	687b      	ldr	r3, [r7, #4]
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	2000131c 	.word	0x2000131c

08011684 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801168a:	2300      	movs	r3, #0
 801168c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801168e:	4b4f      	ldr	r3, [pc, #316]	; (80117cc <xTaskIncrementTick+0x148>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	f040 808f 	bne.w	80117b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011698:	4b4d      	ldr	r3, [pc, #308]	; (80117d0 <xTaskIncrementTick+0x14c>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3301      	adds	r3, #1
 801169e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80116a0:	4a4b      	ldr	r2, [pc, #300]	; (80117d0 <xTaskIncrementTick+0x14c>)
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d120      	bne.n	80116ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80116ac:	4b49      	ldr	r3, [pc, #292]	; (80117d4 <xTaskIncrementTick+0x150>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d00a      	beq.n	80116cc <xTaskIncrementTick+0x48>
	__asm volatile
 80116b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	603b      	str	r3, [r7, #0]
}
 80116c8:	bf00      	nop
 80116ca:	e7fe      	b.n	80116ca <xTaskIncrementTick+0x46>
 80116cc:	4b41      	ldr	r3, [pc, #260]	; (80117d4 <xTaskIncrementTick+0x150>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	4b41      	ldr	r3, [pc, #260]	; (80117d8 <xTaskIncrementTick+0x154>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	4a3f      	ldr	r2, [pc, #252]	; (80117d4 <xTaskIncrementTick+0x150>)
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	4a3f      	ldr	r2, [pc, #252]	; (80117d8 <xTaskIncrementTick+0x154>)
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	4b3e      	ldr	r3, [pc, #248]	; (80117dc <xTaskIncrementTick+0x158>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	3301      	adds	r3, #1
 80116e6:	4a3d      	ldr	r2, [pc, #244]	; (80117dc <xTaskIncrementTick+0x158>)
 80116e8:	6013      	str	r3, [r2, #0]
 80116ea:	f000 fadb 	bl	8011ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80116ee:	4b3c      	ldr	r3, [pc, #240]	; (80117e0 <xTaskIncrementTick+0x15c>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	693a      	ldr	r2, [r7, #16]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d349      	bcc.n	801178c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116f8:	4b36      	ldr	r3, [pc, #216]	; (80117d4 <xTaskIncrementTick+0x150>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d104      	bne.n	801170c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011702:	4b37      	ldr	r3, [pc, #220]	; (80117e0 <xTaskIncrementTick+0x15c>)
 8011704:	f04f 32ff 	mov.w	r2, #4294967295
 8011708:	601a      	str	r2, [r3, #0]
					break;
 801170a:	e03f      	b.n	801178c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801170c:	4b31      	ldr	r3, [pc, #196]	; (80117d4 <xTaskIncrementTick+0x150>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801171c:	693a      	ldr	r2, [r7, #16]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	429a      	cmp	r2, r3
 8011722:	d203      	bcs.n	801172c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011724:	4a2e      	ldr	r2, [pc, #184]	; (80117e0 <xTaskIncrementTick+0x15c>)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801172a:	e02f      	b.n	801178c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	3304      	adds	r3, #4
 8011730:	4618      	mov	r0, r3
 8011732:	f7fe fc57 	bl	800ffe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801173a:	2b00      	cmp	r3, #0
 801173c:	d004      	beq.n	8011748 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	3318      	adds	r3, #24
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe fc4e 	bl	800ffe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174c:	4b25      	ldr	r3, [pc, #148]	; (80117e4 <xTaskIncrementTick+0x160>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	429a      	cmp	r2, r3
 8011752:	d903      	bls.n	801175c <xTaskIncrementTick+0xd8>
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011758:	4a22      	ldr	r2, [pc, #136]	; (80117e4 <xTaskIncrementTick+0x160>)
 801175a:	6013      	str	r3, [r2, #0]
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011760:	4613      	mov	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	4a1f      	ldr	r2, [pc, #124]	; (80117e8 <xTaskIncrementTick+0x164>)
 801176a:	441a      	add	r2, r3
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	3304      	adds	r3, #4
 8011770:	4619      	mov	r1, r3
 8011772:	4610      	mov	r0, r2
 8011774:	f7fe fbd9 	bl	800ff2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801177c:	4b1b      	ldr	r3, [pc, #108]	; (80117ec <xTaskIncrementTick+0x168>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011782:	429a      	cmp	r2, r3
 8011784:	d3b8      	bcc.n	80116f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011786:	2301      	movs	r3, #1
 8011788:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801178a:	e7b5      	b.n	80116f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801178c:	4b17      	ldr	r3, [pc, #92]	; (80117ec <xTaskIncrementTick+0x168>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011792:	4915      	ldr	r1, [pc, #84]	; (80117e8 <xTaskIncrementTick+0x164>)
 8011794:	4613      	mov	r3, r2
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	4413      	add	r3, r2
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	440b      	add	r3, r1
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d901      	bls.n	80117a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80117a4:	2301      	movs	r3, #1
 80117a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80117a8:	4b11      	ldr	r3, [pc, #68]	; (80117f0 <xTaskIncrementTick+0x16c>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d007      	beq.n	80117c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80117b0:	2301      	movs	r3, #1
 80117b2:	617b      	str	r3, [r7, #20]
 80117b4:	e004      	b.n	80117c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80117b6:	4b0f      	ldr	r3, [pc, #60]	; (80117f4 <xTaskIncrementTick+0x170>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3301      	adds	r3, #1
 80117bc:	4a0d      	ldr	r2, [pc, #52]	; (80117f4 <xTaskIncrementTick+0x170>)
 80117be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80117c0:	697b      	ldr	r3, [r7, #20]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3718      	adds	r7, #24
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	20001340 	.word	0x20001340
 80117d0:	2000131c 	.word	0x2000131c
 80117d4:	200012d0 	.word	0x200012d0
 80117d8:	200012d4 	.word	0x200012d4
 80117dc:	20001330 	.word	0x20001330
 80117e0:	20001338 	.word	0x20001338
 80117e4:	20001320 	.word	0x20001320
 80117e8:	20000e48 	.word	0x20000e48
 80117ec:	20000e44 	.word	0x20000e44
 80117f0:	2000132c 	.word	0x2000132c
 80117f4:	20001328 	.word	0x20001328

080117f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80117fe:	4b2a      	ldr	r3, [pc, #168]	; (80118a8 <vTaskSwitchContext+0xb0>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d003      	beq.n	801180e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011806:	4b29      	ldr	r3, [pc, #164]	; (80118ac <vTaskSwitchContext+0xb4>)
 8011808:	2201      	movs	r2, #1
 801180a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801180c:	e046      	b.n	801189c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801180e:	4b27      	ldr	r3, [pc, #156]	; (80118ac <vTaskSwitchContext+0xb4>)
 8011810:	2200      	movs	r2, #0
 8011812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011814:	4b26      	ldr	r3, [pc, #152]	; (80118b0 <vTaskSwitchContext+0xb8>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	60fb      	str	r3, [r7, #12]
 801181a:	e010      	b.n	801183e <vTaskSwitchContext+0x46>
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d10a      	bne.n	8011838 <vTaskSwitchContext+0x40>
	__asm volatile
 8011822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011826:	f383 8811 	msr	BASEPRI, r3
 801182a:	f3bf 8f6f 	isb	sy
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	607b      	str	r3, [r7, #4]
}
 8011834:	bf00      	nop
 8011836:	e7fe      	b.n	8011836 <vTaskSwitchContext+0x3e>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	3b01      	subs	r3, #1
 801183c:	60fb      	str	r3, [r7, #12]
 801183e:	491d      	ldr	r1, [pc, #116]	; (80118b4 <vTaskSwitchContext+0xbc>)
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	4613      	mov	r3, r2
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	4413      	add	r3, r2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	440b      	add	r3, r1
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0e4      	beq.n	801181c <vTaskSwitchContext+0x24>
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	4613      	mov	r3, r2
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	4413      	add	r3, r2
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	4a15      	ldr	r2, [pc, #84]	; (80118b4 <vTaskSwitchContext+0xbc>)
 801185e:	4413      	add	r3, r2
 8011860:	60bb      	str	r3, [r7, #8]
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	685a      	ldr	r2, [r3, #4]
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	605a      	str	r2, [r3, #4]
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	685a      	ldr	r2, [r3, #4]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	3308      	adds	r3, #8
 8011874:	429a      	cmp	r2, r3
 8011876:	d104      	bne.n	8011882 <vTaskSwitchContext+0x8a>
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	685a      	ldr	r2, [r3, #4]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	605a      	str	r2, [r3, #4]
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	4a0b      	ldr	r2, [pc, #44]	; (80118b8 <vTaskSwitchContext+0xc0>)
 801188a:	6013      	str	r3, [r2, #0]
 801188c:	4a08      	ldr	r2, [pc, #32]	; (80118b0 <vTaskSwitchContext+0xb8>)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011892:	4b09      	ldr	r3, [pc, #36]	; (80118b8 <vTaskSwitchContext+0xc0>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	3354      	adds	r3, #84	; 0x54
 8011898:	4a08      	ldr	r2, [pc, #32]	; (80118bc <vTaskSwitchContext+0xc4>)
 801189a:	6013      	str	r3, [r2, #0]
}
 801189c:	bf00      	nop
 801189e:	3714      	adds	r7, #20
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr
 80118a8:	20001340 	.word	0x20001340
 80118ac:	2000132c 	.word	0x2000132c
 80118b0:	20001320 	.word	0x20001320
 80118b4:	20000e48 	.word	0x20000e48
 80118b8:	20000e44 	.word	0x20000e44
 80118bc:	200000e0 	.word	0x200000e0

080118c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10a      	bne.n	80118e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80118d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d4:	f383 8811 	msr	BASEPRI, r3
 80118d8:	f3bf 8f6f 	isb	sy
 80118dc:	f3bf 8f4f 	dsb	sy
 80118e0:	60fb      	str	r3, [r7, #12]
}
 80118e2:	bf00      	nop
 80118e4:	e7fe      	b.n	80118e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118e6:	4b07      	ldr	r3, [pc, #28]	; (8011904 <vTaskPlaceOnEventList+0x44>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3318      	adds	r3, #24
 80118ec:	4619      	mov	r1, r3
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7fe fb3f 	bl	800ff72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118f4:	2101      	movs	r1, #1
 80118f6:	6838      	ldr	r0, [r7, #0]
 80118f8:	f000 fb7e 	bl	8011ff8 <prvAddCurrentTaskToDelayedList>
}
 80118fc:	bf00      	nop
 80118fe:	3710      	adds	r7, #16
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	20000e44 	.word	0x20000e44

08011908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d10a      	bne.n	8011930 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	617b      	str	r3, [r7, #20]
}
 801192c:	bf00      	nop
 801192e:	e7fe      	b.n	801192e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011930:	4b0a      	ldr	r3, [pc, #40]	; (801195c <vTaskPlaceOnEventListRestricted+0x54>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	3318      	adds	r3, #24
 8011936:	4619      	mov	r1, r3
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	f7fe faf6 	bl	800ff2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011944:	f04f 33ff 	mov.w	r3, #4294967295
 8011948:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801194a:	6879      	ldr	r1, [r7, #4]
 801194c:	68b8      	ldr	r0, [r7, #8]
 801194e:	f000 fb53 	bl	8011ff8 <prvAddCurrentTaskToDelayedList>
	}
 8011952:	bf00      	nop
 8011954:	3718      	adds	r7, #24
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	20000e44 	.word	0x20000e44

08011960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b086      	sub	sp, #24
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d10a      	bne.n	801198c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	60fb      	str	r3, [r7, #12]
}
 8011988:	bf00      	nop
 801198a:	e7fe      	b.n	801198a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	3318      	adds	r3, #24
 8011990:	4618      	mov	r0, r3
 8011992:	f7fe fb27 	bl	800ffe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011996:	4b1e      	ldr	r3, [pc, #120]	; (8011a10 <xTaskRemoveFromEventList+0xb0>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d11d      	bne.n	80119da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	3304      	adds	r3, #4
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fe fb1e 	bl	800ffe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ac:	4b19      	ldr	r3, [pc, #100]	; (8011a14 <xTaskRemoveFromEventList+0xb4>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d903      	bls.n	80119bc <xTaskRemoveFromEventList+0x5c>
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b8:	4a16      	ldr	r2, [pc, #88]	; (8011a14 <xTaskRemoveFromEventList+0xb4>)
 80119ba:	6013      	str	r3, [r2, #0]
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c0:	4613      	mov	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	4a13      	ldr	r2, [pc, #76]	; (8011a18 <xTaskRemoveFromEventList+0xb8>)
 80119ca:	441a      	add	r2, r3
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	3304      	adds	r3, #4
 80119d0:	4619      	mov	r1, r3
 80119d2:	4610      	mov	r0, r2
 80119d4:	f7fe faa9 	bl	800ff2a <vListInsertEnd>
 80119d8:	e005      	b.n	80119e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	3318      	adds	r3, #24
 80119de:	4619      	mov	r1, r3
 80119e0:	480e      	ldr	r0, [pc, #56]	; (8011a1c <xTaskRemoveFromEventList+0xbc>)
 80119e2:	f7fe faa2 	bl	800ff2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ea:	4b0d      	ldr	r3, [pc, #52]	; (8011a20 <xTaskRemoveFromEventList+0xc0>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d905      	bls.n	8011a00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80119f4:	2301      	movs	r3, #1
 80119f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80119f8:	4b0a      	ldr	r3, [pc, #40]	; (8011a24 <xTaskRemoveFromEventList+0xc4>)
 80119fa:	2201      	movs	r2, #1
 80119fc:	601a      	str	r2, [r3, #0]
 80119fe:	e001      	b.n	8011a04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011a00:	2300      	movs	r3, #0
 8011a02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a04:	697b      	ldr	r3, [r7, #20]
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3718      	adds	r7, #24
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	20001340 	.word	0x20001340
 8011a14:	20001320 	.word	0x20001320
 8011a18:	20000e48 	.word	0x20000e48
 8011a1c:	200012d8 	.word	0x200012d8
 8011a20:	20000e44 	.word	0x20000e44
 8011a24:	2000132c 	.word	0x2000132c

08011a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a30:	4b06      	ldr	r3, [pc, #24]	; (8011a4c <vTaskInternalSetTimeOutState+0x24>)
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a38:	4b05      	ldr	r3, [pc, #20]	; (8011a50 <vTaskInternalSetTimeOutState+0x28>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	605a      	str	r2, [r3, #4]
}
 8011a40:	bf00      	nop
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr
 8011a4c:	20001330 	.word	0x20001330
 8011a50:	2000131c 	.word	0x2000131c

08011a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b088      	sub	sp, #32
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d10a      	bne.n	8011a7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a68:	f383 8811 	msr	BASEPRI, r3
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	613b      	str	r3, [r7, #16]
}
 8011a76:	bf00      	nop
 8011a78:	e7fe      	b.n	8011a78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d10a      	bne.n	8011a96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	60fb      	str	r3, [r7, #12]
}
 8011a92:	bf00      	nop
 8011a94:	e7fe      	b.n	8011a94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011a96:	f000 ff7d 	bl	8012994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a9a:	4b1d      	ldr	r3, [pc, #116]	; (8011b10 <xTaskCheckForTimeOut+0xbc>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	69ba      	ldr	r2, [r7, #24]
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ab2:	d102      	bne.n	8011aba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	61fb      	str	r3, [r7, #28]
 8011ab8:	e023      	b.n	8011b02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	4b15      	ldr	r3, [pc, #84]	; (8011b14 <xTaskCheckForTimeOut+0xc0>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d007      	beq.n	8011ad6 <xTaskCheckForTimeOut+0x82>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	69ba      	ldr	r2, [r7, #24]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d302      	bcc.n	8011ad6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	61fb      	str	r3, [r7, #28]
 8011ad4:	e015      	b.n	8011b02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	697a      	ldr	r2, [r7, #20]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d20b      	bcs.n	8011af8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	1ad2      	subs	r2, r2, r3
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f7ff ff9b 	bl	8011a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011af2:	2300      	movs	r3, #0
 8011af4:	61fb      	str	r3, [r7, #28]
 8011af6:	e004      	b.n	8011b02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	2200      	movs	r2, #0
 8011afc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011afe:	2301      	movs	r3, #1
 8011b00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011b02:	f000 ff77 	bl	80129f4 <vPortExitCritical>

	return xReturn;
 8011b06:	69fb      	ldr	r3, [r7, #28]
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3720      	adds	r7, #32
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	2000131c 	.word	0x2000131c
 8011b14:	20001330 	.word	0x20001330

08011b18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011b18:	b480      	push	{r7}
 8011b1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011b1c:	4b03      	ldr	r3, [pc, #12]	; (8011b2c <vTaskMissedYield+0x14>)
 8011b1e:	2201      	movs	r2, #1
 8011b20:	601a      	str	r2, [r3, #0]
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	2000132c 	.word	0x2000132c

08011b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011b38:	f000 f852 	bl	8011be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b3c:	4b06      	ldr	r3, [pc, #24]	; (8011b58 <prvIdleTask+0x28>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d9f9      	bls.n	8011b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011b44:	4b05      	ldr	r3, [pc, #20]	; (8011b5c <prvIdleTask+0x2c>)
 8011b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b4a:	601a      	str	r2, [r3, #0]
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011b54:	e7f0      	b.n	8011b38 <prvIdleTask+0x8>
 8011b56:	bf00      	nop
 8011b58:	20000e48 	.word	0x20000e48
 8011b5c:	e000ed04 	.word	0xe000ed04

08011b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b66:	2300      	movs	r3, #0
 8011b68:	607b      	str	r3, [r7, #4]
 8011b6a:	e00c      	b.n	8011b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b6c:	687a      	ldr	r2, [r7, #4]
 8011b6e:	4613      	mov	r3, r2
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	4413      	add	r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4a12      	ldr	r2, [pc, #72]	; (8011bc0 <prvInitialiseTaskLists+0x60>)
 8011b78:	4413      	add	r3, r2
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fe f9a8 	bl	800fed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	3301      	adds	r3, #1
 8011b84:	607b      	str	r3, [r7, #4]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b37      	cmp	r3, #55	; 0x37
 8011b8a:	d9ef      	bls.n	8011b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011b8c:	480d      	ldr	r0, [pc, #52]	; (8011bc4 <prvInitialiseTaskLists+0x64>)
 8011b8e:	f7fe f99f 	bl	800fed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011b92:	480d      	ldr	r0, [pc, #52]	; (8011bc8 <prvInitialiseTaskLists+0x68>)
 8011b94:	f7fe f99c 	bl	800fed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011b98:	480c      	ldr	r0, [pc, #48]	; (8011bcc <prvInitialiseTaskLists+0x6c>)
 8011b9a:	f7fe f999 	bl	800fed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011b9e:	480c      	ldr	r0, [pc, #48]	; (8011bd0 <prvInitialiseTaskLists+0x70>)
 8011ba0:	f7fe f996 	bl	800fed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ba4:	480b      	ldr	r0, [pc, #44]	; (8011bd4 <prvInitialiseTaskLists+0x74>)
 8011ba6:	f7fe f993 	bl	800fed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011baa:	4b0b      	ldr	r3, [pc, #44]	; (8011bd8 <prvInitialiseTaskLists+0x78>)
 8011bac:	4a05      	ldr	r2, [pc, #20]	; (8011bc4 <prvInitialiseTaskLists+0x64>)
 8011bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011bb0:	4b0a      	ldr	r3, [pc, #40]	; (8011bdc <prvInitialiseTaskLists+0x7c>)
 8011bb2:	4a05      	ldr	r2, [pc, #20]	; (8011bc8 <prvInitialiseTaskLists+0x68>)
 8011bb4:	601a      	str	r2, [r3, #0]
}
 8011bb6:	bf00      	nop
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	20000e48 	.word	0x20000e48
 8011bc4:	200012a8 	.word	0x200012a8
 8011bc8:	200012bc 	.word	0x200012bc
 8011bcc:	200012d8 	.word	0x200012d8
 8011bd0:	200012ec 	.word	0x200012ec
 8011bd4:	20001304 	.word	0x20001304
 8011bd8:	200012d0 	.word	0x200012d0
 8011bdc:	200012d4 	.word	0x200012d4

08011be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011be6:	e019      	b.n	8011c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011be8:	f000 fed4 	bl	8012994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bec:	4b10      	ldr	r3, [pc, #64]	; (8011c30 <prvCheckTasksWaitingTermination+0x50>)
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	3304      	adds	r3, #4
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7fe f9f3 	bl	800ffe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011bfe:	4b0d      	ldr	r3, [pc, #52]	; (8011c34 <prvCheckTasksWaitingTermination+0x54>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	4a0b      	ldr	r2, [pc, #44]	; (8011c34 <prvCheckTasksWaitingTermination+0x54>)
 8011c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c08:	4b0b      	ldr	r3, [pc, #44]	; (8011c38 <prvCheckTasksWaitingTermination+0x58>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	3b01      	subs	r3, #1
 8011c0e:	4a0a      	ldr	r2, [pc, #40]	; (8011c38 <prvCheckTasksWaitingTermination+0x58>)
 8011c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011c12:	f000 feef 	bl	80129f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 f810 	bl	8011c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c1c:	4b06      	ldr	r3, [pc, #24]	; (8011c38 <prvCheckTasksWaitingTermination+0x58>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d1e1      	bne.n	8011be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011c24:	bf00      	nop
 8011c26:	bf00      	nop
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	200012ec 	.word	0x200012ec
 8011c34:	20001318 	.word	0x20001318
 8011c38:	20001300 	.word	0x20001300

08011c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	3354      	adds	r3, #84	; 0x54
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f001 fe55 	bl	80138f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d108      	bne.n	8011c6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f001 f887 	bl	8012d70 <vPortFree>
				vPortFree( pxTCB );
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f001 f884 	bl	8012d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011c68:	e018      	b.n	8011c9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d103      	bne.n	8011c7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f001 f87b 	bl	8012d70 <vPortFree>
	}
 8011c7a:	e00f      	b.n	8011c9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011c82:	2b02      	cmp	r3, #2
 8011c84:	d00a      	beq.n	8011c9c <prvDeleteTCB+0x60>
	__asm volatile
 8011c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8a:	f383 8811 	msr	BASEPRI, r3
 8011c8e:	f3bf 8f6f 	isb	sy
 8011c92:	f3bf 8f4f 	dsb	sy
 8011c96:	60fb      	str	r3, [r7, #12]
}
 8011c98:	bf00      	nop
 8011c9a:	e7fe      	b.n	8011c9a <prvDeleteTCB+0x5e>
	}
 8011c9c:	bf00      	nop
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011caa:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <prvResetNextTaskUnblockTime+0x38>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d104      	bne.n	8011cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011cb4:	4b0a      	ldr	r3, [pc, #40]	; (8011ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8011cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011cbc:	e008      	b.n	8011cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cbe:	4b07      	ldr	r3, [pc, #28]	; (8011cdc <prvResetNextTaskUnblockTime+0x38>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	68db      	ldr	r3, [r3, #12]
 8011cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	4a04      	ldr	r2, [pc, #16]	; (8011ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8011cce:	6013      	str	r3, [r2, #0]
}
 8011cd0:	bf00      	nop
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr
 8011cdc:	200012d0 	.word	0x200012d0
 8011ce0:	20001338 	.word	0x20001338

08011ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011cea:	4b0b      	ldr	r3, [pc, #44]	; (8011d18 <xTaskGetSchedulerState+0x34>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d102      	bne.n	8011cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	607b      	str	r3, [r7, #4]
 8011cf6:	e008      	b.n	8011d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cf8:	4b08      	ldr	r3, [pc, #32]	; (8011d1c <xTaskGetSchedulerState+0x38>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011d00:	2302      	movs	r3, #2
 8011d02:	607b      	str	r3, [r7, #4]
 8011d04:	e001      	b.n	8011d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011d06:	2300      	movs	r3, #0
 8011d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011d0a:	687b      	ldr	r3, [r7, #4]
	}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	20001324 	.word	0x20001324
 8011d1c:	20001340 	.word	0x20001340

08011d20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d051      	beq.n	8011dda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d3a:	4b2a      	ldr	r3, [pc, #168]	; (8011de4 <xTaskPriorityInherit+0xc4>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d241      	bcs.n	8011dc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	699b      	ldr	r3, [r3, #24]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	db06      	blt.n	8011d5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d4c:	4b25      	ldr	r3, [pc, #148]	; (8011de4 <xTaskPriorityInherit+0xc4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	6959      	ldr	r1, [r3, #20]
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d62:	4613      	mov	r3, r2
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	4413      	add	r3, r2
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	4a1f      	ldr	r2, [pc, #124]	; (8011de8 <xTaskPriorityInherit+0xc8>)
 8011d6c:	4413      	add	r3, r2
 8011d6e:	4299      	cmp	r1, r3
 8011d70:	d122      	bne.n	8011db8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	3304      	adds	r3, #4
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7fe f934 	bl	800ffe4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011d7c:	4b19      	ldr	r3, [pc, #100]	; (8011de4 <xTaskPriorityInherit+0xc4>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d8a:	4b18      	ldr	r3, [pc, #96]	; (8011dec <xTaskPriorityInherit+0xcc>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d903      	bls.n	8011d9a <xTaskPriorityInherit+0x7a>
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d96:	4a15      	ldr	r2, [pc, #84]	; (8011dec <xTaskPriorityInherit+0xcc>)
 8011d98:	6013      	str	r3, [r2, #0]
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d9e:	4613      	mov	r3, r2
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	4413      	add	r3, r2
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4a10      	ldr	r2, [pc, #64]	; (8011de8 <xTaskPriorityInherit+0xc8>)
 8011da8:	441a      	add	r2, r3
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	3304      	adds	r3, #4
 8011dae:	4619      	mov	r1, r3
 8011db0:	4610      	mov	r0, r2
 8011db2:	f7fe f8ba 	bl	800ff2a <vListInsertEnd>
 8011db6:	e004      	b.n	8011dc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011db8:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <xTaskPriorityInherit+0xc4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	60fb      	str	r3, [r7, #12]
 8011dc6:	e008      	b.n	8011dda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011dcc:	4b05      	ldr	r3, [pc, #20]	; (8011de4 <xTaskPriorityInherit+0xc4>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d201      	bcs.n	8011dda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011dda:	68fb      	ldr	r3, [r7, #12]
	}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	20000e44 	.word	0x20000e44
 8011de8:	20000e48 	.word	0x20000e48
 8011dec:	20001320 	.word	0x20001320

08011df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d056      	beq.n	8011eb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011e06:	4b2e      	ldr	r3, [pc, #184]	; (8011ec0 <xTaskPriorityDisinherit+0xd0>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	693a      	ldr	r2, [r7, #16]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d00a      	beq.n	8011e26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e14:	f383 8811 	msr	BASEPRI, r3
 8011e18:	f3bf 8f6f 	isb	sy
 8011e1c:	f3bf 8f4f 	dsb	sy
 8011e20:	60fb      	str	r3, [r7, #12]
}
 8011e22:	bf00      	nop
 8011e24:	e7fe      	b.n	8011e24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10a      	bne.n	8011e44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e32:	f383 8811 	msr	BASEPRI, r3
 8011e36:	f3bf 8f6f 	isb	sy
 8011e3a:	f3bf 8f4f 	dsb	sy
 8011e3e:	60bb      	str	r3, [r7, #8]
}
 8011e40:	bf00      	nop
 8011e42:	e7fe      	b.n	8011e42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e48:	1e5a      	subs	r2, r3, #1
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d02c      	beq.n	8011eb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d128      	bne.n	8011eb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	3304      	adds	r3, #4
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fe f8bc 	bl	800ffe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e84:	4b0f      	ldr	r3, [pc, #60]	; (8011ec4 <xTaskPriorityDisinherit+0xd4>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d903      	bls.n	8011e94 <xTaskPriorityDisinherit+0xa4>
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e90:	4a0c      	ldr	r2, [pc, #48]	; (8011ec4 <xTaskPriorityDisinherit+0xd4>)
 8011e92:	6013      	str	r3, [r2, #0]
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e98:	4613      	mov	r3, r2
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	4413      	add	r3, r2
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	4a09      	ldr	r2, [pc, #36]	; (8011ec8 <xTaskPriorityDisinherit+0xd8>)
 8011ea2:	441a      	add	r2, r3
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	4610      	mov	r0, r2
 8011eac:	f7fe f83d 	bl	800ff2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011eb4:	697b      	ldr	r3, [r7, #20]
	}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	20000e44 	.word	0x20000e44
 8011ec4:	20001320 	.word	0x20001320
 8011ec8:	20000e48 	.word	0x20000e48

08011ecc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b088      	sub	sp, #32
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011eda:	2301      	movs	r3, #1
 8011edc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d06a      	beq.n	8011fba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d10a      	bne.n	8011f02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef0:	f383 8811 	msr	BASEPRI, r3
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	f3bf 8f4f 	dsb	sy
 8011efc:	60fb      	str	r3, [r7, #12]
}
 8011efe:	bf00      	nop
 8011f00:	e7fe      	b.n	8011f00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011f02:	69bb      	ldr	r3, [r7, #24]
 8011f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f06:	683a      	ldr	r2, [r7, #0]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d902      	bls.n	8011f12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	61fb      	str	r3, [r7, #28]
 8011f10:	e002      	b.n	8011f18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011f12:	69bb      	ldr	r3, [r7, #24]
 8011f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1c:	69fa      	ldr	r2, [r7, #28]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d04b      	beq.n	8011fba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f26:	697a      	ldr	r2, [r7, #20]
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d146      	bne.n	8011fba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011f2c:	4b25      	ldr	r3, [pc, #148]	; (8011fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	69ba      	ldr	r2, [r7, #24]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d10a      	bne.n	8011f4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3a:	f383 8811 	msr	BASEPRI, r3
 8011f3e:	f3bf 8f6f 	isb	sy
 8011f42:	f3bf 8f4f 	dsb	sy
 8011f46:	60bb      	str	r3, [r7, #8]
}
 8011f48:	bf00      	nop
 8011f4a:	e7fe      	b.n	8011f4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011f4c:	69bb      	ldr	r3, [r7, #24]
 8011f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	69fa      	ldr	r2, [r7, #28]
 8011f56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	699b      	ldr	r3, [r3, #24]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	db04      	blt.n	8011f6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011f6a:	69bb      	ldr	r3, [r7, #24]
 8011f6c:	6959      	ldr	r1, [r3, #20]
 8011f6e:	693a      	ldr	r2, [r7, #16]
 8011f70:	4613      	mov	r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4413      	add	r3, r2
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	4a13      	ldr	r2, [pc, #76]	; (8011fc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011f7a:	4413      	add	r3, r2
 8011f7c:	4299      	cmp	r1, r3
 8011f7e:	d11c      	bne.n	8011fba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f80:	69bb      	ldr	r3, [r7, #24]
 8011f82:	3304      	adds	r3, #4
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fe f82d 	bl	800ffe4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f8e:	4b0f      	ldr	r3, [pc, #60]	; (8011fcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d903      	bls.n	8011f9e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011f96:	69bb      	ldr	r3, [r7, #24]
 8011f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9a:	4a0c      	ldr	r2, [pc, #48]	; (8011fcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011f9c:	6013      	str	r3, [r2, #0]
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	4413      	add	r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4a07      	ldr	r2, [pc, #28]	; (8011fc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011fac:	441a      	add	r2, r3
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	3304      	adds	r3, #4
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4610      	mov	r0, r2
 8011fb6:	f7fd ffb8 	bl	800ff2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011fba:	bf00      	nop
 8011fbc:	3720      	adds	r7, #32
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	20000e44 	.word	0x20000e44
 8011fc8:	20000e48 	.word	0x20000e48
 8011fcc:	20001320 	.word	0x20001320

08011fd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011fd0:	b480      	push	{r7}
 8011fd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011fd4:	4b07      	ldr	r3, [pc, #28]	; (8011ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d004      	beq.n	8011fe6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011fdc:	4b05      	ldr	r3, [pc, #20]	; (8011ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fe2:	3201      	adds	r2, #1
 8011fe4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011fe6:	4b03      	ldr	r3, [pc, #12]	; (8011ff4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
	}
 8011fea:	4618      	mov	r0, r3
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	20000e44 	.word	0x20000e44

08011ff8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012002:	4b21      	ldr	r3, [pc, #132]	; (8012088 <prvAddCurrentTaskToDelayedList+0x90>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012008:	4b20      	ldr	r3, [pc, #128]	; (801208c <prvAddCurrentTaskToDelayedList+0x94>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3304      	adds	r3, #4
 801200e:	4618      	mov	r0, r3
 8012010:	f7fd ffe8 	bl	800ffe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201a:	d10a      	bne.n	8012032 <prvAddCurrentTaskToDelayedList+0x3a>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d007      	beq.n	8012032 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012022:	4b1a      	ldr	r3, [pc, #104]	; (801208c <prvAddCurrentTaskToDelayedList+0x94>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	3304      	adds	r3, #4
 8012028:	4619      	mov	r1, r3
 801202a:	4819      	ldr	r0, [pc, #100]	; (8012090 <prvAddCurrentTaskToDelayedList+0x98>)
 801202c:	f7fd ff7d 	bl	800ff2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012030:	e026      	b.n	8012080 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	4413      	add	r3, r2
 8012038:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801203a:	4b14      	ldr	r3, [pc, #80]	; (801208c <prvAddCurrentTaskToDelayedList+0x94>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	68ba      	ldr	r2, [r7, #8]
 8012040:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012042:	68ba      	ldr	r2, [r7, #8]
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	429a      	cmp	r2, r3
 8012048:	d209      	bcs.n	801205e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801204a:	4b12      	ldr	r3, [pc, #72]	; (8012094 <prvAddCurrentTaskToDelayedList+0x9c>)
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	4b0f      	ldr	r3, [pc, #60]	; (801208c <prvAddCurrentTaskToDelayedList+0x94>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	3304      	adds	r3, #4
 8012054:	4619      	mov	r1, r3
 8012056:	4610      	mov	r0, r2
 8012058:	f7fd ff8b 	bl	800ff72 <vListInsert>
}
 801205c:	e010      	b.n	8012080 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801205e:	4b0e      	ldr	r3, [pc, #56]	; (8012098 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	4b0a      	ldr	r3, [pc, #40]	; (801208c <prvAddCurrentTaskToDelayedList+0x94>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	3304      	adds	r3, #4
 8012068:	4619      	mov	r1, r3
 801206a:	4610      	mov	r0, r2
 801206c:	f7fd ff81 	bl	800ff72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012070:	4b0a      	ldr	r3, [pc, #40]	; (801209c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	429a      	cmp	r2, r3
 8012078:	d202      	bcs.n	8012080 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801207a:	4a08      	ldr	r2, [pc, #32]	; (801209c <prvAddCurrentTaskToDelayedList+0xa4>)
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	6013      	str	r3, [r2, #0]
}
 8012080:	bf00      	nop
 8012082:	3710      	adds	r7, #16
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	2000131c 	.word	0x2000131c
 801208c:	20000e44 	.word	0x20000e44
 8012090:	20001304 	.word	0x20001304
 8012094:	200012d4 	.word	0x200012d4
 8012098:	200012d0 	.word	0x200012d0
 801209c:	20001338 	.word	0x20001338

080120a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b08a      	sub	sp, #40	; 0x28
 80120a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80120a6:	2300      	movs	r3, #0
 80120a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80120aa:	f000 fb07 	bl	80126bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80120ae:	4b1c      	ldr	r3, [pc, #112]	; (8012120 <xTimerCreateTimerTask+0x80>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d021      	beq.n	80120fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80120b6:	2300      	movs	r3, #0
 80120b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80120be:	1d3a      	adds	r2, r7, #4
 80120c0:	f107 0108 	add.w	r1, r7, #8
 80120c4:	f107 030c 	add.w	r3, r7, #12
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fd fee7 	bl	800fe9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80120ce:	6879      	ldr	r1, [r7, #4]
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	9202      	str	r2, [sp, #8]
 80120d6:	9301      	str	r3, [sp, #4]
 80120d8:	2302      	movs	r3, #2
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	2300      	movs	r3, #0
 80120de:	460a      	mov	r2, r1
 80120e0:	4910      	ldr	r1, [pc, #64]	; (8012124 <xTimerCreateTimerTask+0x84>)
 80120e2:	4811      	ldr	r0, [pc, #68]	; (8012128 <xTimerCreateTimerTask+0x88>)
 80120e4:	f7fe ffb6 	bl	8011054 <xTaskCreateStatic>
 80120e8:	4603      	mov	r3, r0
 80120ea:	4a10      	ldr	r2, [pc, #64]	; (801212c <xTimerCreateTimerTask+0x8c>)
 80120ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80120ee:	4b0f      	ldr	r3, [pc, #60]	; (801212c <xTimerCreateTimerTask+0x8c>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80120f6:	2301      	movs	r3, #1
 80120f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d10a      	bne.n	8012116 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	613b      	str	r3, [r7, #16]
}
 8012112:	bf00      	nop
 8012114:	e7fe      	b.n	8012114 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012116:	697b      	ldr	r3, [r7, #20]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3718      	adds	r7, #24
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	20001374 	.word	0x20001374
 8012124:	080142c0 	.word	0x080142c0
 8012128:	08012265 	.word	0x08012265
 801212c:	20001378 	.word	0x20001378

08012130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b08a      	sub	sp, #40	; 0x28
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	607a      	str	r2, [r7, #4]
 801213c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801213e:	2300      	movs	r3, #0
 8012140:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d10a      	bne.n	801215e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214c:	f383 8811 	msr	BASEPRI, r3
 8012150:	f3bf 8f6f 	isb	sy
 8012154:	f3bf 8f4f 	dsb	sy
 8012158:	623b      	str	r3, [r7, #32]
}
 801215a:	bf00      	nop
 801215c:	e7fe      	b.n	801215c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801215e:	4b1a      	ldr	r3, [pc, #104]	; (80121c8 <xTimerGenericCommand+0x98>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d02a      	beq.n	80121bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	2b05      	cmp	r3, #5
 8012176:	dc18      	bgt.n	80121aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012178:	f7ff fdb4 	bl	8011ce4 <xTaskGetSchedulerState>
 801217c:	4603      	mov	r3, r0
 801217e:	2b02      	cmp	r3, #2
 8012180:	d109      	bne.n	8012196 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012182:	4b11      	ldr	r3, [pc, #68]	; (80121c8 <xTimerGenericCommand+0x98>)
 8012184:	6818      	ldr	r0, [r3, #0]
 8012186:	f107 0110 	add.w	r1, r7, #16
 801218a:	2300      	movs	r3, #0
 801218c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801218e:	f7fe f8fb 	bl	8010388 <xQueueGenericSend>
 8012192:	6278      	str	r0, [r7, #36]	; 0x24
 8012194:	e012      	b.n	80121bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012196:	4b0c      	ldr	r3, [pc, #48]	; (80121c8 <xTimerGenericCommand+0x98>)
 8012198:	6818      	ldr	r0, [r3, #0]
 801219a:	f107 0110 	add.w	r1, r7, #16
 801219e:	2300      	movs	r3, #0
 80121a0:	2200      	movs	r2, #0
 80121a2:	f7fe f8f1 	bl	8010388 <xQueueGenericSend>
 80121a6:	6278      	str	r0, [r7, #36]	; 0x24
 80121a8:	e008      	b.n	80121bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80121aa:	4b07      	ldr	r3, [pc, #28]	; (80121c8 <xTimerGenericCommand+0x98>)
 80121ac:	6818      	ldr	r0, [r3, #0]
 80121ae:	f107 0110 	add.w	r1, r7, #16
 80121b2:	2300      	movs	r3, #0
 80121b4:	683a      	ldr	r2, [r7, #0]
 80121b6:	f7fe f9e5 	bl	8010584 <xQueueGenericSendFromISR>
 80121ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3728      	adds	r7, #40	; 0x28
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	20001374 	.word	0x20001374

080121cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b088      	sub	sp, #32
 80121d0:	af02      	add	r7, sp, #8
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121d6:	4b22      	ldr	r3, [pc, #136]	; (8012260 <prvProcessExpiredTimer+0x94>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	3304      	adds	r3, #4
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fd fefd 	bl	800ffe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121f0:	f003 0304 	and.w	r3, r3, #4
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d022      	beq.n	801223e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	699a      	ldr	r2, [r3, #24]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	18d1      	adds	r1, r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	683a      	ldr	r2, [r7, #0]
 8012204:	6978      	ldr	r0, [r7, #20]
 8012206:	f000 f8d1 	bl	80123ac <prvInsertTimerInActiveList>
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d01f      	beq.n	8012250 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012210:	2300      	movs	r3, #0
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	2300      	movs	r3, #0
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	2100      	movs	r1, #0
 801221a:	6978      	ldr	r0, [r7, #20]
 801221c:	f7ff ff88 	bl	8012130 <xTimerGenericCommand>
 8012220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d113      	bne.n	8012250 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222c:	f383 8811 	msr	BASEPRI, r3
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	60fb      	str	r3, [r7, #12]
}
 801223a:	bf00      	nop
 801223c:	e7fe      	b.n	801223c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012244:	f023 0301 	bic.w	r3, r3, #1
 8012248:	b2da      	uxtb	r2, r3
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	6a1b      	ldr	r3, [r3, #32]
 8012254:	6978      	ldr	r0, [r7, #20]
 8012256:	4798      	blx	r3
}
 8012258:	bf00      	nop
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	2000136c 	.word	0x2000136c

08012264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801226c:	f107 0308 	add.w	r3, r7, #8
 8012270:	4618      	mov	r0, r3
 8012272:	f000 f857 	bl	8012324 <prvGetNextExpireTime>
 8012276:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	4619      	mov	r1, r3
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f000 f803 	bl	8012288 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012282:	f000 f8d5 	bl	8012430 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012286:	e7f1      	b.n	801226c <prvTimerTask+0x8>

08012288 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012292:	f7ff f93b 	bl	801150c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012296:	f107 0308 	add.w	r3, r7, #8
 801229a:	4618      	mov	r0, r3
 801229c:	f000 f866 	bl	801236c <prvSampleTimeNow>
 80122a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d130      	bne.n	801230a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10a      	bne.n	80122c4 <prvProcessTimerOrBlockTask+0x3c>
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d806      	bhi.n	80122c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80122b6:	f7ff f937 	bl	8011528 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80122ba:	68f9      	ldr	r1, [r7, #12]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ff85 	bl	80121cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80122c2:	e024      	b.n	801230e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d008      	beq.n	80122dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80122ca:	4b13      	ldr	r3, [pc, #76]	; (8012318 <prvProcessTimerOrBlockTask+0x90>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d101      	bne.n	80122d8 <prvProcessTimerOrBlockTask+0x50>
 80122d4:	2301      	movs	r3, #1
 80122d6:	e000      	b.n	80122da <prvProcessTimerOrBlockTask+0x52>
 80122d8:	2300      	movs	r3, #0
 80122da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80122dc:	4b0f      	ldr	r3, [pc, #60]	; (801231c <prvProcessTimerOrBlockTask+0x94>)
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	683a      	ldr	r2, [r7, #0]
 80122e8:	4619      	mov	r1, r3
 80122ea:	f7fe fe7f 	bl	8010fec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80122ee:	f7ff f91b 	bl	8011528 <xTaskResumeAll>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d10a      	bne.n	801230e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <prvProcessTimerOrBlockTask+0x98>)
 80122fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122fe:	601a      	str	r2, [r3, #0]
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	f3bf 8f6f 	isb	sy
}
 8012308:	e001      	b.n	801230e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801230a:	f7ff f90d 	bl	8011528 <xTaskResumeAll>
}
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	20001370 	.word	0x20001370
 801231c:	20001374 	.word	0x20001374
 8012320:	e000ed04 	.word	0xe000ed04

08012324 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801232c:	4b0e      	ldr	r3, [pc, #56]	; (8012368 <prvGetNextExpireTime+0x44>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d101      	bne.n	801233a <prvGetNextExpireTime+0x16>
 8012336:	2201      	movs	r2, #1
 8012338:	e000      	b.n	801233c <prvGetNextExpireTime+0x18>
 801233a:	2200      	movs	r2, #0
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d105      	bne.n	8012354 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012348:	4b07      	ldr	r3, [pc, #28]	; (8012368 <prvGetNextExpireTime+0x44>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	60fb      	str	r3, [r7, #12]
 8012352:	e001      	b.n	8012358 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012354:	2300      	movs	r3, #0
 8012356:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012358:	68fb      	ldr	r3, [r7, #12]
}
 801235a:	4618      	mov	r0, r3
 801235c:	3714      	adds	r7, #20
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	2000136c 	.word	0x2000136c

0801236c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012374:	f7ff f976 	bl	8011664 <xTaskGetTickCount>
 8012378:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801237a:	4b0b      	ldr	r3, [pc, #44]	; (80123a8 <prvSampleTimeNow+0x3c>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	429a      	cmp	r2, r3
 8012382:	d205      	bcs.n	8012390 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012384:	f000 f936 	bl	80125f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2201      	movs	r2, #1
 801238c:	601a      	str	r2, [r3, #0]
 801238e:	e002      	b.n	8012396 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012396:	4a04      	ldr	r2, [pc, #16]	; (80123a8 <prvSampleTimeNow+0x3c>)
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801239c:	68fb      	ldr	r3, [r7, #12]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	2000137c 	.word	0x2000137c

080123ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80123ba:	2300      	movs	r3, #0
 80123bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80123ca:	68ba      	ldr	r2, [r7, #8]
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d812      	bhi.n	80123f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	1ad2      	subs	r2, r2, r3
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	699b      	ldr	r3, [r3, #24]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d302      	bcc.n	80123e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e01b      	b.n	801241e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80123e6:	4b10      	ldr	r3, [pc, #64]	; (8012428 <prvInsertTimerInActiveList+0x7c>)
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	3304      	adds	r3, #4
 80123ee:	4619      	mov	r1, r3
 80123f0:	4610      	mov	r0, r2
 80123f2:	f7fd fdbe 	bl	800ff72 <vListInsert>
 80123f6:	e012      	b.n	801241e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d206      	bcs.n	801240e <prvInsertTimerInActiveList+0x62>
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	429a      	cmp	r2, r3
 8012406:	d302      	bcc.n	801240e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012408:	2301      	movs	r3, #1
 801240a:	617b      	str	r3, [r7, #20]
 801240c:	e007      	b.n	801241e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801240e:	4b07      	ldr	r3, [pc, #28]	; (801242c <prvInsertTimerInActiveList+0x80>)
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3304      	adds	r3, #4
 8012416:	4619      	mov	r1, r3
 8012418:	4610      	mov	r0, r2
 801241a:	f7fd fdaa 	bl	800ff72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801241e:	697b      	ldr	r3, [r7, #20]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	20001370 	.word	0x20001370
 801242c:	2000136c 	.word	0x2000136c

08012430 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08e      	sub	sp, #56	; 0x38
 8012434:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012436:	e0ca      	b.n	80125ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	da18      	bge.n	8012470 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801243e:	1d3b      	adds	r3, r7, #4
 8012440:	3304      	adds	r3, #4
 8012442:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012446:	2b00      	cmp	r3, #0
 8012448:	d10a      	bne.n	8012460 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801244e:	f383 8811 	msr	BASEPRI, r3
 8012452:	f3bf 8f6f 	isb	sy
 8012456:	f3bf 8f4f 	dsb	sy
 801245a:	61fb      	str	r3, [r7, #28]
}
 801245c:	bf00      	nop
 801245e:	e7fe      	b.n	801245e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012466:	6850      	ldr	r0, [r2, #4]
 8012468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801246a:	6892      	ldr	r2, [r2, #8]
 801246c:	4611      	mov	r1, r2
 801246e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2b00      	cmp	r3, #0
 8012474:	f2c0 80ab 	blt.w	80125ce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	695b      	ldr	r3, [r3, #20]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d004      	beq.n	801248e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012486:	3304      	adds	r3, #4
 8012488:	4618      	mov	r0, r3
 801248a:	f7fd fdab 	bl	800ffe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801248e:	463b      	mov	r3, r7
 8012490:	4618      	mov	r0, r3
 8012492:	f7ff ff6b 	bl	801236c <prvSampleTimeNow>
 8012496:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b09      	cmp	r3, #9
 801249c:	f200 8096 	bhi.w	80125cc <prvProcessReceivedCommands+0x19c>
 80124a0:	a201      	add	r2, pc, #4	; (adr r2, 80124a8 <prvProcessReceivedCommands+0x78>)
 80124a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a6:	bf00      	nop
 80124a8:	080124d1 	.word	0x080124d1
 80124ac:	080124d1 	.word	0x080124d1
 80124b0:	080124d1 	.word	0x080124d1
 80124b4:	08012545 	.word	0x08012545
 80124b8:	08012559 	.word	0x08012559
 80124bc:	080125a3 	.word	0x080125a3
 80124c0:	080124d1 	.word	0x080124d1
 80124c4:	080124d1 	.word	0x080124d1
 80124c8:	08012545 	.word	0x08012545
 80124cc:	08012559 	.word	0x08012559
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80124d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124d6:	f043 0301 	orr.w	r3, r3, #1
 80124da:	b2da      	uxtb	r2, r3
 80124dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e6:	699b      	ldr	r3, [r3, #24]
 80124e8:	18d1      	adds	r1, r2, r3
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124f0:	f7ff ff5c 	bl	80123ac <prvInsertTimerInActiveList>
 80124f4:	4603      	mov	r3, r0
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d069      	beq.n	80125ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fc:	6a1b      	ldr	r3, [r3, #32]
 80124fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012500:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012508:	f003 0304 	and.w	r3, r3, #4
 801250c:	2b00      	cmp	r3, #0
 801250e:	d05e      	beq.n	80125ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012510:	68ba      	ldr	r2, [r7, #8]
 8012512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012514:	699b      	ldr	r3, [r3, #24]
 8012516:	441a      	add	r2, r3
 8012518:	2300      	movs	r3, #0
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	2300      	movs	r3, #0
 801251e:	2100      	movs	r1, #0
 8012520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012522:	f7ff fe05 	bl	8012130 <xTimerGenericCommand>
 8012526:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012528:	6a3b      	ldr	r3, [r7, #32]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d14f      	bne.n	80125ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012532:	f383 8811 	msr	BASEPRI, r3
 8012536:	f3bf 8f6f 	isb	sy
 801253a:	f3bf 8f4f 	dsb	sy
 801253e:	61bb      	str	r3, [r7, #24]
}
 8012540:	bf00      	nop
 8012542:	e7fe      	b.n	8012542 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801254a:	f023 0301 	bic.w	r3, r3, #1
 801254e:	b2da      	uxtb	r2, r3
 8012550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012556:	e03a      	b.n	80125ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801255e:	f043 0301 	orr.w	r3, r3, #1
 8012562:	b2da      	uxtb	r2, r3
 8012564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012572:	699b      	ldr	r3, [r3, #24]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d10a      	bne.n	801258e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801257c:	f383 8811 	msr	BASEPRI, r3
 8012580:	f3bf 8f6f 	isb	sy
 8012584:	f3bf 8f4f 	dsb	sy
 8012588:	617b      	str	r3, [r7, #20]
}
 801258a:	bf00      	nop
 801258c:	e7fe      	b.n	801258c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012590:	699a      	ldr	r2, [r3, #24]
 8012592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012594:	18d1      	adds	r1, r2, r3
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801259a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801259c:	f7ff ff06 	bl	80123ac <prvInsertTimerInActiveList>
					break;
 80125a0:	e015      	b.n	80125ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125a8:	f003 0302 	and.w	r3, r3, #2
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d103      	bne.n	80125b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80125b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125b2:	f000 fbdd 	bl	8012d70 <vPortFree>
 80125b6:	e00a      	b.n	80125ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80125b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125be:	f023 0301 	bic.w	r3, r3, #1
 80125c2:	b2da      	uxtb	r2, r3
 80125c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80125ca:	e000      	b.n	80125ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80125cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80125ce:	4b08      	ldr	r3, [pc, #32]	; (80125f0 <prvProcessReceivedCommands+0x1c0>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	1d39      	adds	r1, r7, #4
 80125d4:	2200      	movs	r2, #0
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fe f8fc 	bl	80107d4 <xQueueReceive>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f47f af2a 	bne.w	8012438 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80125e4:	bf00      	nop
 80125e6:	bf00      	nop
 80125e8:	3730      	adds	r7, #48	; 0x30
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	20001374 	.word	0x20001374

080125f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b088      	sub	sp, #32
 80125f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125fa:	e048      	b.n	801268e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125fc:	4b2d      	ldr	r3, [pc, #180]	; (80126b4 <prvSwitchTimerLists+0xc0>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012606:	4b2b      	ldr	r3, [pc, #172]	; (80126b4 <prvSwitchTimerLists+0xc0>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	3304      	adds	r3, #4
 8012614:	4618      	mov	r0, r3
 8012616:	f7fd fce5 	bl	800ffe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	6a1b      	ldr	r3, [r3, #32]
 801261e:	68f8      	ldr	r0, [r7, #12]
 8012620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012628:	f003 0304 	and.w	r3, r3, #4
 801262c:	2b00      	cmp	r3, #0
 801262e:	d02e      	beq.n	801268e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	699b      	ldr	r3, [r3, #24]
 8012634:	693a      	ldr	r2, [r7, #16]
 8012636:	4413      	add	r3, r2
 8012638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801263a:	68ba      	ldr	r2, [r7, #8]
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	429a      	cmp	r2, r3
 8012640:	d90e      	bls.n	8012660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	68ba      	ldr	r2, [r7, #8]
 8012646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801264e:	4b19      	ldr	r3, [pc, #100]	; (80126b4 <prvSwitchTimerLists+0xc0>)
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	3304      	adds	r3, #4
 8012656:	4619      	mov	r1, r3
 8012658:	4610      	mov	r0, r2
 801265a:	f7fd fc8a 	bl	800ff72 <vListInsert>
 801265e:	e016      	b.n	801268e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012660:	2300      	movs	r3, #0
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	2300      	movs	r3, #0
 8012666:	693a      	ldr	r2, [r7, #16]
 8012668:	2100      	movs	r1, #0
 801266a:	68f8      	ldr	r0, [r7, #12]
 801266c:	f7ff fd60 	bl	8012130 <xTimerGenericCommand>
 8012670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d10a      	bne.n	801268e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267c:	f383 8811 	msr	BASEPRI, r3
 8012680:	f3bf 8f6f 	isb	sy
 8012684:	f3bf 8f4f 	dsb	sy
 8012688:	603b      	str	r3, [r7, #0]
}
 801268a:	bf00      	nop
 801268c:	e7fe      	b.n	801268c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801268e:	4b09      	ldr	r3, [pc, #36]	; (80126b4 <prvSwitchTimerLists+0xc0>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d1b1      	bne.n	80125fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012698:	4b06      	ldr	r3, [pc, #24]	; (80126b4 <prvSwitchTimerLists+0xc0>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801269e:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <prvSwitchTimerLists+0xc4>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	4a04      	ldr	r2, [pc, #16]	; (80126b4 <prvSwitchTimerLists+0xc0>)
 80126a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80126a6:	4a04      	ldr	r2, [pc, #16]	; (80126b8 <prvSwitchTimerLists+0xc4>)
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	6013      	str	r3, [r2, #0]
}
 80126ac:	bf00      	nop
 80126ae:	3718      	adds	r7, #24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	2000136c 	.word	0x2000136c
 80126b8:	20001370 	.word	0x20001370

080126bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80126c2:	f000 f967 	bl	8012994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80126c6:	4b15      	ldr	r3, [pc, #84]	; (801271c <prvCheckForValidListAndQueue+0x60>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d120      	bne.n	8012710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80126ce:	4814      	ldr	r0, [pc, #80]	; (8012720 <prvCheckForValidListAndQueue+0x64>)
 80126d0:	f7fd fbfe 	bl	800fed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80126d4:	4813      	ldr	r0, [pc, #76]	; (8012724 <prvCheckForValidListAndQueue+0x68>)
 80126d6:	f7fd fbfb 	bl	800fed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80126da:	4b13      	ldr	r3, [pc, #76]	; (8012728 <prvCheckForValidListAndQueue+0x6c>)
 80126dc:	4a10      	ldr	r2, [pc, #64]	; (8012720 <prvCheckForValidListAndQueue+0x64>)
 80126de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80126e0:	4b12      	ldr	r3, [pc, #72]	; (801272c <prvCheckForValidListAndQueue+0x70>)
 80126e2:	4a10      	ldr	r2, [pc, #64]	; (8012724 <prvCheckForValidListAndQueue+0x68>)
 80126e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80126e6:	2300      	movs	r3, #0
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	4b11      	ldr	r3, [pc, #68]	; (8012730 <prvCheckForValidListAndQueue+0x74>)
 80126ec:	4a11      	ldr	r2, [pc, #68]	; (8012734 <prvCheckForValidListAndQueue+0x78>)
 80126ee:	2110      	movs	r1, #16
 80126f0:	200a      	movs	r0, #10
 80126f2:	f7fd fd09 	bl	8010108 <xQueueGenericCreateStatic>
 80126f6:	4603      	mov	r3, r0
 80126f8:	4a08      	ldr	r2, [pc, #32]	; (801271c <prvCheckForValidListAndQueue+0x60>)
 80126fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80126fc:	4b07      	ldr	r3, [pc, #28]	; (801271c <prvCheckForValidListAndQueue+0x60>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d005      	beq.n	8012710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012704:	4b05      	ldr	r3, [pc, #20]	; (801271c <prvCheckForValidListAndQueue+0x60>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	490b      	ldr	r1, [pc, #44]	; (8012738 <prvCheckForValidListAndQueue+0x7c>)
 801270a:	4618      	mov	r0, r3
 801270c:	f7fe fc1a 	bl	8010f44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012710:	f000 f970 	bl	80129f4 <vPortExitCritical>
}
 8012714:	bf00      	nop
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	20001374 	.word	0x20001374
 8012720:	20001344 	.word	0x20001344
 8012724:	20001358 	.word	0x20001358
 8012728:	2000136c 	.word	0x2000136c
 801272c:	20001370 	.word	0x20001370
 8012730:	20001420 	.word	0x20001420
 8012734:	20001380 	.word	0x20001380
 8012738:	080142c8 	.word	0x080142c8

0801273c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	3b04      	subs	r3, #4
 801274c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	3b04      	subs	r3, #4
 801275a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	f023 0201 	bic.w	r2, r3, #1
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3b04      	subs	r3, #4
 801276a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801276c:	4a0c      	ldr	r2, [pc, #48]	; (80127a0 <pxPortInitialiseStack+0x64>)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3b14      	subs	r3, #20
 8012776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	3b04      	subs	r3, #4
 8012782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f06f 0202 	mvn.w	r2, #2
 801278a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	3b20      	subs	r3, #32
 8012790:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012792:	68fb      	ldr	r3, [r7, #12]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3714      	adds	r7, #20
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr
 80127a0:	080127a5 	.word	0x080127a5

080127a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80127a4:	b480      	push	{r7}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80127ae:	4b12      	ldr	r3, [pc, #72]	; (80127f8 <prvTaskExitError+0x54>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127b6:	d00a      	beq.n	80127ce <prvTaskExitError+0x2a>
	__asm volatile
 80127b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	60fb      	str	r3, [r7, #12]
}
 80127ca:	bf00      	nop
 80127cc:	e7fe      	b.n	80127cc <prvTaskExitError+0x28>
	__asm volatile
 80127ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	60bb      	str	r3, [r7, #8]
}
 80127e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80127e2:	bf00      	nop
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d0fc      	beq.n	80127e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80127ea:	bf00      	nop
 80127ec:	bf00      	nop
 80127ee:	3714      	adds	r7, #20
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr
 80127f8:	20000090 	.word	0x20000090
 80127fc:	00000000 	.word	0x00000000

08012800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012800:	4b07      	ldr	r3, [pc, #28]	; (8012820 <pxCurrentTCBConst2>)
 8012802:	6819      	ldr	r1, [r3, #0]
 8012804:	6808      	ldr	r0, [r1, #0]
 8012806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801280a:	f380 8809 	msr	PSP, r0
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f04f 0000 	mov.w	r0, #0
 8012816:	f380 8811 	msr	BASEPRI, r0
 801281a:	4770      	bx	lr
 801281c:	f3af 8000 	nop.w

08012820 <pxCurrentTCBConst2>:
 8012820:	20000e44 	.word	0x20000e44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012824:	bf00      	nop
 8012826:	bf00      	nop

08012828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012828:	4808      	ldr	r0, [pc, #32]	; (801284c <prvPortStartFirstTask+0x24>)
 801282a:	6800      	ldr	r0, [r0, #0]
 801282c:	6800      	ldr	r0, [r0, #0]
 801282e:	f380 8808 	msr	MSP, r0
 8012832:	f04f 0000 	mov.w	r0, #0
 8012836:	f380 8814 	msr	CONTROL, r0
 801283a:	b662      	cpsie	i
 801283c:	b661      	cpsie	f
 801283e:	f3bf 8f4f 	dsb	sy
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	df00      	svc	0
 8012848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801284a:	bf00      	nop
 801284c:	e000ed08 	.word	0xe000ed08

08012850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012856:	4b46      	ldr	r3, [pc, #280]	; (8012970 <xPortStartScheduler+0x120>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	4a46      	ldr	r2, [pc, #280]	; (8012974 <xPortStartScheduler+0x124>)
 801285c:	4293      	cmp	r3, r2
 801285e:	d10a      	bne.n	8012876 <xPortStartScheduler+0x26>
	__asm volatile
 8012860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012864:	f383 8811 	msr	BASEPRI, r3
 8012868:	f3bf 8f6f 	isb	sy
 801286c:	f3bf 8f4f 	dsb	sy
 8012870:	613b      	str	r3, [r7, #16]
}
 8012872:	bf00      	nop
 8012874:	e7fe      	b.n	8012874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012876:	4b3e      	ldr	r3, [pc, #248]	; (8012970 <xPortStartScheduler+0x120>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a3f      	ldr	r2, [pc, #252]	; (8012978 <xPortStartScheduler+0x128>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d10a      	bne.n	8012896 <xPortStartScheduler+0x46>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	60fb      	str	r3, [r7, #12]
}
 8012892:	bf00      	nop
 8012894:	e7fe      	b.n	8012894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012896:	4b39      	ldr	r3, [pc, #228]	; (801297c <xPortStartScheduler+0x12c>)
 8012898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	22ff      	movs	r2, #255	; 0xff
 80128a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80128b0:	78fb      	ldrb	r3, [r7, #3]
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80128b8:	b2da      	uxtb	r2, r3
 80128ba:	4b31      	ldr	r3, [pc, #196]	; (8012980 <xPortStartScheduler+0x130>)
 80128bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80128be:	4b31      	ldr	r3, [pc, #196]	; (8012984 <xPortStartScheduler+0x134>)
 80128c0:	2207      	movs	r2, #7
 80128c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128c4:	e009      	b.n	80128da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80128c6:	4b2f      	ldr	r3, [pc, #188]	; (8012984 <xPortStartScheduler+0x134>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	3b01      	subs	r3, #1
 80128cc:	4a2d      	ldr	r2, [pc, #180]	; (8012984 <xPortStartScheduler+0x134>)
 80128ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80128d0:	78fb      	ldrb	r3, [r7, #3]
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	005b      	lsls	r3, r3, #1
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128da:	78fb      	ldrb	r3, [r7, #3]
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128e2:	2b80      	cmp	r3, #128	; 0x80
 80128e4:	d0ef      	beq.n	80128c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80128e6:	4b27      	ldr	r3, [pc, #156]	; (8012984 <xPortStartScheduler+0x134>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f1c3 0307 	rsb	r3, r3, #7
 80128ee:	2b04      	cmp	r3, #4
 80128f0:	d00a      	beq.n	8012908 <xPortStartScheduler+0xb8>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	60bb      	str	r3, [r7, #8]
}
 8012904:	bf00      	nop
 8012906:	e7fe      	b.n	8012906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012908:	4b1e      	ldr	r3, [pc, #120]	; (8012984 <xPortStartScheduler+0x134>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	021b      	lsls	r3, r3, #8
 801290e:	4a1d      	ldr	r2, [pc, #116]	; (8012984 <xPortStartScheduler+0x134>)
 8012910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012912:	4b1c      	ldr	r3, [pc, #112]	; (8012984 <xPortStartScheduler+0x134>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801291a:	4a1a      	ldr	r2, [pc, #104]	; (8012984 <xPortStartScheduler+0x134>)
 801291c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	b2da      	uxtb	r2, r3
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012926:	4b18      	ldr	r3, [pc, #96]	; (8012988 <xPortStartScheduler+0x138>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4a17      	ldr	r2, [pc, #92]	; (8012988 <xPortStartScheduler+0x138>)
 801292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012932:	4b15      	ldr	r3, [pc, #84]	; (8012988 <xPortStartScheduler+0x138>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a14      	ldr	r2, [pc, #80]	; (8012988 <xPortStartScheduler+0x138>)
 8012938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801293c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801293e:	f000 f8dd 	bl	8012afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012942:	4b12      	ldr	r3, [pc, #72]	; (801298c <xPortStartScheduler+0x13c>)
 8012944:	2200      	movs	r2, #0
 8012946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012948:	f000 f8fc 	bl	8012b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801294c:	4b10      	ldr	r3, [pc, #64]	; (8012990 <xPortStartScheduler+0x140>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4a0f      	ldr	r2, [pc, #60]	; (8012990 <xPortStartScheduler+0x140>)
 8012952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012958:	f7ff ff66 	bl	8012828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801295c:	f7fe ff4c 	bl	80117f8 <vTaskSwitchContext>
	prvTaskExitError();
 8012960:	f7ff ff20 	bl	80127a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012964:	2300      	movs	r3, #0
}
 8012966:	4618      	mov	r0, r3
 8012968:	3718      	adds	r7, #24
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	e000ed00 	.word	0xe000ed00
 8012974:	410fc271 	.word	0x410fc271
 8012978:	410fc270 	.word	0x410fc270
 801297c:	e000e400 	.word	0xe000e400
 8012980:	20001470 	.word	0x20001470
 8012984:	20001474 	.word	0x20001474
 8012988:	e000ed20 	.word	0xe000ed20
 801298c:	20000090 	.word	0x20000090
 8012990:	e000ef34 	.word	0xe000ef34

08012994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
	__asm volatile
 801299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299e:	f383 8811 	msr	BASEPRI, r3
 80129a2:	f3bf 8f6f 	isb	sy
 80129a6:	f3bf 8f4f 	dsb	sy
 80129aa:	607b      	str	r3, [r7, #4]
}
 80129ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80129ae:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <vPortEnterCritical+0x58>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	3301      	adds	r3, #1
 80129b4:	4a0d      	ldr	r2, [pc, #52]	; (80129ec <vPortEnterCritical+0x58>)
 80129b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80129b8:	4b0c      	ldr	r3, [pc, #48]	; (80129ec <vPortEnterCritical+0x58>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d10f      	bne.n	80129e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129c0:	4b0b      	ldr	r3, [pc, #44]	; (80129f0 <vPortEnterCritical+0x5c>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00a      	beq.n	80129e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80129ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ce:	f383 8811 	msr	BASEPRI, r3
 80129d2:	f3bf 8f6f 	isb	sy
 80129d6:	f3bf 8f4f 	dsb	sy
 80129da:	603b      	str	r3, [r7, #0]
}
 80129dc:	bf00      	nop
 80129de:	e7fe      	b.n	80129de <vPortEnterCritical+0x4a>
	}
}
 80129e0:	bf00      	nop
 80129e2:	370c      	adds	r7, #12
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	20000090 	.word	0x20000090
 80129f0:	e000ed04 	.word	0xe000ed04

080129f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80129fa:	4b12      	ldr	r3, [pc, #72]	; (8012a44 <vPortExitCritical+0x50>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d10a      	bne.n	8012a18 <vPortExitCritical+0x24>
	__asm volatile
 8012a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a06:	f383 8811 	msr	BASEPRI, r3
 8012a0a:	f3bf 8f6f 	isb	sy
 8012a0e:	f3bf 8f4f 	dsb	sy
 8012a12:	607b      	str	r3, [r7, #4]
}
 8012a14:	bf00      	nop
 8012a16:	e7fe      	b.n	8012a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012a18:	4b0a      	ldr	r3, [pc, #40]	; (8012a44 <vPortExitCritical+0x50>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	4a09      	ldr	r2, [pc, #36]	; (8012a44 <vPortExitCritical+0x50>)
 8012a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a22:	4b08      	ldr	r3, [pc, #32]	; (8012a44 <vPortExitCritical+0x50>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d105      	bne.n	8012a36 <vPortExitCritical+0x42>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	f383 8811 	msr	BASEPRI, r3
}
 8012a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012a36:	bf00      	nop
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	20000090 	.word	0x20000090
	...

08012a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a50:	f3ef 8009 	mrs	r0, PSP
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	4b15      	ldr	r3, [pc, #84]	; (8012ab0 <pxCurrentTCBConst>)
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	f01e 0f10 	tst.w	lr, #16
 8012a60:	bf08      	it	eq
 8012a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6a:	6010      	str	r0, [r2, #0]
 8012a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a74:	f380 8811 	msr	BASEPRI, r0
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	f3bf 8f6f 	isb	sy
 8012a80:	f7fe feba 	bl	80117f8 <vTaskSwitchContext>
 8012a84:	f04f 0000 	mov.w	r0, #0
 8012a88:	f380 8811 	msr	BASEPRI, r0
 8012a8c:	bc09      	pop	{r0, r3}
 8012a8e:	6819      	ldr	r1, [r3, #0]
 8012a90:	6808      	ldr	r0, [r1, #0]
 8012a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a96:	f01e 0f10 	tst.w	lr, #16
 8012a9a:	bf08      	it	eq
 8012a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012aa0:	f380 8809 	msr	PSP, r0
 8012aa4:	f3bf 8f6f 	isb	sy
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	f3af 8000 	nop.w

08012ab0 <pxCurrentTCBConst>:
 8012ab0:	20000e44 	.word	0x20000e44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ab4:	bf00      	nop
 8012ab6:	bf00      	nop

08012ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
	__asm volatile
 8012abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	607b      	str	r3, [r7, #4]
}
 8012ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012ad2:	f7fe fdd7 	bl	8011684 <xTaskIncrementTick>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d003      	beq.n	8012ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012adc:	4b06      	ldr	r3, [pc, #24]	; (8012af8 <xPortSysTickHandler+0x40>)
 8012ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ae2:	601a      	str	r2, [r3, #0]
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	f383 8811 	msr	BASEPRI, r3
}
 8012aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012af0:	bf00      	nop
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	e000ed04 	.word	0xe000ed04

08012afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012afc:	b480      	push	{r7}
 8012afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012b00:	4b0b      	ldr	r3, [pc, #44]	; (8012b30 <vPortSetupTimerInterrupt+0x34>)
 8012b02:	2200      	movs	r2, #0
 8012b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012b06:	4b0b      	ldr	r3, [pc, #44]	; (8012b34 <vPortSetupTimerInterrupt+0x38>)
 8012b08:	2200      	movs	r2, #0
 8012b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012b0c:	4b0a      	ldr	r3, [pc, #40]	; (8012b38 <vPortSetupTimerInterrupt+0x3c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a0a      	ldr	r2, [pc, #40]	; (8012b3c <vPortSetupTimerInterrupt+0x40>)
 8012b12:	fba2 2303 	umull	r2, r3, r2, r3
 8012b16:	099b      	lsrs	r3, r3, #6
 8012b18:	4a09      	ldr	r2, [pc, #36]	; (8012b40 <vPortSetupTimerInterrupt+0x44>)
 8012b1a:	3b01      	subs	r3, #1
 8012b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012b1e:	4b04      	ldr	r3, [pc, #16]	; (8012b30 <vPortSetupTimerInterrupt+0x34>)
 8012b20:	2207      	movs	r2, #7
 8012b22:	601a      	str	r2, [r3, #0]
}
 8012b24:	bf00      	nop
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	e000e010 	.word	0xe000e010
 8012b34:	e000e018 	.word	0xe000e018
 8012b38:	20000010 	.word	0x20000010
 8012b3c:	10624dd3 	.word	0x10624dd3
 8012b40:	e000e014 	.word	0xe000e014

08012b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b54 <vPortEnableVFP+0x10>
 8012b48:	6801      	ldr	r1, [r0, #0]
 8012b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b4e:	6001      	str	r1, [r0, #0]
 8012b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b52:	bf00      	nop
 8012b54:	e000ed88 	.word	0xe000ed88

08012b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b5e:	f3ef 8305 	mrs	r3, IPSR
 8012b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2b0f      	cmp	r3, #15
 8012b68:	d914      	bls.n	8012b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b6a:	4a17      	ldr	r2, [pc, #92]	; (8012bc8 <vPortValidateInterruptPriority+0x70>)
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	4413      	add	r3, r2
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b74:	4b15      	ldr	r3, [pc, #84]	; (8012bcc <vPortValidateInterruptPriority+0x74>)
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	7afa      	ldrb	r2, [r7, #11]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d20a      	bcs.n	8012b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b82:	f383 8811 	msr	BASEPRI, r3
 8012b86:	f3bf 8f6f 	isb	sy
 8012b8a:	f3bf 8f4f 	dsb	sy
 8012b8e:	607b      	str	r3, [r7, #4]
}
 8012b90:	bf00      	nop
 8012b92:	e7fe      	b.n	8012b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b94:	4b0e      	ldr	r3, [pc, #56]	; (8012bd0 <vPortValidateInterruptPriority+0x78>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	; (8012bd4 <vPortValidateInterruptPriority+0x7c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d90a      	bls.n	8012bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba8:	f383 8811 	msr	BASEPRI, r3
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	603b      	str	r3, [r7, #0]
}
 8012bb6:	bf00      	nop
 8012bb8:	e7fe      	b.n	8012bb8 <vPortValidateInterruptPriority+0x60>
	}
 8012bba:	bf00      	nop
 8012bbc:	3714      	adds	r7, #20
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr
 8012bc6:	bf00      	nop
 8012bc8:	e000e3f0 	.word	0xe000e3f0
 8012bcc:	20001470 	.word	0x20001470
 8012bd0:	e000ed0c 	.word	0xe000ed0c
 8012bd4:	20001474 	.word	0x20001474

08012bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b08a      	sub	sp, #40	; 0x28
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012be0:	2300      	movs	r3, #0
 8012be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012be4:	f7fe fc92 	bl	801150c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012be8:	4b5b      	ldr	r3, [pc, #364]	; (8012d58 <pvPortMalloc+0x180>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d101      	bne.n	8012bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012bf0:	f000 f920 	bl	8012e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012bf4:	4b59      	ldr	r3, [pc, #356]	; (8012d5c <pvPortMalloc+0x184>)
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	4013      	ands	r3, r2
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	f040 8093 	bne.w	8012d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d01d      	beq.n	8012c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012c08:	2208      	movs	r2, #8
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f003 0307 	and.w	r3, r3, #7
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d014      	beq.n	8012c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f023 0307 	bic.w	r3, r3, #7
 8012c20:	3308      	adds	r3, #8
 8012c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f003 0307 	and.w	r3, r3, #7
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d00a      	beq.n	8012c44 <pvPortMalloc+0x6c>
	__asm volatile
 8012c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c32:	f383 8811 	msr	BASEPRI, r3
 8012c36:	f3bf 8f6f 	isb	sy
 8012c3a:	f3bf 8f4f 	dsb	sy
 8012c3e:	617b      	str	r3, [r7, #20]
}
 8012c40:	bf00      	nop
 8012c42:	e7fe      	b.n	8012c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d06e      	beq.n	8012d28 <pvPortMalloc+0x150>
 8012c4a:	4b45      	ldr	r3, [pc, #276]	; (8012d60 <pvPortMalloc+0x188>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d869      	bhi.n	8012d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012c54:	4b43      	ldr	r3, [pc, #268]	; (8012d64 <pvPortMalloc+0x18c>)
 8012c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012c58:	4b42      	ldr	r3, [pc, #264]	; (8012d64 <pvPortMalloc+0x18c>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c5e:	e004      	b.n	8012c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d903      	bls.n	8012c7c <pvPortMalloc+0xa4>
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1f1      	bne.n	8012c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012c7c:	4b36      	ldr	r3, [pc, #216]	; (8012d58 <pvPortMalloc+0x180>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d050      	beq.n	8012d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c86:	6a3b      	ldr	r3, [r7, #32]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	2208      	movs	r2, #8
 8012c8c:	4413      	add	r3, r2
 8012c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	6a3b      	ldr	r3, [r7, #32]
 8012c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	685a      	ldr	r2, [r3, #4]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	1ad2      	subs	r2, r2, r3
 8012ca0:	2308      	movs	r3, #8
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d91f      	bls.n	8012ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	4413      	add	r3, r2
 8012cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	f003 0307 	and.w	r3, r3, #7
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00a      	beq.n	8012cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8012cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cbe:	f383 8811 	msr	BASEPRI, r3
 8012cc2:	f3bf 8f6f 	isb	sy
 8012cc6:	f3bf 8f4f 	dsb	sy
 8012cca:	613b      	str	r3, [r7, #16]
}
 8012ccc:	bf00      	nop
 8012cce:	e7fe      	b.n	8012cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	685a      	ldr	r2, [r3, #4]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	1ad2      	subs	r2, r2, r3
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012ce2:	69b8      	ldr	r0, [r7, #24]
 8012ce4:	f000 f908 	bl	8012ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012ce8:	4b1d      	ldr	r3, [pc, #116]	; (8012d60 <pvPortMalloc+0x188>)
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	1ad3      	subs	r3, r2, r3
 8012cf2:	4a1b      	ldr	r2, [pc, #108]	; (8012d60 <pvPortMalloc+0x188>)
 8012cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012cf6:	4b1a      	ldr	r3, [pc, #104]	; (8012d60 <pvPortMalloc+0x188>)
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	4b1b      	ldr	r3, [pc, #108]	; (8012d68 <pvPortMalloc+0x190>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d203      	bcs.n	8012d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012d02:	4b17      	ldr	r3, [pc, #92]	; (8012d60 <pvPortMalloc+0x188>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	4a18      	ldr	r2, [pc, #96]	; (8012d68 <pvPortMalloc+0x190>)
 8012d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0c:	685a      	ldr	r2, [r3, #4]
 8012d0e:	4b13      	ldr	r3, [pc, #76]	; (8012d5c <pvPortMalloc+0x184>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	431a      	orrs	r2, r3
 8012d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012d1e:	4b13      	ldr	r3, [pc, #76]	; (8012d6c <pvPortMalloc+0x194>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3301      	adds	r3, #1
 8012d24:	4a11      	ldr	r2, [pc, #68]	; (8012d6c <pvPortMalloc+0x194>)
 8012d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012d28:	f7fe fbfe 	bl	8011528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	f003 0307 	and.w	r3, r3, #7
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00a      	beq.n	8012d4c <pvPortMalloc+0x174>
	__asm volatile
 8012d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3a:	f383 8811 	msr	BASEPRI, r3
 8012d3e:	f3bf 8f6f 	isb	sy
 8012d42:	f3bf 8f4f 	dsb	sy
 8012d46:	60fb      	str	r3, [r7, #12]
}
 8012d48:	bf00      	nop
 8012d4a:	e7fe      	b.n	8012d4a <pvPortMalloc+0x172>
	return pvReturn;
 8012d4c:	69fb      	ldr	r3, [r7, #28]
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3728      	adds	r7, #40	; 0x28
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	20005080 	.word	0x20005080
 8012d5c:	20005094 	.word	0x20005094
 8012d60:	20005084 	.word	0x20005084
 8012d64:	20005078 	.word	0x20005078
 8012d68:	20005088 	.word	0x20005088
 8012d6c:	2000508c 	.word	0x2000508c

08012d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b086      	sub	sp, #24
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d04d      	beq.n	8012e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d82:	2308      	movs	r3, #8
 8012d84:	425b      	negs	r3, r3
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	4413      	add	r3, r2
 8012d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	685a      	ldr	r2, [r3, #4]
 8012d94:	4b24      	ldr	r3, [pc, #144]	; (8012e28 <vPortFree+0xb8>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4013      	ands	r3, r2
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10a      	bne.n	8012db4 <vPortFree+0x44>
	__asm volatile
 8012d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da2:	f383 8811 	msr	BASEPRI, r3
 8012da6:	f3bf 8f6f 	isb	sy
 8012daa:	f3bf 8f4f 	dsb	sy
 8012dae:	60fb      	str	r3, [r7, #12]
}
 8012db0:	bf00      	nop
 8012db2:	e7fe      	b.n	8012db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d00a      	beq.n	8012dd2 <vPortFree+0x62>
	__asm volatile
 8012dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc0:	f383 8811 	msr	BASEPRI, r3
 8012dc4:	f3bf 8f6f 	isb	sy
 8012dc8:	f3bf 8f4f 	dsb	sy
 8012dcc:	60bb      	str	r3, [r7, #8]
}
 8012dce:	bf00      	nop
 8012dd0:	e7fe      	b.n	8012dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	685a      	ldr	r2, [r3, #4]
 8012dd6:	4b14      	ldr	r3, [pc, #80]	; (8012e28 <vPortFree+0xb8>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	4013      	ands	r3, r2
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d01e      	beq.n	8012e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d11a      	bne.n	8012e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	685a      	ldr	r2, [r3, #4]
 8012dec:	4b0e      	ldr	r3, [pc, #56]	; (8012e28 <vPortFree+0xb8>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	43db      	mvns	r3, r3
 8012df2:	401a      	ands	r2, r3
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012df8:	f7fe fb88 	bl	801150c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	685a      	ldr	r2, [r3, #4]
 8012e00:	4b0a      	ldr	r3, [pc, #40]	; (8012e2c <vPortFree+0xbc>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4413      	add	r3, r2
 8012e06:	4a09      	ldr	r2, [pc, #36]	; (8012e2c <vPortFree+0xbc>)
 8012e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012e0a:	6938      	ldr	r0, [r7, #16]
 8012e0c:	f000 f874 	bl	8012ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012e10:	4b07      	ldr	r3, [pc, #28]	; (8012e30 <vPortFree+0xc0>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	3301      	adds	r3, #1
 8012e16:	4a06      	ldr	r2, [pc, #24]	; (8012e30 <vPortFree+0xc0>)
 8012e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012e1a:	f7fe fb85 	bl	8011528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012e1e:	bf00      	nop
 8012e20:	3718      	adds	r7, #24
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	20005094 	.word	0x20005094
 8012e2c:	20005084 	.word	0x20005084
 8012e30:	20005090 	.word	0x20005090

08012e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012e40:	4b27      	ldr	r3, [pc, #156]	; (8012ee0 <prvHeapInit+0xac>)
 8012e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f003 0307 	and.w	r3, r3, #7
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00c      	beq.n	8012e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	3307      	adds	r3, #7
 8012e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f023 0307 	bic.w	r3, r3, #7
 8012e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012e5c:	68ba      	ldr	r2, [r7, #8]
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	1ad3      	subs	r3, r2, r3
 8012e62:	4a1f      	ldr	r2, [pc, #124]	; (8012ee0 <prvHeapInit+0xac>)
 8012e64:	4413      	add	r3, r2
 8012e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e6c:	4a1d      	ldr	r2, [pc, #116]	; (8012ee4 <prvHeapInit+0xb0>)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012e72:	4b1c      	ldr	r3, [pc, #112]	; (8012ee4 <prvHeapInit+0xb0>)
 8012e74:	2200      	movs	r2, #0
 8012e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012e80:	2208      	movs	r2, #8
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	1a9b      	subs	r3, r3, r2
 8012e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f023 0307 	bic.w	r3, r3, #7
 8012e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	4a15      	ldr	r2, [pc, #84]	; (8012ee8 <prvHeapInit+0xb4>)
 8012e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e96:	4b14      	ldr	r3, [pc, #80]	; (8012ee8 <prvHeapInit+0xb4>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e9e:	4b12      	ldr	r3, [pc, #72]	; (8012ee8 <prvHeapInit+0xb4>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	1ad2      	subs	r2, r2, r3
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012eb4:	4b0c      	ldr	r3, [pc, #48]	; (8012ee8 <prvHeapInit+0xb4>)
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	4a0a      	ldr	r2, [pc, #40]	; (8012eec <prvHeapInit+0xb8>)
 8012ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	4a09      	ldr	r2, [pc, #36]	; (8012ef0 <prvHeapInit+0xbc>)
 8012eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ecc:	4b09      	ldr	r3, [pc, #36]	; (8012ef4 <prvHeapInit+0xc0>)
 8012ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ed2:	601a      	str	r2, [r3, #0]
}
 8012ed4:	bf00      	nop
 8012ed6:	3714      	adds	r7, #20
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr
 8012ee0:	20001478 	.word	0x20001478
 8012ee4:	20005078 	.word	0x20005078
 8012ee8:	20005080 	.word	0x20005080
 8012eec:	20005088 	.word	0x20005088
 8012ef0:	20005084 	.word	0x20005084
 8012ef4:	20005094 	.word	0x20005094

08012ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b085      	sub	sp, #20
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f00:	4b28      	ldr	r3, [pc, #160]	; (8012fa4 <prvInsertBlockIntoFreeList+0xac>)
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	e002      	b.n	8012f0c <prvInsertBlockIntoFreeList+0x14>
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	60fb      	str	r3, [r7, #12]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d8f7      	bhi.n	8012f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	68ba      	ldr	r2, [r7, #8]
 8012f20:	4413      	add	r3, r2
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d108      	bne.n	8012f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	685a      	ldr	r2, [r3, #4]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	441a      	add	r2, r3
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	68ba      	ldr	r2, [r7, #8]
 8012f44:	441a      	add	r2, r3
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d118      	bne.n	8012f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	4b15      	ldr	r3, [pc, #84]	; (8012fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d00d      	beq.n	8012f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	685a      	ldr	r2, [r3, #4]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	441a      	add	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	601a      	str	r2, [r3, #0]
 8012f74:	e008      	b.n	8012f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f76:	4b0c      	ldr	r3, [pc, #48]	; (8012fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	601a      	str	r2, [r3, #0]
 8012f7e:	e003      	b.n	8012f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d002      	beq.n	8012f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f96:	bf00      	nop
 8012f98:	3714      	adds	r7, #20
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
 8012fa2:	bf00      	nop
 8012fa4:	20005078 	.word	0x20005078
 8012fa8:	20005080 	.word	0x20005080

08012fac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	490e      	ldr	r1, [pc, #56]	; (8012fec <MX_USB_HOST_Init+0x40>)
 8012fb4:	480e      	ldr	r0, [pc, #56]	; (8012ff0 <MX_USB_HOST_Init+0x44>)
 8012fb6:	f7fa fca9 	bl	800d90c <USBH_Init>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d001      	beq.n	8012fc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012fc0:	f7ef f98c 	bl	80022dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012fc4:	490b      	ldr	r1, [pc, #44]	; (8012ff4 <MX_USB_HOST_Init+0x48>)
 8012fc6:	480a      	ldr	r0, [pc, #40]	; (8012ff0 <MX_USB_HOST_Init+0x44>)
 8012fc8:	f7fa fd6f 	bl	800daaa <USBH_RegisterClass>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d001      	beq.n	8012fd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012fd2:	f7ef f983 	bl	80022dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012fd6:	4806      	ldr	r0, [pc, #24]	; (8012ff0 <MX_USB_HOST_Init+0x44>)
 8012fd8:	f7fa fdf3 	bl	800dbc2 <USBH_Start>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d001      	beq.n	8012fe6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012fe2:	f7ef f97b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012fe6:	bf00      	nop
 8012fe8:	bd80      	pop	{r7, pc}
 8012fea:	bf00      	nop
 8012fec:	08012ff9 	.word	0x08012ff9
 8012ff0:	20005098 	.word	0x20005098
 8012ff4:	20000070 	.word	0x20000070

08012ff8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	460b      	mov	r3, r1
 8013002:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013004:	78fb      	ldrb	r3, [r7, #3]
 8013006:	3b01      	subs	r3, #1
 8013008:	2b04      	cmp	r3, #4
 801300a:	d819      	bhi.n	8013040 <USBH_UserProcess+0x48>
 801300c:	a201      	add	r2, pc, #4	; (adr r2, 8013014 <USBH_UserProcess+0x1c>)
 801300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013012:	bf00      	nop
 8013014:	08013041 	.word	0x08013041
 8013018:	08013031 	.word	0x08013031
 801301c:	08013041 	.word	0x08013041
 8013020:	08013039 	.word	0x08013039
 8013024:	08013029 	.word	0x08013029
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013028:	4b09      	ldr	r3, [pc, #36]	; (8013050 <USBH_UserProcess+0x58>)
 801302a:	2203      	movs	r2, #3
 801302c:	701a      	strb	r2, [r3, #0]
  break;
 801302e:	e008      	b.n	8013042 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013030:	4b07      	ldr	r3, [pc, #28]	; (8013050 <USBH_UserProcess+0x58>)
 8013032:	2202      	movs	r2, #2
 8013034:	701a      	strb	r2, [r3, #0]
  break;
 8013036:	e004      	b.n	8013042 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013038:	4b05      	ldr	r3, [pc, #20]	; (8013050 <USBH_UserProcess+0x58>)
 801303a:	2201      	movs	r2, #1
 801303c:	701a      	strb	r2, [r3, #0]
  break;
 801303e:	e000      	b.n	8013042 <USBH_UserProcess+0x4a>

  default:
  break;
 8013040:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013042:	bf00      	nop
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	2000547c 	.word	0x2000547c

08013054 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b0a0      	sub	sp, #128	; 0x80
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801305c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013060:	2200      	movs	r2, #0
 8013062:	601a      	str	r2, [r3, #0]
 8013064:	605a      	str	r2, [r3, #4]
 8013066:	609a      	str	r2, [r3, #8]
 8013068:	60da      	str	r2, [r3, #12]
 801306a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801306c:	f107 0314 	add.w	r3, r7, #20
 8013070:	2258      	movs	r2, #88	; 0x58
 8013072:	2100      	movs	r1, #0
 8013074:	4618      	mov	r0, r3
 8013076:	f000 fc25 	bl	80138c4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013082:	d148      	bne.n	8013116 <HAL_HCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013084:	2320      	movs	r3, #32
 8013086:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8013088:	2300      	movs	r3, #0
 801308a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801308c:	f107 0314 	add.w	r3, r7, #20
 8013090:	4618      	mov	r0, r3
 8013092:	f7f5 ff41 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d001      	beq.n	80130a0 <HAL_HCD_MspInit+0x4c>
    {
      Error_Handler();
 801309c:	f7ef f91e 	bl	80022dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80130a0:	2300      	movs	r3, #0
 80130a2:	613b      	str	r3, [r7, #16]
 80130a4:	4b1e      	ldr	r3, [pc, #120]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a8:	4a1d      	ldr	r2, [pc, #116]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130aa:	f043 0301 	orr.w	r3, r3, #1
 80130ae:	6313      	str	r3, [r2, #48]	; 0x30
 80130b0:	4b1b      	ldr	r3, [pc, #108]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130b4:	f003 0301 	and.w	r3, r3, #1
 80130b8:	613b      	str	r3, [r7, #16]
 80130ba:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80130bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80130c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130c2:	2302      	movs	r3, #2
 80130c4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130c6:	2300      	movs	r3, #0
 80130c8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130ca:	2303      	movs	r3, #3
 80130cc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80130ce:	230a      	movs	r3, #10
 80130d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80130d6:	4619      	mov	r1, r3
 80130d8:	4812      	ldr	r0, [pc, #72]	; (8013124 <HAL_HCD_MspInit+0xd0>)
 80130da:	f7f2 fb3f 	bl	800575c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80130de:	4b10      	ldr	r3, [pc, #64]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130e2:	4a0f      	ldr	r2, [pc, #60]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130e8:	6353      	str	r3, [r2, #52]	; 0x34
 80130ea:	2300      	movs	r3, #0
 80130ec:	60fb      	str	r3, [r7, #12]
 80130ee:	4b0c      	ldr	r3, [pc, #48]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130f2:	4a0b      	ldr	r2, [pc, #44]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80130f8:	6453      	str	r3, [r2, #68]	; 0x44
 80130fa:	4b09      	ldr	r3, [pc, #36]	; (8013120 <HAL_HCD_MspInit+0xcc>)
 80130fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013106:	2200      	movs	r2, #0
 8013108:	2105      	movs	r1, #5
 801310a:	2043      	movs	r0, #67	; 0x43
 801310c:	f7f1 fe18 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013110:	2043      	movs	r0, #67	; 0x43
 8013112:	f7f1 fe31 	bl	8004d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013116:	bf00      	nop
 8013118:	3780      	adds	r7, #128	; 0x80
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	40023800 	.word	0x40023800
 8013124:	40020000 	.word	0x40020000

08013128 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8013136:	4618      	mov	r0, r3
 8013138:	f7fb f9fb 	bl	800e532 <USBH_LL_IncTimer>
}
 801313c:	bf00      	nop
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8013152:	4618      	mov	r0, r3
 8013154:	f7fb fa3f 	bl	800e5d6 <USBH_LL_Connect>
}
 8013158:	bf00      	nop
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801316e:	4618      	mov	r0, r3
 8013170:	f7fb fa54 	bl	800e61c <USBH_LL_Disconnect>
}
 8013174:	bf00      	nop
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	460b      	mov	r3, r1
 8013186:	70fb      	strb	r3, [r7, #3]
 8013188:	4613      	mov	r3, r2
 801318a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8013192:	4618      	mov	r0, r3
 8013194:	f7fb fa8b 	bl	800e6ae <USBH_LL_NotifyURBChange>
#endif
}
 8013198:	bf00      	nop
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7fb f9e9 	bl	800e586 <USBH_LL_PortEnabled>
}
 80131b4:	bf00      	nop
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fb f9f5 	bl	800e5ba <USBH_LL_PortDisabled>
}
 80131d0:	bf00      	nop
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d12a      	bne.n	8013240 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80131ea:	4a18      	ldr	r2, [pc, #96]	; (801324c <USBH_LL_Init+0x74>)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	4a15      	ldr	r2, [pc, #84]	; (801324c <USBH_LL_Init+0x74>)
 80131f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80131fa:	4b14      	ldr	r3, [pc, #80]	; (801324c <USBH_LL_Init+0x74>)
 80131fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013200:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8013202:	4b12      	ldr	r3, [pc, #72]	; (801324c <USBH_LL_Init+0x74>)
 8013204:	220c      	movs	r2, #12
 8013206:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013208:	4b10      	ldr	r3, [pc, #64]	; (801324c <USBH_LL_Init+0x74>)
 801320a:	2201      	movs	r2, #1
 801320c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801320e:	4b0f      	ldr	r3, [pc, #60]	; (801324c <USBH_LL_Init+0x74>)
 8013210:	2200      	movs	r2, #0
 8013212:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013214:	4b0d      	ldr	r3, [pc, #52]	; (801324c <USBH_LL_Init+0x74>)
 8013216:	2202      	movs	r2, #2
 8013218:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801321a:	4b0c      	ldr	r3, [pc, #48]	; (801324c <USBH_LL_Init+0x74>)
 801321c:	2200      	movs	r2, #0
 801321e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013220:	480a      	ldr	r0, [pc, #40]	; (801324c <USBH_LL_Init+0x74>)
 8013222:	f7f2 fc48 	bl	8005ab6 <HAL_HCD_Init>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d001      	beq.n	8013230 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801322c:	f7ef f856 	bl	80022dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013230:	4806      	ldr	r0, [pc, #24]	; (801324c <USBH_LL_Init+0x74>)
 8013232:	f7f3 f8a9 	bl	8006388 <HAL_HCD_GetCurrentFrame>
 8013236:	4603      	mov	r3, r0
 8013238:	4619      	mov	r1, r3
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7fb f96a 	bl	800e514 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013240:	2300      	movs	r3, #0
}
 8013242:	4618      	mov	r0, r3
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	20005480 	.word	0x20005480

08013250 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b084      	sub	sp, #16
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013258:	2300      	movs	r3, #0
 801325a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801325c:	2300      	movs	r3, #0
 801325e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013266:	4618      	mov	r0, r3
 8013268:	f7f3 f816 	bl	8006298 <HAL_HCD_Start>
 801326c:	4603      	mov	r3, r0
 801326e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013270:	7bfb      	ldrb	r3, [r7, #15]
 8013272:	4618      	mov	r0, r3
 8013274:	f000 f95e 	bl	8013534 <USBH_Get_USB_Status>
 8013278:	4603      	mov	r3, r0
 801327a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801327c:	7bbb      	ldrb	r3, [r7, #14]
}
 801327e:	4618      	mov	r0, r3
 8013280:	3710      	adds	r7, #16
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}

08013286 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013286:	b580      	push	{r7, lr}
 8013288:	b084      	sub	sp, #16
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801328e:	2300      	movs	r3, #0
 8013290:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013292:	2300      	movs	r3, #0
 8013294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801329c:	4618      	mov	r0, r3
 801329e:	f7f3 f81e 	bl	80062de <HAL_HCD_Stop>
 80132a2:	4603      	mov	r3, r0
 80132a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80132a6:	7bfb      	ldrb	r3, [r7, #15]
 80132a8:	4618      	mov	r0, r3
 80132aa:	f000 f943 	bl	8013534 <USBH_Get_USB_Status>
 80132ae:	4603      	mov	r3, r0
 80132b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3710      	adds	r7, #16
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b084      	sub	sp, #16
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80132c4:	2301      	movs	r3, #1
 80132c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7f3 f868 	bl	80063a4 <HAL_HCD_GetCurrentSpeed>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b02      	cmp	r3, #2
 80132d8:	d00c      	beq.n	80132f4 <USBH_LL_GetSpeed+0x38>
 80132da:	2b02      	cmp	r3, #2
 80132dc:	d80d      	bhi.n	80132fa <USBH_LL_GetSpeed+0x3e>
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d002      	beq.n	80132e8 <USBH_LL_GetSpeed+0x2c>
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d003      	beq.n	80132ee <USBH_LL_GetSpeed+0x32>
 80132e6:	e008      	b.n	80132fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80132e8:	2300      	movs	r3, #0
 80132ea:	73fb      	strb	r3, [r7, #15]
    break;
 80132ec:	e008      	b.n	8013300 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80132ee:	2301      	movs	r3, #1
 80132f0:	73fb      	strb	r3, [r7, #15]
    break;
 80132f2:	e005      	b.n	8013300 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80132f4:	2302      	movs	r3, #2
 80132f6:	73fb      	strb	r3, [r7, #15]
    break;
 80132f8:	e002      	b.n	8013300 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80132fa:	2301      	movs	r3, #1
 80132fc:	73fb      	strb	r3, [r7, #15]
    break;
 80132fe:	bf00      	nop
  }
  return  speed;
 8013300:	7bfb      	ldrb	r3, [r7, #15]
}
 8013302:	4618      	mov	r0, r3
 8013304:	3710      	adds	r7, #16
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}

0801330a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801330a:	b580      	push	{r7, lr}
 801330c:	b084      	sub	sp, #16
 801330e:	af00      	add	r7, sp, #0
 8013310:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013312:	2300      	movs	r3, #0
 8013314:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013316:	2300      	movs	r3, #0
 8013318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013320:	4618      	mov	r0, r3
 8013322:	f7f2 fff9 	bl	8006318 <HAL_HCD_ResetPort>
 8013326:	4603      	mov	r3, r0
 8013328:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801332a:	7bfb      	ldrb	r3, [r7, #15]
 801332c:	4618      	mov	r0, r3
 801332e:	f000 f901 	bl	8013534 <USBH_Get_USB_Status>
 8013332:	4603      	mov	r3, r0
 8013334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013336:	7bbb      	ldrb	r3, [r7, #14]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3710      	adds	r7, #16
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	460b      	mov	r3, r1
 801334a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013352:	78fa      	ldrb	r2, [r7, #3]
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f7f3 f801 	bl	800635e <HAL_HCD_HC_GetXferCount>
 801335c:	4603      	mov	r3, r0
}
 801335e:	4618      	mov	r0, r3
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013366:	b590      	push	{r4, r7, lr}
 8013368:	b089      	sub	sp, #36	; 0x24
 801336a:	af04      	add	r7, sp, #16
 801336c:	6078      	str	r0, [r7, #4]
 801336e:	4608      	mov	r0, r1
 8013370:	4611      	mov	r1, r2
 8013372:	461a      	mov	r2, r3
 8013374:	4603      	mov	r3, r0
 8013376:	70fb      	strb	r3, [r7, #3]
 8013378:	460b      	mov	r3, r1
 801337a:	70bb      	strb	r3, [r7, #2]
 801337c:	4613      	mov	r3, r2
 801337e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013380:	2300      	movs	r3, #0
 8013382:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013384:	2300      	movs	r3, #0
 8013386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801338e:	787c      	ldrb	r4, [r7, #1]
 8013390:	78ba      	ldrb	r2, [r7, #2]
 8013392:	78f9      	ldrb	r1, [r7, #3]
 8013394:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013396:	9302      	str	r3, [sp, #8]
 8013398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	4623      	mov	r3, r4
 80133a6:	f7f2 fbed 	bl	8005b84 <HAL_HCD_HC_Init>
 80133aa:	4603      	mov	r3, r0
 80133ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
 80133b0:	4618      	mov	r0, r3
 80133b2:	f000 f8bf 	bl	8013534 <USBH_Get_USB_Status>
 80133b6:	4603      	mov	r3, r0
 80133b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3714      	adds	r7, #20
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd90      	pop	{r4, r7, pc}

080133c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	460b      	mov	r3, r1
 80133ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133d0:	2300      	movs	r3, #0
 80133d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80133d4:	2300      	movs	r3, #0
 80133d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80133de:	78fa      	ldrb	r2, [r7, #3]
 80133e0:	4611      	mov	r1, r2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7f2 fc86 	bl	8005cf4 <HAL_HCD_HC_Halt>
 80133e8:	4603      	mov	r3, r0
 80133ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80133ec:	7bfb      	ldrb	r3, [r7, #15]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 f8a0 	bl	8013534 <USBH_Get_USB_Status>
 80133f4:	4603      	mov	r3, r0
 80133f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3710      	adds	r7, #16
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}

08013402 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013402:	b590      	push	{r4, r7, lr}
 8013404:	b089      	sub	sp, #36	; 0x24
 8013406:	af04      	add	r7, sp, #16
 8013408:	6078      	str	r0, [r7, #4]
 801340a:	4608      	mov	r0, r1
 801340c:	4611      	mov	r1, r2
 801340e:	461a      	mov	r2, r3
 8013410:	4603      	mov	r3, r0
 8013412:	70fb      	strb	r3, [r7, #3]
 8013414:	460b      	mov	r3, r1
 8013416:	70bb      	strb	r3, [r7, #2]
 8013418:	4613      	mov	r3, r2
 801341a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801341c:	2300      	movs	r3, #0
 801341e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013420:	2300      	movs	r3, #0
 8013422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801342a:	787c      	ldrb	r4, [r7, #1]
 801342c:	78ba      	ldrb	r2, [r7, #2]
 801342e:	78f9      	ldrb	r1, [r7, #3]
 8013430:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013434:	9303      	str	r3, [sp, #12]
 8013436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013438:	9302      	str	r3, [sp, #8]
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	9301      	str	r3, [sp, #4]
 801343e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	4623      	mov	r3, r4
 8013446:	f7f2 fc79 	bl	8005d3c <HAL_HCD_HC_SubmitRequest>
 801344a:	4603      	mov	r3, r0
 801344c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801344e:	7bfb      	ldrb	r3, [r7, #15]
 8013450:	4618      	mov	r0, r3
 8013452:	f000 f86f 	bl	8013534 <USBH_Get_USB_Status>
 8013456:	4603      	mov	r3, r0
 8013458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801345a:	7bbb      	ldrb	r3, [r7, #14]
}
 801345c:	4618      	mov	r0, r3
 801345e:	3714      	adds	r7, #20
 8013460:	46bd      	mov	sp, r7
 8013462:	bd90      	pop	{r4, r7, pc}

08013464 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	460b      	mov	r3, r1
 801346e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013476:	78fa      	ldrb	r2, [r7, #3]
 8013478:	4611      	mov	r1, r2
 801347a:	4618      	mov	r0, r3
 801347c:	f7f2 ff5a 	bl	8006334 <HAL_HCD_HC_GetURBState>
 8013480:	4603      	mov	r3, r0
}
 8013482:	4618      	mov	r0, r3
 8013484:	3708      	adds	r7, #8
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801348a:	b580      	push	{r7, lr}
 801348c:	b082      	sub	sp, #8
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
 8013492:	460b      	mov	r3, r1
 8013494:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801349c:	2b01      	cmp	r3, #1
 801349e:	d103      	bne.n	80134a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80134a0:	78fb      	ldrb	r3, [r7, #3]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f000 f872 	bl	801358c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80134a8:	20c8      	movs	r0, #200	; 0xc8
 80134aa:	f7f1 f8fb 	bl	80046a4 <HAL_Delay>
  return USBH_OK;
 80134ae:	2300      	movs	r3, #0
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80134b8:	b480      	push	{r7}
 80134ba:	b085      	sub	sp, #20
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	460b      	mov	r3, r1
 80134c2:	70fb      	strb	r3, [r7, #3]
 80134c4:	4613      	mov	r3, r2
 80134c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80134ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80134d0:	78fa      	ldrb	r2, [r7, #3]
 80134d2:	68f9      	ldr	r1, [r7, #12]
 80134d4:	4613      	mov	r3, r2
 80134d6:	011b      	lsls	r3, r3, #4
 80134d8:	1a9b      	subs	r3, r3, r2
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	440b      	add	r3, r1
 80134de:	3317      	adds	r3, #23
 80134e0:	781b      	ldrb	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d00a      	beq.n	80134fc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80134e6:	78fa      	ldrb	r2, [r7, #3]
 80134e8:	68f9      	ldr	r1, [r7, #12]
 80134ea:	4613      	mov	r3, r2
 80134ec:	011b      	lsls	r3, r3, #4
 80134ee:	1a9b      	subs	r3, r3, r2
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	440b      	add	r3, r1
 80134f4:	333c      	adds	r3, #60	; 0x3c
 80134f6:	78ba      	ldrb	r2, [r7, #2]
 80134f8:	701a      	strb	r2, [r3, #0]
 80134fa:	e009      	b.n	8013510 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80134fc:	78fa      	ldrb	r2, [r7, #3]
 80134fe:	68f9      	ldr	r1, [r7, #12]
 8013500:	4613      	mov	r3, r2
 8013502:	011b      	lsls	r3, r3, #4
 8013504:	1a9b      	subs	r3, r3, r2
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	440b      	add	r3, r1
 801350a:	333d      	adds	r3, #61	; 0x3d
 801350c:	78ba      	ldrb	r2, [r7, #2]
 801350e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3714      	adds	r7, #20
 8013516:	46bd      	mov	sp, r7
 8013518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351c:	4770      	bx	lr

0801351e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801351e:	b580      	push	{r7, lr}
 8013520:	b082      	sub	sp, #8
 8013522:	af00      	add	r7, sp, #0
 8013524:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f7f1 f8bc 	bl	80046a4 <HAL_Delay>
}
 801352c:	bf00      	nop
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013534:	b480      	push	{r7}
 8013536:	b085      	sub	sp, #20
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801353e:	2300      	movs	r3, #0
 8013540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013542:	79fb      	ldrb	r3, [r7, #7]
 8013544:	2b03      	cmp	r3, #3
 8013546:	d817      	bhi.n	8013578 <USBH_Get_USB_Status+0x44>
 8013548:	a201      	add	r2, pc, #4	; (adr r2, 8013550 <USBH_Get_USB_Status+0x1c>)
 801354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801354e:	bf00      	nop
 8013550:	08013561 	.word	0x08013561
 8013554:	08013567 	.word	0x08013567
 8013558:	0801356d 	.word	0x0801356d
 801355c:	08013573 	.word	0x08013573
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013560:	2300      	movs	r3, #0
 8013562:	73fb      	strb	r3, [r7, #15]
    break;
 8013564:	e00b      	b.n	801357e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013566:	2302      	movs	r3, #2
 8013568:	73fb      	strb	r3, [r7, #15]
    break;
 801356a:	e008      	b.n	801357e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801356c:	2301      	movs	r3, #1
 801356e:	73fb      	strb	r3, [r7, #15]
    break;
 8013570:	e005      	b.n	801357e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013572:	2302      	movs	r3, #2
 8013574:	73fb      	strb	r3, [r7, #15]
    break;
 8013576:	e002      	b.n	801357e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013578:	2302      	movs	r3, #2
 801357a:	73fb      	strb	r3, [r7, #15]
    break;
 801357c:	bf00      	nop
  }
  return usb_status;
 801357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3714      	adds	r7, #20
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	4603      	mov	r3, r0
 8013594:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013596:	79fb      	ldrb	r3, [r7, #7]
 8013598:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801359a:	79fb      	ldrb	r3, [r7, #7]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d102      	bne.n	80135a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80135a0:	2300      	movs	r3, #0
 80135a2:	73fb      	strb	r3, [r7, #15]
 80135a4:	e001      	b.n	80135aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80135a6:	2301      	movs	r3, #1
 80135a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 80135aa:	7bfb      	ldrb	r3, [r7, #15]
 80135ac:	461a      	mov	r2, r3
 80135ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80135b2:	4803      	ldr	r0, [pc, #12]	; (80135c0 <MX_DriverVbusFS+0x34>)
 80135b4:	f7f2 fa66 	bl	8005a84 <HAL_GPIO_WritePin>
}
 80135b8:	bf00      	nop
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	40021800 	.word	0x40021800

080135c4 <atoi>:
 80135c4:	220a      	movs	r2, #10
 80135c6:	2100      	movs	r1, #0
 80135c8:	f000 b93e 	b.w	8013848 <strtol>

080135cc <malloc>:
 80135cc:	4b02      	ldr	r3, [pc, #8]	; (80135d8 <malloc+0xc>)
 80135ce:	4601      	mov	r1, r0
 80135d0:	6818      	ldr	r0, [r3, #0]
 80135d2:	f000 b82b 	b.w	801362c <_malloc_r>
 80135d6:	bf00      	nop
 80135d8:	200000e0 	.word	0x200000e0

080135dc <free>:
 80135dc:	4b02      	ldr	r3, [pc, #8]	; (80135e8 <free+0xc>)
 80135de:	4601      	mov	r1, r0
 80135e0:	6818      	ldr	r0, [r3, #0]
 80135e2:	f000 ba31 	b.w	8013a48 <_free_r>
 80135e6:	bf00      	nop
 80135e8:	200000e0 	.word	0x200000e0

080135ec <sbrk_aligned>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	4e0e      	ldr	r6, [pc, #56]	; (8013628 <sbrk_aligned+0x3c>)
 80135f0:	460c      	mov	r4, r1
 80135f2:	6831      	ldr	r1, [r6, #0]
 80135f4:	4605      	mov	r5, r0
 80135f6:	b911      	cbnz	r1, 80135fe <sbrk_aligned+0x12>
 80135f8:	f000 f9d4 	bl	80139a4 <_sbrk_r>
 80135fc:	6030      	str	r0, [r6, #0]
 80135fe:	4621      	mov	r1, r4
 8013600:	4628      	mov	r0, r5
 8013602:	f000 f9cf 	bl	80139a4 <_sbrk_r>
 8013606:	1c43      	adds	r3, r0, #1
 8013608:	d00a      	beq.n	8013620 <sbrk_aligned+0x34>
 801360a:	1cc4      	adds	r4, r0, #3
 801360c:	f024 0403 	bic.w	r4, r4, #3
 8013610:	42a0      	cmp	r0, r4
 8013612:	d007      	beq.n	8013624 <sbrk_aligned+0x38>
 8013614:	1a21      	subs	r1, r4, r0
 8013616:	4628      	mov	r0, r5
 8013618:	f000 f9c4 	bl	80139a4 <_sbrk_r>
 801361c:	3001      	adds	r0, #1
 801361e:	d101      	bne.n	8013624 <sbrk_aligned+0x38>
 8013620:	f04f 34ff 	mov.w	r4, #4294967295
 8013624:	4620      	mov	r0, r4
 8013626:	bd70      	pop	{r4, r5, r6, pc}
 8013628:	20005864 	.word	0x20005864

0801362c <_malloc_r>:
 801362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013630:	1ccd      	adds	r5, r1, #3
 8013632:	f025 0503 	bic.w	r5, r5, #3
 8013636:	3508      	adds	r5, #8
 8013638:	2d0c      	cmp	r5, #12
 801363a:	bf38      	it	cc
 801363c:	250c      	movcc	r5, #12
 801363e:	2d00      	cmp	r5, #0
 8013640:	4607      	mov	r7, r0
 8013642:	db01      	blt.n	8013648 <_malloc_r+0x1c>
 8013644:	42a9      	cmp	r1, r5
 8013646:	d905      	bls.n	8013654 <_malloc_r+0x28>
 8013648:	230c      	movs	r3, #12
 801364a:	603b      	str	r3, [r7, #0]
 801364c:	2600      	movs	r6, #0
 801364e:	4630      	mov	r0, r6
 8013650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013654:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013728 <_malloc_r+0xfc>
 8013658:	f000 f868 	bl	801372c <__malloc_lock>
 801365c:	f8d8 3000 	ldr.w	r3, [r8]
 8013660:	461c      	mov	r4, r3
 8013662:	bb5c      	cbnz	r4, 80136bc <_malloc_r+0x90>
 8013664:	4629      	mov	r1, r5
 8013666:	4638      	mov	r0, r7
 8013668:	f7ff ffc0 	bl	80135ec <sbrk_aligned>
 801366c:	1c43      	adds	r3, r0, #1
 801366e:	4604      	mov	r4, r0
 8013670:	d155      	bne.n	801371e <_malloc_r+0xf2>
 8013672:	f8d8 4000 	ldr.w	r4, [r8]
 8013676:	4626      	mov	r6, r4
 8013678:	2e00      	cmp	r6, #0
 801367a:	d145      	bne.n	8013708 <_malloc_r+0xdc>
 801367c:	2c00      	cmp	r4, #0
 801367e:	d048      	beq.n	8013712 <_malloc_r+0xe6>
 8013680:	6823      	ldr	r3, [r4, #0]
 8013682:	4631      	mov	r1, r6
 8013684:	4638      	mov	r0, r7
 8013686:	eb04 0903 	add.w	r9, r4, r3
 801368a:	f000 f98b 	bl	80139a4 <_sbrk_r>
 801368e:	4581      	cmp	r9, r0
 8013690:	d13f      	bne.n	8013712 <_malloc_r+0xe6>
 8013692:	6821      	ldr	r1, [r4, #0]
 8013694:	1a6d      	subs	r5, r5, r1
 8013696:	4629      	mov	r1, r5
 8013698:	4638      	mov	r0, r7
 801369a:	f7ff ffa7 	bl	80135ec <sbrk_aligned>
 801369e:	3001      	adds	r0, #1
 80136a0:	d037      	beq.n	8013712 <_malloc_r+0xe6>
 80136a2:	6823      	ldr	r3, [r4, #0]
 80136a4:	442b      	add	r3, r5
 80136a6:	6023      	str	r3, [r4, #0]
 80136a8:	f8d8 3000 	ldr.w	r3, [r8]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d038      	beq.n	8013722 <_malloc_r+0xf6>
 80136b0:	685a      	ldr	r2, [r3, #4]
 80136b2:	42a2      	cmp	r2, r4
 80136b4:	d12b      	bne.n	801370e <_malloc_r+0xe2>
 80136b6:	2200      	movs	r2, #0
 80136b8:	605a      	str	r2, [r3, #4]
 80136ba:	e00f      	b.n	80136dc <_malloc_r+0xb0>
 80136bc:	6822      	ldr	r2, [r4, #0]
 80136be:	1b52      	subs	r2, r2, r5
 80136c0:	d41f      	bmi.n	8013702 <_malloc_r+0xd6>
 80136c2:	2a0b      	cmp	r2, #11
 80136c4:	d917      	bls.n	80136f6 <_malloc_r+0xca>
 80136c6:	1961      	adds	r1, r4, r5
 80136c8:	42a3      	cmp	r3, r4
 80136ca:	6025      	str	r5, [r4, #0]
 80136cc:	bf18      	it	ne
 80136ce:	6059      	strne	r1, [r3, #4]
 80136d0:	6863      	ldr	r3, [r4, #4]
 80136d2:	bf08      	it	eq
 80136d4:	f8c8 1000 	streq.w	r1, [r8]
 80136d8:	5162      	str	r2, [r4, r5]
 80136da:	604b      	str	r3, [r1, #4]
 80136dc:	4638      	mov	r0, r7
 80136de:	f104 060b 	add.w	r6, r4, #11
 80136e2:	f000 f829 	bl	8013738 <__malloc_unlock>
 80136e6:	f026 0607 	bic.w	r6, r6, #7
 80136ea:	1d23      	adds	r3, r4, #4
 80136ec:	1af2      	subs	r2, r6, r3
 80136ee:	d0ae      	beq.n	801364e <_malloc_r+0x22>
 80136f0:	1b9b      	subs	r3, r3, r6
 80136f2:	50a3      	str	r3, [r4, r2]
 80136f4:	e7ab      	b.n	801364e <_malloc_r+0x22>
 80136f6:	42a3      	cmp	r3, r4
 80136f8:	6862      	ldr	r2, [r4, #4]
 80136fa:	d1dd      	bne.n	80136b8 <_malloc_r+0x8c>
 80136fc:	f8c8 2000 	str.w	r2, [r8]
 8013700:	e7ec      	b.n	80136dc <_malloc_r+0xb0>
 8013702:	4623      	mov	r3, r4
 8013704:	6864      	ldr	r4, [r4, #4]
 8013706:	e7ac      	b.n	8013662 <_malloc_r+0x36>
 8013708:	4634      	mov	r4, r6
 801370a:	6876      	ldr	r6, [r6, #4]
 801370c:	e7b4      	b.n	8013678 <_malloc_r+0x4c>
 801370e:	4613      	mov	r3, r2
 8013710:	e7cc      	b.n	80136ac <_malloc_r+0x80>
 8013712:	230c      	movs	r3, #12
 8013714:	603b      	str	r3, [r7, #0]
 8013716:	4638      	mov	r0, r7
 8013718:	f000 f80e 	bl	8013738 <__malloc_unlock>
 801371c:	e797      	b.n	801364e <_malloc_r+0x22>
 801371e:	6025      	str	r5, [r4, #0]
 8013720:	e7dc      	b.n	80136dc <_malloc_r+0xb0>
 8013722:	605b      	str	r3, [r3, #4]
 8013724:	deff      	udf	#255	; 0xff
 8013726:	bf00      	nop
 8013728:	20005860 	.word	0x20005860

0801372c <__malloc_lock>:
 801372c:	4801      	ldr	r0, [pc, #4]	; (8013734 <__malloc_lock+0x8>)
 801372e:	f000 b973 	b.w	8013a18 <__retarget_lock_acquire_recursive>
 8013732:	bf00      	nop
 8013734:	200059a4 	.word	0x200059a4

08013738 <__malloc_unlock>:
 8013738:	4801      	ldr	r0, [pc, #4]	; (8013740 <__malloc_unlock+0x8>)
 801373a:	f000 b96e 	b.w	8013a1a <__retarget_lock_release_recursive>
 801373e:	bf00      	nop
 8013740:	200059a4 	.word	0x200059a4

08013744 <_strtol_l.constprop.0>:
 8013744:	2b01      	cmp	r3, #1
 8013746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801374a:	d001      	beq.n	8013750 <_strtol_l.constprop.0+0xc>
 801374c:	2b24      	cmp	r3, #36	; 0x24
 801374e:	d906      	bls.n	801375e <_strtol_l.constprop.0+0x1a>
 8013750:	f000 f938 	bl	80139c4 <__errno>
 8013754:	2316      	movs	r3, #22
 8013756:	6003      	str	r3, [r0, #0]
 8013758:	2000      	movs	r0, #0
 801375a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801375e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013844 <_strtol_l.constprop.0+0x100>
 8013762:	460d      	mov	r5, r1
 8013764:	462e      	mov	r6, r5
 8013766:	f815 4b01 	ldrb.w	r4, [r5], #1
 801376a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801376e:	f017 0708 	ands.w	r7, r7, #8
 8013772:	d1f7      	bne.n	8013764 <_strtol_l.constprop.0+0x20>
 8013774:	2c2d      	cmp	r4, #45	; 0x2d
 8013776:	d132      	bne.n	80137de <_strtol_l.constprop.0+0x9a>
 8013778:	782c      	ldrb	r4, [r5, #0]
 801377a:	2701      	movs	r7, #1
 801377c:	1cb5      	adds	r5, r6, #2
 801377e:	2b00      	cmp	r3, #0
 8013780:	d05b      	beq.n	801383a <_strtol_l.constprop.0+0xf6>
 8013782:	2b10      	cmp	r3, #16
 8013784:	d109      	bne.n	801379a <_strtol_l.constprop.0+0x56>
 8013786:	2c30      	cmp	r4, #48	; 0x30
 8013788:	d107      	bne.n	801379a <_strtol_l.constprop.0+0x56>
 801378a:	782c      	ldrb	r4, [r5, #0]
 801378c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013790:	2c58      	cmp	r4, #88	; 0x58
 8013792:	d14d      	bne.n	8013830 <_strtol_l.constprop.0+0xec>
 8013794:	786c      	ldrb	r4, [r5, #1]
 8013796:	2310      	movs	r3, #16
 8013798:	3502      	adds	r5, #2
 801379a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801379e:	f108 38ff 	add.w	r8, r8, #4294967295
 80137a2:	f04f 0e00 	mov.w	lr, #0
 80137a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80137aa:	4676      	mov	r6, lr
 80137ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80137b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80137b4:	f1bc 0f09 	cmp.w	ip, #9
 80137b8:	d816      	bhi.n	80137e8 <_strtol_l.constprop.0+0xa4>
 80137ba:	4664      	mov	r4, ip
 80137bc:	42a3      	cmp	r3, r4
 80137be:	dd24      	ble.n	801380a <_strtol_l.constprop.0+0xc6>
 80137c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80137c4:	d008      	beq.n	80137d8 <_strtol_l.constprop.0+0x94>
 80137c6:	45b1      	cmp	r9, r6
 80137c8:	d31c      	bcc.n	8013804 <_strtol_l.constprop.0+0xc0>
 80137ca:	d101      	bne.n	80137d0 <_strtol_l.constprop.0+0x8c>
 80137cc:	45a2      	cmp	sl, r4
 80137ce:	db19      	blt.n	8013804 <_strtol_l.constprop.0+0xc0>
 80137d0:	fb06 4603 	mla	r6, r6, r3, r4
 80137d4:	f04f 0e01 	mov.w	lr, #1
 80137d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137dc:	e7e8      	b.n	80137b0 <_strtol_l.constprop.0+0x6c>
 80137de:	2c2b      	cmp	r4, #43	; 0x2b
 80137e0:	bf04      	itt	eq
 80137e2:	782c      	ldrbeq	r4, [r5, #0]
 80137e4:	1cb5      	addeq	r5, r6, #2
 80137e6:	e7ca      	b.n	801377e <_strtol_l.constprop.0+0x3a>
 80137e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80137ec:	f1bc 0f19 	cmp.w	ip, #25
 80137f0:	d801      	bhi.n	80137f6 <_strtol_l.constprop.0+0xb2>
 80137f2:	3c37      	subs	r4, #55	; 0x37
 80137f4:	e7e2      	b.n	80137bc <_strtol_l.constprop.0+0x78>
 80137f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80137fa:	f1bc 0f19 	cmp.w	ip, #25
 80137fe:	d804      	bhi.n	801380a <_strtol_l.constprop.0+0xc6>
 8013800:	3c57      	subs	r4, #87	; 0x57
 8013802:	e7db      	b.n	80137bc <_strtol_l.constprop.0+0x78>
 8013804:	f04f 3eff 	mov.w	lr, #4294967295
 8013808:	e7e6      	b.n	80137d8 <_strtol_l.constprop.0+0x94>
 801380a:	f1be 3fff 	cmp.w	lr, #4294967295
 801380e:	d105      	bne.n	801381c <_strtol_l.constprop.0+0xd8>
 8013810:	2322      	movs	r3, #34	; 0x22
 8013812:	6003      	str	r3, [r0, #0]
 8013814:	4646      	mov	r6, r8
 8013816:	b942      	cbnz	r2, 801382a <_strtol_l.constprop.0+0xe6>
 8013818:	4630      	mov	r0, r6
 801381a:	e79e      	b.n	801375a <_strtol_l.constprop.0+0x16>
 801381c:	b107      	cbz	r7, 8013820 <_strtol_l.constprop.0+0xdc>
 801381e:	4276      	negs	r6, r6
 8013820:	2a00      	cmp	r2, #0
 8013822:	d0f9      	beq.n	8013818 <_strtol_l.constprop.0+0xd4>
 8013824:	f1be 0f00 	cmp.w	lr, #0
 8013828:	d000      	beq.n	801382c <_strtol_l.constprop.0+0xe8>
 801382a:	1e69      	subs	r1, r5, #1
 801382c:	6011      	str	r1, [r2, #0]
 801382e:	e7f3      	b.n	8013818 <_strtol_l.constprop.0+0xd4>
 8013830:	2430      	movs	r4, #48	; 0x30
 8013832:	2b00      	cmp	r3, #0
 8013834:	d1b1      	bne.n	801379a <_strtol_l.constprop.0+0x56>
 8013836:	2308      	movs	r3, #8
 8013838:	e7af      	b.n	801379a <_strtol_l.constprop.0+0x56>
 801383a:	2c30      	cmp	r4, #48	; 0x30
 801383c:	d0a5      	beq.n	801378a <_strtol_l.constprop.0+0x46>
 801383e:	230a      	movs	r3, #10
 8013840:	e7ab      	b.n	801379a <_strtol_l.constprop.0+0x56>
 8013842:	bf00      	nop
 8013844:	08016ef5 	.word	0x08016ef5

08013848 <strtol>:
 8013848:	4613      	mov	r3, r2
 801384a:	460a      	mov	r2, r1
 801384c:	4601      	mov	r1, r0
 801384e:	4802      	ldr	r0, [pc, #8]	; (8013858 <strtol+0x10>)
 8013850:	6800      	ldr	r0, [r0, #0]
 8013852:	f7ff bf77 	b.w	8013744 <_strtol_l.constprop.0>
 8013856:	bf00      	nop
 8013858:	200000e0 	.word	0x200000e0

0801385c <sniprintf>:
 801385c:	b40c      	push	{r2, r3}
 801385e:	b530      	push	{r4, r5, lr}
 8013860:	4b17      	ldr	r3, [pc, #92]	; (80138c0 <sniprintf+0x64>)
 8013862:	1e0c      	subs	r4, r1, #0
 8013864:	681d      	ldr	r5, [r3, #0]
 8013866:	b09d      	sub	sp, #116	; 0x74
 8013868:	da08      	bge.n	801387c <sniprintf+0x20>
 801386a:	238b      	movs	r3, #139	; 0x8b
 801386c:	602b      	str	r3, [r5, #0]
 801386e:	f04f 30ff 	mov.w	r0, #4294967295
 8013872:	b01d      	add	sp, #116	; 0x74
 8013874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013878:	b002      	add	sp, #8
 801387a:	4770      	bx	lr
 801387c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013884:	bf14      	ite	ne
 8013886:	f104 33ff 	addne.w	r3, r4, #4294967295
 801388a:	4623      	moveq	r3, r4
 801388c:	9304      	str	r3, [sp, #16]
 801388e:	9307      	str	r3, [sp, #28]
 8013890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013894:	9002      	str	r0, [sp, #8]
 8013896:	9006      	str	r0, [sp, #24]
 8013898:	f8ad 3016 	strh.w	r3, [sp, #22]
 801389c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801389e:	ab21      	add	r3, sp, #132	; 0x84
 80138a0:	a902      	add	r1, sp, #8
 80138a2:	4628      	mov	r0, r5
 80138a4:	9301      	str	r3, [sp, #4]
 80138a6:	f000 f975 	bl	8013b94 <_svfiprintf_r>
 80138aa:	1c43      	adds	r3, r0, #1
 80138ac:	bfbc      	itt	lt
 80138ae:	238b      	movlt	r3, #139	; 0x8b
 80138b0:	602b      	strlt	r3, [r5, #0]
 80138b2:	2c00      	cmp	r4, #0
 80138b4:	d0dd      	beq.n	8013872 <sniprintf+0x16>
 80138b6:	9b02      	ldr	r3, [sp, #8]
 80138b8:	2200      	movs	r2, #0
 80138ba:	701a      	strb	r2, [r3, #0]
 80138bc:	e7d9      	b.n	8013872 <sniprintf+0x16>
 80138be:	bf00      	nop
 80138c0:	200000e0 	.word	0x200000e0

080138c4 <memset>:
 80138c4:	4402      	add	r2, r0
 80138c6:	4603      	mov	r3, r0
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d100      	bne.n	80138ce <memset+0xa>
 80138cc:	4770      	bx	lr
 80138ce:	f803 1b01 	strb.w	r1, [r3], #1
 80138d2:	e7f9      	b.n	80138c8 <memset+0x4>

080138d4 <strncmp>:
 80138d4:	b510      	push	{r4, lr}
 80138d6:	b16a      	cbz	r2, 80138f4 <strncmp+0x20>
 80138d8:	3901      	subs	r1, #1
 80138da:	1884      	adds	r4, r0, r2
 80138dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d103      	bne.n	80138f0 <strncmp+0x1c>
 80138e8:	42a0      	cmp	r0, r4
 80138ea:	d001      	beq.n	80138f0 <strncmp+0x1c>
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	d1f5      	bne.n	80138dc <strncmp+0x8>
 80138f0:	1ad0      	subs	r0, r2, r3
 80138f2:	bd10      	pop	{r4, pc}
 80138f4:	4610      	mov	r0, r2
 80138f6:	e7fc      	b.n	80138f2 <strncmp+0x1e>

080138f8 <_reclaim_reent>:
 80138f8:	4b29      	ldr	r3, [pc, #164]	; (80139a0 <_reclaim_reent+0xa8>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	4283      	cmp	r3, r0
 80138fe:	b570      	push	{r4, r5, r6, lr}
 8013900:	4604      	mov	r4, r0
 8013902:	d04b      	beq.n	801399c <_reclaim_reent+0xa4>
 8013904:	69c3      	ldr	r3, [r0, #28]
 8013906:	b143      	cbz	r3, 801391a <_reclaim_reent+0x22>
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d144      	bne.n	8013998 <_reclaim_reent+0xa0>
 801390e:	69e3      	ldr	r3, [r4, #28]
 8013910:	6819      	ldr	r1, [r3, #0]
 8013912:	b111      	cbz	r1, 801391a <_reclaim_reent+0x22>
 8013914:	4620      	mov	r0, r4
 8013916:	f000 f897 	bl	8013a48 <_free_r>
 801391a:	6961      	ldr	r1, [r4, #20]
 801391c:	b111      	cbz	r1, 8013924 <_reclaim_reent+0x2c>
 801391e:	4620      	mov	r0, r4
 8013920:	f000 f892 	bl	8013a48 <_free_r>
 8013924:	69e1      	ldr	r1, [r4, #28]
 8013926:	b111      	cbz	r1, 801392e <_reclaim_reent+0x36>
 8013928:	4620      	mov	r0, r4
 801392a:	f000 f88d 	bl	8013a48 <_free_r>
 801392e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013930:	b111      	cbz	r1, 8013938 <_reclaim_reent+0x40>
 8013932:	4620      	mov	r0, r4
 8013934:	f000 f888 	bl	8013a48 <_free_r>
 8013938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801393a:	b111      	cbz	r1, 8013942 <_reclaim_reent+0x4a>
 801393c:	4620      	mov	r0, r4
 801393e:	f000 f883 	bl	8013a48 <_free_r>
 8013942:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013944:	b111      	cbz	r1, 801394c <_reclaim_reent+0x54>
 8013946:	4620      	mov	r0, r4
 8013948:	f000 f87e 	bl	8013a48 <_free_r>
 801394c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801394e:	b111      	cbz	r1, 8013956 <_reclaim_reent+0x5e>
 8013950:	4620      	mov	r0, r4
 8013952:	f000 f879 	bl	8013a48 <_free_r>
 8013956:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013958:	b111      	cbz	r1, 8013960 <_reclaim_reent+0x68>
 801395a:	4620      	mov	r0, r4
 801395c:	f000 f874 	bl	8013a48 <_free_r>
 8013960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013962:	b111      	cbz	r1, 801396a <_reclaim_reent+0x72>
 8013964:	4620      	mov	r0, r4
 8013966:	f000 f86f 	bl	8013a48 <_free_r>
 801396a:	6a23      	ldr	r3, [r4, #32]
 801396c:	b1b3      	cbz	r3, 801399c <_reclaim_reent+0xa4>
 801396e:	4620      	mov	r0, r4
 8013970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013974:	4718      	bx	r3
 8013976:	5949      	ldr	r1, [r1, r5]
 8013978:	b941      	cbnz	r1, 801398c <_reclaim_reent+0x94>
 801397a:	3504      	adds	r5, #4
 801397c:	69e3      	ldr	r3, [r4, #28]
 801397e:	2d80      	cmp	r5, #128	; 0x80
 8013980:	68d9      	ldr	r1, [r3, #12]
 8013982:	d1f8      	bne.n	8013976 <_reclaim_reent+0x7e>
 8013984:	4620      	mov	r0, r4
 8013986:	f000 f85f 	bl	8013a48 <_free_r>
 801398a:	e7c0      	b.n	801390e <_reclaim_reent+0x16>
 801398c:	680e      	ldr	r6, [r1, #0]
 801398e:	4620      	mov	r0, r4
 8013990:	f000 f85a 	bl	8013a48 <_free_r>
 8013994:	4631      	mov	r1, r6
 8013996:	e7ef      	b.n	8013978 <_reclaim_reent+0x80>
 8013998:	2500      	movs	r5, #0
 801399a:	e7ef      	b.n	801397c <_reclaim_reent+0x84>
 801399c:	bd70      	pop	{r4, r5, r6, pc}
 801399e:	bf00      	nop
 80139a0:	200000e0 	.word	0x200000e0

080139a4 <_sbrk_r>:
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	4d06      	ldr	r5, [pc, #24]	; (80139c0 <_sbrk_r+0x1c>)
 80139a8:	2300      	movs	r3, #0
 80139aa:	4604      	mov	r4, r0
 80139ac:	4608      	mov	r0, r1
 80139ae:	602b      	str	r3, [r5, #0]
 80139b0:	f7ef fd3c 	bl	800342c <_sbrk>
 80139b4:	1c43      	adds	r3, r0, #1
 80139b6:	d102      	bne.n	80139be <_sbrk_r+0x1a>
 80139b8:	682b      	ldr	r3, [r5, #0]
 80139ba:	b103      	cbz	r3, 80139be <_sbrk_r+0x1a>
 80139bc:	6023      	str	r3, [r4, #0]
 80139be:	bd38      	pop	{r3, r4, r5, pc}
 80139c0:	200059a0 	.word	0x200059a0

080139c4 <__errno>:
 80139c4:	4b01      	ldr	r3, [pc, #4]	; (80139cc <__errno+0x8>)
 80139c6:	6818      	ldr	r0, [r3, #0]
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop
 80139cc:	200000e0 	.word	0x200000e0

080139d0 <__libc_init_array>:
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	4d0d      	ldr	r5, [pc, #52]	; (8013a08 <__libc_init_array+0x38>)
 80139d4:	4c0d      	ldr	r4, [pc, #52]	; (8013a0c <__libc_init_array+0x3c>)
 80139d6:	1b64      	subs	r4, r4, r5
 80139d8:	10a4      	asrs	r4, r4, #2
 80139da:	2600      	movs	r6, #0
 80139dc:	42a6      	cmp	r6, r4
 80139de:	d109      	bne.n	80139f4 <__libc_init_array+0x24>
 80139e0:	4d0b      	ldr	r5, [pc, #44]	; (8013a10 <__libc_init_array+0x40>)
 80139e2:	4c0c      	ldr	r4, [pc, #48]	; (8013a14 <__libc_init_array+0x44>)
 80139e4:	f000 fbb6 	bl	8014154 <_init>
 80139e8:	1b64      	subs	r4, r4, r5
 80139ea:	10a4      	asrs	r4, r4, #2
 80139ec:	2600      	movs	r6, #0
 80139ee:	42a6      	cmp	r6, r4
 80139f0:	d105      	bne.n	80139fe <__libc_init_array+0x2e>
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
 80139f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80139f8:	4798      	blx	r3
 80139fa:	3601      	adds	r6, #1
 80139fc:	e7ee      	b.n	80139dc <__libc_init_array+0xc>
 80139fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a02:	4798      	blx	r3
 8013a04:	3601      	adds	r6, #1
 8013a06:	e7f2      	b.n	80139ee <__libc_init_array+0x1e>
 8013a08:	08017030 	.word	0x08017030
 8013a0c:	08017030 	.word	0x08017030
 8013a10:	08017030 	.word	0x08017030
 8013a14:	08017034 	.word	0x08017034

08013a18 <__retarget_lock_acquire_recursive>:
 8013a18:	4770      	bx	lr

08013a1a <__retarget_lock_release_recursive>:
 8013a1a:	4770      	bx	lr

08013a1c <strcpy>:
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a22:	f803 2b01 	strb.w	r2, [r3], #1
 8013a26:	2a00      	cmp	r2, #0
 8013a28:	d1f9      	bne.n	8013a1e <strcpy+0x2>
 8013a2a:	4770      	bx	lr

08013a2c <memcpy>:
 8013a2c:	440a      	add	r2, r1
 8013a2e:	4291      	cmp	r1, r2
 8013a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a34:	d100      	bne.n	8013a38 <memcpy+0xc>
 8013a36:	4770      	bx	lr
 8013a38:	b510      	push	{r4, lr}
 8013a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a42:	4291      	cmp	r1, r2
 8013a44:	d1f9      	bne.n	8013a3a <memcpy+0xe>
 8013a46:	bd10      	pop	{r4, pc}

08013a48 <_free_r>:
 8013a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a4a:	2900      	cmp	r1, #0
 8013a4c:	d044      	beq.n	8013ad8 <_free_r+0x90>
 8013a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a52:	9001      	str	r0, [sp, #4]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	f1a1 0404 	sub.w	r4, r1, #4
 8013a5a:	bfb8      	it	lt
 8013a5c:	18e4      	addlt	r4, r4, r3
 8013a5e:	f7ff fe65 	bl	801372c <__malloc_lock>
 8013a62:	4a1e      	ldr	r2, [pc, #120]	; (8013adc <_free_r+0x94>)
 8013a64:	9801      	ldr	r0, [sp, #4]
 8013a66:	6813      	ldr	r3, [r2, #0]
 8013a68:	b933      	cbnz	r3, 8013a78 <_free_r+0x30>
 8013a6a:	6063      	str	r3, [r4, #4]
 8013a6c:	6014      	str	r4, [r2, #0]
 8013a6e:	b003      	add	sp, #12
 8013a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a74:	f7ff be60 	b.w	8013738 <__malloc_unlock>
 8013a78:	42a3      	cmp	r3, r4
 8013a7a:	d908      	bls.n	8013a8e <_free_r+0x46>
 8013a7c:	6825      	ldr	r5, [r4, #0]
 8013a7e:	1961      	adds	r1, r4, r5
 8013a80:	428b      	cmp	r3, r1
 8013a82:	bf01      	itttt	eq
 8013a84:	6819      	ldreq	r1, [r3, #0]
 8013a86:	685b      	ldreq	r3, [r3, #4]
 8013a88:	1949      	addeq	r1, r1, r5
 8013a8a:	6021      	streq	r1, [r4, #0]
 8013a8c:	e7ed      	b.n	8013a6a <_free_r+0x22>
 8013a8e:	461a      	mov	r2, r3
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	b10b      	cbz	r3, 8013a98 <_free_r+0x50>
 8013a94:	42a3      	cmp	r3, r4
 8013a96:	d9fa      	bls.n	8013a8e <_free_r+0x46>
 8013a98:	6811      	ldr	r1, [r2, #0]
 8013a9a:	1855      	adds	r5, r2, r1
 8013a9c:	42a5      	cmp	r5, r4
 8013a9e:	d10b      	bne.n	8013ab8 <_free_r+0x70>
 8013aa0:	6824      	ldr	r4, [r4, #0]
 8013aa2:	4421      	add	r1, r4
 8013aa4:	1854      	adds	r4, r2, r1
 8013aa6:	42a3      	cmp	r3, r4
 8013aa8:	6011      	str	r1, [r2, #0]
 8013aaa:	d1e0      	bne.n	8013a6e <_free_r+0x26>
 8013aac:	681c      	ldr	r4, [r3, #0]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	6053      	str	r3, [r2, #4]
 8013ab2:	440c      	add	r4, r1
 8013ab4:	6014      	str	r4, [r2, #0]
 8013ab6:	e7da      	b.n	8013a6e <_free_r+0x26>
 8013ab8:	d902      	bls.n	8013ac0 <_free_r+0x78>
 8013aba:	230c      	movs	r3, #12
 8013abc:	6003      	str	r3, [r0, #0]
 8013abe:	e7d6      	b.n	8013a6e <_free_r+0x26>
 8013ac0:	6825      	ldr	r5, [r4, #0]
 8013ac2:	1961      	adds	r1, r4, r5
 8013ac4:	428b      	cmp	r3, r1
 8013ac6:	bf04      	itt	eq
 8013ac8:	6819      	ldreq	r1, [r3, #0]
 8013aca:	685b      	ldreq	r3, [r3, #4]
 8013acc:	6063      	str	r3, [r4, #4]
 8013ace:	bf04      	itt	eq
 8013ad0:	1949      	addeq	r1, r1, r5
 8013ad2:	6021      	streq	r1, [r4, #0]
 8013ad4:	6054      	str	r4, [r2, #4]
 8013ad6:	e7ca      	b.n	8013a6e <_free_r+0x26>
 8013ad8:	b003      	add	sp, #12
 8013ada:	bd30      	pop	{r4, r5, pc}
 8013adc:	20005860 	.word	0x20005860

08013ae0 <__ssputs_r>:
 8013ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ae4:	688e      	ldr	r6, [r1, #8]
 8013ae6:	461f      	mov	r7, r3
 8013ae8:	42be      	cmp	r6, r7
 8013aea:	680b      	ldr	r3, [r1, #0]
 8013aec:	4682      	mov	sl, r0
 8013aee:	460c      	mov	r4, r1
 8013af0:	4690      	mov	r8, r2
 8013af2:	d82c      	bhi.n	8013b4e <__ssputs_r+0x6e>
 8013af4:	898a      	ldrh	r2, [r1, #12]
 8013af6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013afa:	d026      	beq.n	8013b4a <__ssputs_r+0x6a>
 8013afc:	6965      	ldr	r5, [r4, #20]
 8013afe:	6909      	ldr	r1, [r1, #16]
 8013b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b04:	eba3 0901 	sub.w	r9, r3, r1
 8013b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b0c:	1c7b      	adds	r3, r7, #1
 8013b0e:	444b      	add	r3, r9
 8013b10:	106d      	asrs	r5, r5, #1
 8013b12:	429d      	cmp	r5, r3
 8013b14:	bf38      	it	cc
 8013b16:	461d      	movcc	r5, r3
 8013b18:	0553      	lsls	r3, r2, #21
 8013b1a:	d527      	bpl.n	8013b6c <__ssputs_r+0x8c>
 8013b1c:	4629      	mov	r1, r5
 8013b1e:	f7ff fd85 	bl	801362c <_malloc_r>
 8013b22:	4606      	mov	r6, r0
 8013b24:	b360      	cbz	r0, 8013b80 <__ssputs_r+0xa0>
 8013b26:	6921      	ldr	r1, [r4, #16]
 8013b28:	464a      	mov	r2, r9
 8013b2a:	f7ff ff7f 	bl	8013a2c <memcpy>
 8013b2e:	89a3      	ldrh	r3, [r4, #12]
 8013b30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b38:	81a3      	strh	r3, [r4, #12]
 8013b3a:	6126      	str	r6, [r4, #16]
 8013b3c:	6165      	str	r5, [r4, #20]
 8013b3e:	444e      	add	r6, r9
 8013b40:	eba5 0509 	sub.w	r5, r5, r9
 8013b44:	6026      	str	r6, [r4, #0]
 8013b46:	60a5      	str	r5, [r4, #8]
 8013b48:	463e      	mov	r6, r7
 8013b4a:	42be      	cmp	r6, r7
 8013b4c:	d900      	bls.n	8013b50 <__ssputs_r+0x70>
 8013b4e:	463e      	mov	r6, r7
 8013b50:	6820      	ldr	r0, [r4, #0]
 8013b52:	4632      	mov	r2, r6
 8013b54:	4641      	mov	r1, r8
 8013b56:	f000 faab 	bl	80140b0 <memmove>
 8013b5a:	68a3      	ldr	r3, [r4, #8]
 8013b5c:	1b9b      	subs	r3, r3, r6
 8013b5e:	60a3      	str	r3, [r4, #8]
 8013b60:	6823      	ldr	r3, [r4, #0]
 8013b62:	4433      	add	r3, r6
 8013b64:	6023      	str	r3, [r4, #0]
 8013b66:	2000      	movs	r0, #0
 8013b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b6c:	462a      	mov	r2, r5
 8013b6e:	f000 fab9 	bl	80140e4 <_realloc_r>
 8013b72:	4606      	mov	r6, r0
 8013b74:	2800      	cmp	r0, #0
 8013b76:	d1e0      	bne.n	8013b3a <__ssputs_r+0x5a>
 8013b78:	6921      	ldr	r1, [r4, #16]
 8013b7a:	4650      	mov	r0, sl
 8013b7c:	f7ff ff64 	bl	8013a48 <_free_r>
 8013b80:	230c      	movs	r3, #12
 8013b82:	f8ca 3000 	str.w	r3, [sl]
 8013b86:	89a3      	ldrh	r3, [r4, #12]
 8013b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b8c:	81a3      	strh	r3, [r4, #12]
 8013b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b92:	e7e9      	b.n	8013b68 <__ssputs_r+0x88>

08013b94 <_svfiprintf_r>:
 8013b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b98:	4698      	mov	r8, r3
 8013b9a:	898b      	ldrh	r3, [r1, #12]
 8013b9c:	061b      	lsls	r3, r3, #24
 8013b9e:	b09d      	sub	sp, #116	; 0x74
 8013ba0:	4607      	mov	r7, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	4614      	mov	r4, r2
 8013ba6:	d50e      	bpl.n	8013bc6 <_svfiprintf_r+0x32>
 8013ba8:	690b      	ldr	r3, [r1, #16]
 8013baa:	b963      	cbnz	r3, 8013bc6 <_svfiprintf_r+0x32>
 8013bac:	2140      	movs	r1, #64	; 0x40
 8013bae:	f7ff fd3d 	bl	801362c <_malloc_r>
 8013bb2:	6028      	str	r0, [r5, #0]
 8013bb4:	6128      	str	r0, [r5, #16]
 8013bb6:	b920      	cbnz	r0, 8013bc2 <_svfiprintf_r+0x2e>
 8013bb8:	230c      	movs	r3, #12
 8013bba:	603b      	str	r3, [r7, #0]
 8013bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc0:	e0d0      	b.n	8013d64 <_svfiprintf_r+0x1d0>
 8013bc2:	2340      	movs	r3, #64	; 0x40
 8013bc4:	616b      	str	r3, [r5, #20]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8013bca:	2320      	movs	r3, #32
 8013bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bd4:	2330      	movs	r3, #48	; 0x30
 8013bd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013d7c <_svfiprintf_r+0x1e8>
 8013bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bde:	f04f 0901 	mov.w	r9, #1
 8013be2:	4623      	mov	r3, r4
 8013be4:	469a      	mov	sl, r3
 8013be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bea:	b10a      	cbz	r2, 8013bf0 <_svfiprintf_r+0x5c>
 8013bec:	2a25      	cmp	r2, #37	; 0x25
 8013bee:	d1f9      	bne.n	8013be4 <_svfiprintf_r+0x50>
 8013bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8013bf4:	d00b      	beq.n	8013c0e <_svfiprintf_r+0x7a>
 8013bf6:	465b      	mov	r3, fp
 8013bf8:	4622      	mov	r2, r4
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	4638      	mov	r0, r7
 8013bfe:	f7ff ff6f 	bl	8013ae0 <__ssputs_r>
 8013c02:	3001      	adds	r0, #1
 8013c04:	f000 80a9 	beq.w	8013d5a <_svfiprintf_r+0x1c6>
 8013c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c0a:	445a      	add	r2, fp
 8013c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8013c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f000 80a1 	beq.w	8013d5a <_svfiprintf_r+0x1c6>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c22:	f10a 0a01 	add.w	sl, sl, #1
 8013c26:	9304      	str	r3, [sp, #16]
 8013c28:	9307      	str	r3, [sp, #28]
 8013c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8013c30:	4654      	mov	r4, sl
 8013c32:	2205      	movs	r2, #5
 8013c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c38:	4850      	ldr	r0, [pc, #320]	; (8013d7c <_svfiprintf_r+0x1e8>)
 8013c3a:	f7ec faf9 	bl	8000230 <memchr>
 8013c3e:	9a04      	ldr	r2, [sp, #16]
 8013c40:	b9d8      	cbnz	r0, 8013c7a <_svfiprintf_r+0xe6>
 8013c42:	06d0      	lsls	r0, r2, #27
 8013c44:	bf44      	itt	mi
 8013c46:	2320      	movmi	r3, #32
 8013c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c4c:	0711      	lsls	r1, r2, #28
 8013c4e:	bf44      	itt	mi
 8013c50:	232b      	movmi	r3, #43	; 0x2b
 8013c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c56:	f89a 3000 	ldrb.w	r3, [sl]
 8013c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c5c:	d015      	beq.n	8013c8a <_svfiprintf_r+0xf6>
 8013c5e:	9a07      	ldr	r2, [sp, #28]
 8013c60:	4654      	mov	r4, sl
 8013c62:	2000      	movs	r0, #0
 8013c64:	f04f 0c0a 	mov.w	ip, #10
 8013c68:	4621      	mov	r1, r4
 8013c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c6e:	3b30      	subs	r3, #48	; 0x30
 8013c70:	2b09      	cmp	r3, #9
 8013c72:	d94d      	bls.n	8013d10 <_svfiprintf_r+0x17c>
 8013c74:	b1b0      	cbz	r0, 8013ca4 <_svfiprintf_r+0x110>
 8013c76:	9207      	str	r2, [sp, #28]
 8013c78:	e014      	b.n	8013ca4 <_svfiprintf_r+0x110>
 8013c7a:	eba0 0308 	sub.w	r3, r0, r8
 8013c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8013c82:	4313      	orrs	r3, r2
 8013c84:	9304      	str	r3, [sp, #16]
 8013c86:	46a2      	mov	sl, r4
 8013c88:	e7d2      	b.n	8013c30 <_svfiprintf_r+0x9c>
 8013c8a:	9b03      	ldr	r3, [sp, #12]
 8013c8c:	1d19      	adds	r1, r3, #4
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	9103      	str	r1, [sp, #12]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	bfbb      	ittet	lt
 8013c96:	425b      	neglt	r3, r3
 8013c98:	f042 0202 	orrlt.w	r2, r2, #2
 8013c9c:	9307      	strge	r3, [sp, #28]
 8013c9e:	9307      	strlt	r3, [sp, #28]
 8013ca0:	bfb8      	it	lt
 8013ca2:	9204      	strlt	r2, [sp, #16]
 8013ca4:	7823      	ldrb	r3, [r4, #0]
 8013ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ca8:	d10c      	bne.n	8013cc4 <_svfiprintf_r+0x130>
 8013caa:	7863      	ldrb	r3, [r4, #1]
 8013cac:	2b2a      	cmp	r3, #42	; 0x2a
 8013cae:	d134      	bne.n	8013d1a <_svfiprintf_r+0x186>
 8013cb0:	9b03      	ldr	r3, [sp, #12]
 8013cb2:	1d1a      	adds	r2, r3, #4
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	9203      	str	r2, [sp, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	bfb8      	it	lt
 8013cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cc0:	3402      	adds	r4, #2
 8013cc2:	9305      	str	r3, [sp, #20]
 8013cc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013d8c <_svfiprintf_r+0x1f8>
 8013cc8:	7821      	ldrb	r1, [r4, #0]
 8013cca:	2203      	movs	r2, #3
 8013ccc:	4650      	mov	r0, sl
 8013cce:	f7ec faaf 	bl	8000230 <memchr>
 8013cd2:	b138      	cbz	r0, 8013ce4 <_svfiprintf_r+0x150>
 8013cd4:	9b04      	ldr	r3, [sp, #16]
 8013cd6:	eba0 000a 	sub.w	r0, r0, sl
 8013cda:	2240      	movs	r2, #64	; 0x40
 8013cdc:	4082      	lsls	r2, r0
 8013cde:	4313      	orrs	r3, r2
 8013ce0:	3401      	adds	r4, #1
 8013ce2:	9304      	str	r3, [sp, #16]
 8013ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ce8:	4825      	ldr	r0, [pc, #148]	; (8013d80 <_svfiprintf_r+0x1ec>)
 8013cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cee:	2206      	movs	r2, #6
 8013cf0:	f7ec fa9e 	bl	8000230 <memchr>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d038      	beq.n	8013d6a <_svfiprintf_r+0x1d6>
 8013cf8:	4b22      	ldr	r3, [pc, #136]	; (8013d84 <_svfiprintf_r+0x1f0>)
 8013cfa:	bb1b      	cbnz	r3, 8013d44 <_svfiprintf_r+0x1b0>
 8013cfc:	9b03      	ldr	r3, [sp, #12]
 8013cfe:	3307      	adds	r3, #7
 8013d00:	f023 0307 	bic.w	r3, r3, #7
 8013d04:	3308      	adds	r3, #8
 8013d06:	9303      	str	r3, [sp, #12]
 8013d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d0a:	4433      	add	r3, r6
 8013d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d0e:	e768      	b.n	8013be2 <_svfiprintf_r+0x4e>
 8013d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d14:	460c      	mov	r4, r1
 8013d16:	2001      	movs	r0, #1
 8013d18:	e7a6      	b.n	8013c68 <_svfiprintf_r+0xd4>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	3401      	adds	r4, #1
 8013d1e:	9305      	str	r3, [sp, #20]
 8013d20:	4619      	mov	r1, r3
 8013d22:	f04f 0c0a 	mov.w	ip, #10
 8013d26:	4620      	mov	r0, r4
 8013d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d2c:	3a30      	subs	r2, #48	; 0x30
 8013d2e:	2a09      	cmp	r2, #9
 8013d30:	d903      	bls.n	8013d3a <_svfiprintf_r+0x1a6>
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d0c6      	beq.n	8013cc4 <_svfiprintf_r+0x130>
 8013d36:	9105      	str	r1, [sp, #20]
 8013d38:	e7c4      	b.n	8013cc4 <_svfiprintf_r+0x130>
 8013d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d3e:	4604      	mov	r4, r0
 8013d40:	2301      	movs	r3, #1
 8013d42:	e7f0      	b.n	8013d26 <_svfiprintf_r+0x192>
 8013d44:	ab03      	add	r3, sp, #12
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	462a      	mov	r2, r5
 8013d4a:	4b0f      	ldr	r3, [pc, #60]	; (8013d88 <_svfiprintf_r+0x1f4>)
 8013d4c:	a904      	add	r1, sp, #16
 8013d4e:	4638      	mov	r0, r7
 8013d50:	f3af 8000 	nop.w
 8013d54:	1c42      	adds	r2, r0, #1
 8013d56:	4606      	mov	r6, r0
 8013d58:	d1d6      	bne.n	8013d08 <_svfiprintf_r+0x174>
 8013d5a:	89ab      	ldrh	r3, [r5, #12]
 8013d5c:	065b      	lsls	r3, r3, #25
 8013d5e:	f53f af2d 	bmi.w	8013bbc <_svfiprintf_r+0x28>
 8013d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d64:	b01d      	add	sp, #116	; 0x74
 8013d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6a:	ab03      	add	r3, sp, #12
 8013d6c:	9300      	str	r3, [sp, #0]
 8013d6e:	462a      	mov	r2, r5
 8013d70:	4b05      	ldr	r3, [pc, #20]	; (8013d88 <_svfiprintf_r+0x1f4>)
 8013d72:	a904      	add	r1, sp, #16
 8013d74:	4638      	mov	r0, r7
 8013d76:	f000 f879 	bl	8013e6c <_printf_i>
 8013d7a:	e7eb      	b.n	8013d54 <_svfiprintf_r+0x1c0>
 8013d7c:	08016ff5 	.word	0x08016ff5
 8013d80:	08016fff 	.word	0x08016fff
 8013d84:	00000000 	.word	0x00000000
 8013d88:	08013ae1 	.word	0x08013ae1
 8013d8c:	08016ffb 	.word	0x08016ffb

08013d90 <_printf_common>:
 8013d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d94:	4616      	mov	r6, r2
 8013d96:	4699      	mov	r9, r3
 8013d98:	688a      	ldr	r2, [r1, #8]
 8013d9a:	690b      	ldr	r3, [r1, #16]
 8013d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013da0:	4293      	cmp	r3, r2
 8013da2:	bfb8      	it	lt
 8013da4:	4613      	movlt	r3, r2
 8013da6:	6033      	str	r3, [r6, #0]
 8013da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013dac:	4607      	mov	r7, r0
 8013dae:	460c      	mov	r4, r1
 8013db0:	b10a      	cbz	r2, 8013db6 <_printf_common+0x26>
 8013db2:	3301      	adds	r3, #1
 8013db4:	6033      	str	r3, [r6, #0]
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	0699      	lsls	r1, r3, #26
 8013dba:	bf42      	ittt	mi
 8013dbc:	6833      	ldrmi	r3, [r6, #0]
 8013dbe:	3302      	addmi	r3, #2
 8013dc0:	6033      	strmi	r3, [r6, #0]
 8013dc2:	6825      	ldr	r5, [r4, #0]
 8013dc4:	f015 0506 	ands.w	r5, r5, #6
 8013dc8:	d106      	bne.n	8013dd8 <_printf_common+0x48>
 8013dca:	f104 0a19 	add.w	sl, r4, #25
 8013dce:	68e3      	ldr	r3, [r4, #12]
 8013dd0:	6832      	ldr	r2, [r6, #0]
 8013dd2:	1a9b      	subs	r3, r3, r2
 8013dd4:	42ab      	cmp	r3, r5
 8013dd6:	dc26      	bgt.n	8013e26 <_printf_common+0x96>
 8013dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ddc:	1e13      	subs	r3, r2, #0
 8013dde:	6822      	ldr	r2, [r4, #0]
 8013de0:	bf18      	it	ne
 8013de2:	2301      	movne	r3, #1
 8013de4:	0692      	lsls	r2, r2, #26
 8013de6:	d42b      	bmi.n	8013e40 <_printf_common+0xb0>
 8013de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013dec:	4649      	mov	r1, r9
 8013dee:	4638      	mov	r0, r7
 8013df0:	47c0      	blx	r8
 8013df2:	3001      	adds	r0, #1
 8013df4:	d01e      	beq.n	8013e34 <_printf_common+0xa4>
 8013df6:	6823      	ldr	r3, [r4, #0]
 8013df8:	6922      	ldr	r2, [r4, #16]
 8013dfa:	f003 0306 	and.w	r3, r3, #6
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	bf02      	ittt	eq
 8013e02:	68e5      	ldreq	r5, [r4, #12]
 8013e04:	6833      	ldreq	r3, [r6, #0]
 8013e06:	1aed      	subeq	r5, r5, r3
 8013e08:	68a3      	ldr	r3, [r4, #8]
 8013e0a:	bf0c      	ite	eq
 8013e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e10:	2500      	movne	r5, #0
 8013e12:	4293      	cmp	r3, r2
 8013e14:	bfc4      	itt	gt
 8013e16:	1a9b      	subgt	r3, r3, r2
 8013e18:	18ed      	addgt	r5, r5, r3
 8013e1a:	2600      	movs	r6, #0
 8013e1c:	341a      	adds	r4, #26
 8013e1e:	42b5      	cmp	r5, r6
 8013e20:	d11a      	bne.n	8013e58 <_printf_common+0xc8>
 8013e22:	2000      	movs	r0, #0
 8013e24:	e008      	b.n	8013e38 <_printf_common+0xa8>
 8013e26:	2301      	movs	r3, #1
 8013e28:	4652      	mov	r2, sl
 8013e2a:	4649      	mov	r1, r9
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	47c0      	blx	r8
 8013e30:	3001      	adds	r0, #1
 8013e32:	d103      	bne.n	8013e3c <_printf_common+0xac>
 8013e34:	f04f 30ff 	mov.w	r0, #4294967295
 8013e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e3c:	3501      	adds	r5, #1
 8013e3e:	e7c6      	b.n	8013dce <_printf_common+0x3e>
 8013e40:	18e1      	adds	r1, r4, r3
 8013e42:	1c5a      	adds	r2, r3, #1
 8013e44:	2030      	movs	r0, #48	; 0x30
 8013e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e4a:	4422      	add	r2, r4
 8013e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e54:	3302      	adds	r3, #2
 8013e56:	e7c7      	b.n	8013de8 <_printf_common+0x58>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4622      	mov	r2, r4
 8013e5c:	4649      	mov	r1, r9
 8013e5e:	4638      	mov	r0, r7
 8013e60:	47c0      	blx	r8
 8013e62:	3001      	adds	r0, #1
 8013e64:	d0e6      	beq.n	8013e34 <_printf_common+0xa4>
 8013e66:	3601      	adds	r6, #1
 8013e68:	e7d9      	b.n	8013e1e <_printf_common+0x8e>
	...

08013e6c <_printf_i>:
 8013e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e70:	7e0f      	ldrb	r7, [r1, #24]
 8013e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e74:	2f78      	cmp	r7, #120	; 0x78
 8013e76:	4691      	mov	r9, r2
 8013e78:	4680      	mov	r8, r0
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	469a      	mov	sl, r3
 8013e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013e82:	d807      	bhi.n	8013e94 <_printf_i+0x28>
 8013e84:	2f62      	cmp	r7, #98	; 0x62
 8013e86:	d80a      	bhi.n	8013e9e <_printf_i+0x32>
 8013e88:	2f00      	cmp	r7, #0
 8013e8a:	f000 80d4 	beq.w	8014036 <_printf_i+0x1ca>
 8013e8e:	2f58      	cmp	r7, #88	; 0x58
 8013e90:	f000 80c0 	beq.w	8014014 <_printf_i+0x1a8>
 8013e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e9c:	e03a      	b.n	8013f14 <_printf_i+0xa8>
 8013e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ea2:	2b15      	cmp	r3, #21
 8013ea4:	d8f6      	bhi.n	8013e94 <_printf_i+0x28>
 8013ea6:	a101      	add	r1, pc, #4	; (adr r1, 8013eac <_printf_i+0x40>)
 8013ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013eac:	08013f05 	.word	0x08013f05
 8013eb0:	08013f19 	.word	0x08013f19
 8013eb4:	08013e95 	.word	0x08013e95
 8013eb8:	08013e95 	.word	0x08013e95
 8013ebc:	08013e95 	.word	0x08013e95
 8013ec0:	08013e95 	.word	0x08013e95
 8013ec4:	08013f19 	.word	0x08013f19
 8013ec8:	08013e95 	.word	0x08013e95
 8013ecc:	08013e95 	.word	0x08013e95
 8013ed0:	08013e95 	.word	0x08013e95
 8013ed4:	08013e95 	.word	0x08013e95
 8013ed8:	0801401d 	.word	0x0801401d
 8013edc:	08013f45 	.word	0x08013f45
 8013ee0:	08013fd7 	.word	0x08013fd7
 8013ee4:	08013e95 	.word	0x08013e95
 8013ee8:	08013e95 	.word	0x08013e95
 8013eec:	0801403f 	.word	0x0801403f
 8013ef0:	08013e95 	.word	0x08013e95
 8013ef4:	08013f45 	.word	0x08013f45
 8013ef8:	08013e95 	.word	0x08013e95
 8013efc:	08013e95 	.word	0x08013e95
 8013f00:	08013fdf 	.word	0x08013fdf
 8013f04:	682b      	ldr	r3, [r5, #0]
 8013f06:	1d1a      	adds	r2, r3, #4
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	602a      	str	r2, [r5, #0]
 8013f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f14:	2301      	movs	r3, #1
 8013f16:	e09f      	b.n	8014058 <_printf_i+0x1ec>
 8013f18:	6820      	ldr	r0, [r4, #0]
 8013f1a:	682b      	ldr	r3, [r5, #0]
 8013f1c:	0607      	lsls	r7, r0, #24
 8013f1e:	f103 0104 	add.w	r1, r3, #4
 8013f22:	6029      	str	r1, [r5, #0]
 8013f24:	d501      	bpl.n	8013f2a <_printf_i+0xbe>
 8013f26:	681e      	ldr	r6, [r3, #0]
 8013f28:	e003      	b.n	8013f32 <_printf_i+0xc6>
 8013f2a:	0646      	lsls	r6, r0, #25
 8013f2c:	d5fb      	bpl.n	8013f26 <_printf_i+0xba>
 8013f2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013f32:	2e00      	cmp	r6, #0
 8013f34:	da03      	bge.n	8013f3e <_printf_i+0xd2>
 8013f36:	232d      	movs	r3, #45	; 0x2d
 8013f38:	4276      	negs	r6, r6
 8013f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f3e:	485a      	ldr	r0, [pc, #360]	; (80140a8 <_printf_i+0x23c>)
 8013f40:	230a      	movs	r3, #10
 8013f42:	e012      	b.n	8013f6a <_printf_i+0xfe>
 8013f44:	682b      	ldr	r3, [r5, #0]
 8013f46:	6820      	ldr	r0, [r4, #0]
 8013f48:	1d19      	adds	r1, r3, #4
 8013f4a:	6029      	str	r1, [r5, #0]
 8013f4c:	0605      	lsls	r5, r0, #24
 8013f4e:	d501      	bpl.n	8013f54 <_printf_i+0xe8>
 8013f50:	681e      	ldr	r6, [r3, #0]
 8013f52:	e002      	b.n	8013f5a <_printf_i+0xee>
 8013f54:	0641      	lsls	r1, r0, #25
 8013f56:	d5fb      	bpl.n	8013f50 <_printf_i+0xe4>
 8013f58:	881e      	ldrh	r6, [r3, #0]
 8013f5a:	4853      	ldr	r0, [pc, #332]	; (80140a8 <_printf_i+0x23c>)
 8013f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8013f5e:	bf0c      	ite	eq
 8013f60:	2308      	moveq	r3, #8
 8013f62:	230a      	movne	r3, #10
 8013f64:	2100      	movs	r1, #0
 8013f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f6a:	6865      	ldr	r5, [r4, #4]
 8013f6c:	60a5      	str	r5, [r4, #8]
 8013f6e:	2d00      	cmp	r5, #0
 8013f70:	bfa2      	ittt	ge
 8013f72:	6821      	ldrge	r1, [r4, #0]
 8013f74:	f021 0104 	bicge.w	r1, r1, #4
 8013f78:	6021      	strge	r1, [r4, #0]
 8013f7a:	b90e      	cbnz	r6, 8013f80 <_printf_i+0x114>
 8013f7c:	2d00      	cmp	r5, #0
 8013f7e:	d04b      	beq.n	8014018 <_printf_i+0x1ac>
 8013f80:	4615      	mov	r5, r2
 8013f82:	fbb6 f1f3 	udiv	r1, r6, r3
 8013f86:	fb03 6711 	mls	r7, r3, r1, r6
 8013f8a:	5dc7      	ldrb	r7, [r0, r7]
 8013f8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f90:	4637      	mov	r7, r6
 8013f92:	42bb      	cmp	r3, r7
 8013f94:	460e      	mov	r6, r1
 8013f96:	d9f4      	bls.n	8013f82 <_printf_i+0x116>
 8013f98:	2b08      	cmp	r3, #8
 8013f9a:	d10b      	bne.n	8013fb4 <_printf_i+0x148>
 8013f9c:	6823      	ldr	r3, [r4, #0]
 8013f9e:	07de      	lsls	r6, r3, #31
 8013fa0:	d508      	bpl.n	8013fb4 <_printf_i+0x148>
 8013fa2:	6923      	ldr	r3, [r4, #16]
 8013fa4:	6861      	ldr	r1, [r4, #4]
 8013fa6:	4299      	cmp	r1, r3
 8013fa8:	bfde      	ittt	le
 8013faa:	2330      	movle	r3, #48	; 0x30
 8013fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013fb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013fb4:	1b52      	subs	r2, r2, r5
 8013fb6:	6122      	str	r2, [r4, #16]
 8013fb8:	f8cd a000 	str.w	sl, [sp]
 8013fbc:	464b      	mov	r3, r9
 8013fbe:	aa03      	add	r2, sp, #12
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	4640      	mov	r0, r8
 8013fc4:	f7ff fee4 	bl	8013d90 <_printf_common>
 8013fc8:	3001      	adds	r0, #1
 8013fca:	d14a      	bne.n	8014062 <_printf_i+0x1f6>
 8013fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd0:	b004      	add	sp, #16
 8013fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd6:	6823      	ldr	r3, [r4, #0]
 8013fd8:	f043 0320 	orr.w	r3, r3, #32
 8013fdc:	6023      	str	r3, [r4, #0]
 8013fde:	4833      	ldr	r0, [pc, #204]	; (80140ac <_printf_i+0x240>)
 8013fe0:	2778      	movs	r7, #120	; 0x78
 8013fe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013fe6:	6823      	ldr	r3, [r4, #0]
 8013fe8:	6829      	ldr	r1, [r5, #0]
 8013fea:	061f      	lsls	r7, r3, #24
 8013fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ff0:	d402      	bmi.n	8013ff8 <_printf_i+0x18c>
 8013ff2:	065f      	lsls	r7, r3, #25
 8013ff4:	bf48      	it	mi
 8013ff6:	b2b6      	uxthmi	r6, r6
 8013ff8:	07df      	lsls	r7, r3, #31
 8013ffa:	bf48      	it	mi
 8013ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8014000:	6029      	str	r1, [r5, #0]
 8014002:	bf48      	it	mi
 8014004:	6023      	strmi	r3, [r4, #0]
 8014006:	b91e      	cbnz	r6, 8014010 <_printf_i+0x1a4>
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	f023 0320 	bic.w	r3, r3, #32
 801400e:	6023      	str	r3, [r4, #0]
 8014010:	2310      	movs	r3, #16
 8014012:	e7a7      	b.n	8013f64 <_printf_i+0xf8>
 8014014:	4824      	ldr	r0, [pc, #144]	; (80140a8 <_printf_i+0x23c>)
 8014016:	e7e4      	b.n	8013fe2 <_printf_i+0x176>
 8014018:	4615      	mov	r5, r2
 801401a:	e7bd      	b.n	8013f98 <_printf_i+0x12c>
 801401c:	682b      	ldr	r3, [r5, #0]
 801401e:	6826      	ldr	r6, [r4, #0]
 8014020:	6961      	ldr	r1, [r4, #20]
 8014022:	1d18      	adds	r0, r3, #4
 8014024:	6028      	str	r0, [r5, #0]
 8014026:	0635      	lsls	r5, r6, #24
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	d501      	bpl.n	8014030 <_printf_i+0x1c4>
 801402c:	6019      	str	r1, [r3, #0]
 801402e:	e002      	b.n	8014036 <_printf_i+0x1ca>
 8014030:	0670      	lsls	r0, r6, #25
 8014032:	d5fb      	bpl.n	801402c <_printf_i+0x1c0>
 8014034:	8019      	strh	r1, [r3, #0]
 8014036:	2300      	movs	r3, #0
 8014038:	6123      	str	r3, [r4, #16]
 801403a:	4615      	mov	r5, r2
 801403c:	e7bc      	b.n	8013fb8 <_printf_i+0x14c>
 801403e:	682b      	ldr	r3, [r5, #0]
 8014040:	1d1a      	adds	r2, r3, #4
 8014042:	602a      	str	r2, [r5, #0]
 8014044:	681d      	ldr	r5, [r3, #0]
 8014046:	6862      	ldr	r2, [r4, #4]
 8014048:	2100      	movs	r1, #0
 801404a:	4628      	mov	r0, r5
 801404c:	f7ec f8f0 	bl	8000230 <memchr>
 8014050:	b108      	cbz	r0, 8014056 <_printf_i+0x1ea>
 8014052:	1b40      	subs	r0, r0, r5
 8014054:	6060      	str	r0, [r4, #4]
 8014056:	6863      	ldr	r3, [r4, #4]
 8014058:	6123      	str	r3, [r4, #16]
 801405a:	2300      	movs	r3, #0
 801405c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014060:	e7aa      	b.n	8013fb8 <_printf_i+0x14c>
 8014062:	6923      	ldr	r3, [r4, #16]
 8014064:	462a      	mov	r2, r5
 8014066:	4649      	mov	r1, r9
 8014068:	4640      	mov	r0, r8
 801406a:	47d0      	blx	sl
 801406c:	3001      	adds	r0, #1
 801406e:	d0ad      	beq.n	8013fcc <_printf_i+0x160>
 8014070:	6823      	ldr	r3, [r4, #0]
 8014072:	079b      	lsls	r3, r3, #30
 8014074:	d413      	bmi.n	801409e <_printf_i+0x232>
 8014076:	68e0      	ldr	r0, [r4, #12]
 8014078:	9b03      	ldr	r3, [sp, #12]
 801407a:	4298      	cmp	r0, r3
 801407c:	bfb8      	it	lt
 801407e:	4618      	movlt	r0, r3
 8014080:	e7a6      	b.n	8013fd0 <_printf_i+0x164>
 8014082:	2301      	movs	r3, #1
 8014084:	4632      	mov	r2, r6
 8014086:	4649      	mov	r1, r9
 8014088:	4640      	mov	r0, r8
 801408a:	47d0      	blx	sl
 801408c:	3001      	adds	r0, #1
 801408e:	d09d      	beq.n	8013fcc <_printf_i+0x160>
 8014090:	3501      	adds	r5, #1
 8014092:	68e3      	ldr	r3, [r4, #12]
 8014094:	9903      	ldr	r1, [sp, #12]
 8014096:	1a5b      	subs	r3, r3, r1
 8014098:	42ab      	cmp	r3, r5
 801409a:	dcf2      	bgt.n	8014082 <_printf_i+0x216>
 801409c:	e7eb      	b.n	8014076 <_printf_i+0x20a>
 801409e:	2500      	movs	r5, #0
 80140a0:	f104 0619 	add.w	r6, r4, #25
 80140a4:	e7f5      	b.n	8014092 <_printf_i+0x226>
 80140a6:	bf00      	nop
 80140a8:	08017006 	.word	0x08017006
 80140ac:	08017017 	.word	0x08017017

080140b0 <memmove>:
 80140b0:	4288      	cmp	r0, r1
 80140b2:	b510      	push	{r4, lr}
 80140b4:	eb01 0402 	add.w	r4, r1, r2
 80140b8:	d902      	bls.n	80140c0 <memmove+0x10>
 80140ba:	4284      	cmp	r4, r0
 80140bc:	4623      	mov	r3, r4
 80140be:	d807      	bhi.n	80140d0 <memmove+0x20>
 80140c0:	1e43      	subs	r3, r0, #1
 80140c2:	42a1      	cmp	r1, r4
 80140c4:	d008      	beq.n	80140d8 <memmove+0x28>
 80140c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140ce:	e7f8      	b.n	80140c2 <memmove+0x12>
 80140d0:	4402      	add	r2, r0
 80140d2:	4601      	mov	r1, r0
 80140d4:	428a      	cmp	r2, r1
 80140d6:	d100      	bne.n	80140da <memmove+0x2a>
 80140d8:	bd10      	pop	{r4, pc}
 80140da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140e2:	e7f7      	b.n	80140d4 <memmove+0x24>

080140e4 <_realloc_r>:
 80140e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e8:	4680      	mov	r8, r0
 80140ea:	4614      	mov	r4, r2
 80140ec:	460e      	mov	r6, r1
 80140ee:	b921      	cbnz	r1, 80140fa <_realloc_r+0x16>
 80140f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140f4:	4611      	mov	r1, r2
 80140f6:	f7ff ba99 	b.w	801362c <_malloc_r>
 80140fa:	b92a      	cbnz	r2, 8014108 <_realloc_r+0x24>
 80140fc:	f7ff fca4 	bl	8013a48 <_free_r>
 8014100:	4625      	mov	r5, r4
 8014102:	4628      	mov	r0, r5
 8014104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014108:	f000 f81b 	bl	8014142 <_malloc_usable_size_r>
 801410c:	4284      	cmp	r4, r0
 801410e:	4607      	mov	r7, r0
 8014110:	d802      	bhi.n	8014118 <_realloc_r+0x34>
 8014112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014116:	d812      	bhi.n	801413e <_realloc_r+0x5a>
 8014118:	4621      	mov	r1, r4
 801411a:	4640      	mov	r0, r8
 801411c:	f7ff fa86 	bl	801362c <_malloc_r>
 8014120:	4605      	mov	r5, r0
 8014122:	2800      	cmp	r0, #0
 8014124:	d0ed      	beq.n	8014102 <_realloc_r+0x1e>
 8014126:	42bc      	cmp	r4, r7
 8014128:	4622      	mov	r2, r4
 801412a:	4631      	mov	r1, r6
 801412c:	bf28      	it	cs
 801412e:	463a      	movcs	r2, r7
 8014130:	f7ff fc7c 	bl	8013a2c <memcpy>
 8014134:	4631      	mov	r1, r6
 8014136:	4640      	mov	r0, r8
 8014138:	f7ff fc86 	bl	8013a48 <_free_r>
 801413c:	e7e1      	b.n	8014102 <_realloc_r+0x1e>
 801413e:	4635      	mov	r5, r6
 8014140:	e7df      	b.n	8014102 <_realloc_r+0x1e>

08014142 <_malloc_usable_size_r>:
 8014142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014146:	1f18      	subs	r0, r3, #4
 8014148:	2b00      	cmp	r3, #0
 801414a:	bfbc      	itt	lt
 801414c:	580b      	ldrlt	r3, [r1, r0]
 801414e:	18c0      	addlt	r0, r0, r3
 8014150:	4770      	bx	lr
	...

08014154 <_init>:
 8014154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014156:	bf00      	nop
 8014158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801415a:	bc08      	pop	{r3}
 801415c:	469e      	mov	lr, r3
 801415e:	4770      	bx	lr

08014160 <_fini>:
 8014160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014162:	bf00      	nop
 8014164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014166:	bc08      	pop	{r3}
 8014168:	469e      	mov	lr, r3
 801416a:	4770      	bx	lr
